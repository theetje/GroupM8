//
//  StyleKit.swift
//
//  Created on Jan 11, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawLandingPage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(white: 0.984, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Button
        // Warning: New symbols are not supported.
        /// Button/black
        // Warning: New symbols are not supported.
        /// Tagline
        let tagline = NSMutableAttributedString(string: "Welkom.\nCreÃ«er of word lid van een groep.")
        tagline.addAttribute(.font, value: UIFont(name: "Avenir-Black", size: 32)!, range: NSRange(location: 0, length: tagline.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 46
            paragraphStyle.minimumLineHeight = 46
            tagline.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tagline.length))
        }
        context.saveGState()
        tagline.draw(in: CGRect(x: 24, y: 271, width: 315, height: 152))
        context.restoreGState()
        /// Status bar - Dark
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawLogin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(white: 0.984, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Forgot your password
        let forgotYourPassword = NSMutableAttributedString(string: "Forgot your password?")
        forgotYourPassword.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 16)!, range: NSRange(location: 0, length: forgotYourPassword.length))
        forgotYourPassword.addAttribute(.underlineStyle, value: NSUnderlineStyle.styleSingle.rawValue, range: NSRange(location: 0, length: forgotYourPassword.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            forgotYourPassword.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: forgotYourPassword.length))
        }
        context.saveGState()
        forgotYourPassword.draw(in: CGRect(x: 16, y: 562, width: 344, height: 22))
        context.restoreGState()
        /// Text Field Copy
        // Warning: New symbols are not supported.
        /// Text Field
        // Warning: New symbols are not supported.
        /// View
        let view = UIBezierPath()
        view.move(to: CGPoint(x: 9.18, y: 0))
        view.addCurve(to: CGPoint(x: 14.75, y: 1.74), controlPoint1: CGPoint(x: 11.24, y: 0), controlPoint2: CGPoint(x: 13.09, y: 0.58))
        view.addCurve(to: CGPoint(x: 18.32, y: 6.25), controlPoint1: CGPoint(x: 16.4, y: 2.9), controlPoint2: CGPoint(x: 17.59, y: 4.4))
        view.addCurve(to: CGPoint(x: 14.75, y: 10.76), controlPoint1: CGPoint(x: 17.59, y: 8.1), controlPoint2: CGPoint(x: 16.4, y: 9.6))
        view.addCurve(to: CGPoint(x: 9.18, y: 12.5), controlPoint1: CGPoint(x: 13.09, y: 11.92), controlPoint2: CGPoint(x: 11.24, y: 12.5))
        view.addCurve(to: CGPoint(x: 3.59, y: 10.76), controlPoint1: CGPoint(x: 7.12, y: 12.5), controlPoint2: CGPoint(x: 5.26, y: 11.92))
        view.addCurve(to: CGPoint(x: 0, y: 6.25), controlPoint1: CGPoint(x: 1.93, y: 9.6), controlPoint2: CGPoint(x: 0.73, y: 8.1))
        view.addCurve(to: CGPoint(x: 3.59, y: 1.74), controlPoint1: CGPoint(x: 0.73, y: 4.4), controlPoint2: CGPoint(x: 1.93, y: 2.9))
        view.addCurve(to: CGPoint(x: 9.18, y: 0), controlPoint1: CGPoint(x: 5.26, y: 0.58), controlPoint2: CGPoint(x: 7.12, y: 0))
        view.close()
        view.move(to: CGPoint(x: 9.18, y: 10.43))
        view.addCurve(to: CGPoint(x: 12.11, y: 9.2), controlPoint1: CGPoint(x: 10.33, y: 10.43), controlPoint2: CGPoint(x: 11.3, y: 10.02))
        view.addCurve(to: CGPoint(x: 13.32, y: 6.25), controlPoint1: CGPoint(x: 12.92, y: 8.38), controlPoint2: CGPoint(x: 13.32, y: 7.4))
        view.addCurve(to: CGPoint(x: 12.11, y: 3.3), controlPoint1: CGPoint(x: 13.32, y: 5.1), controlPoint2: CGPoint(x: 12.92, y: 4.12))
        view.addCurve(to: CGPoint(x: 9.18, y: 2.07), controlPoint1: CGPoint(x: 11.3, y: 2.48), controlPoint2: CGPoint(x: 10.33, y: 2.07))
        view.addCurve(to: CGPoint(x: 6.23, y: 3.3), controlPoint1: CGPoint(x: 8.03, y: 2.07), controlPoint2: CGPoint(x: 7.05, y: 2.48))
        view.addCurve(to: CGPoint(x: 5, y: 6.25), controlPoint1: CGPoint(x: 5.41, y: 4.12), controlPoint2: CGPoint(x: 5, y: 5.1))
        view.addCurve(to: CGPoint(x: 6.23, y: 9.2), controlPoint1: CGPoint(x: 5, y: 7.4), controlPoint2: CGPoint(x: 5.41, y: 8.38))
        view.addCurve(to: CGPoint(x: 9.18, y: 10.43), controlPoint1: CGPoint(x: 7.05, y: 10.02), controlPoint2: CGPoint(x: 8.03, y: 10.43))
        view.close()
        view.move(to: CGPoint(x: 9.16, y: 3.75))
        view.addCurve(to: CGPoint(x: 10.94, y: 4.47), controlPoint1: CGPoint(x: 9.85, y: 3.75), controlPoint2: CGPoint(x: 10.44, y: 3.99))
        view.addCurve(to: CGPoint(x: 11.68, y: 6.25), controlPoint1: CGPoint(x: 11.43, y: 4.95), controlPoint2: CGPoint(x: 11.68, y: 5.55))
        view.addCurve(to: CGPoint(x: 10.94, y: 8.03), controlPoint1: CGPoint(x: 11.68, y: 6.95), controlPoint2: CGPoint(x: 11.43, y: 7.55))
        view.addCurve(to: CGPoint(x: 9.16, y: 8.75), controlPoint1: CGPoint(x: 10.44, y: 8.51), controlPoint2: CGPoint(x: 9.85, y: 8.75))
        view.addCurve(to: CGPoint(x: 7.4, y: 8.03), controlPoint1: CGPoint(x: 8.47, y: 8.75), controlPoint2: CGPoint(x: 7.88, y: 8.51))
        view.addCurve(to: CGPoint(x: 6.68, y: 6.25), controlPoint1: CGPoint(x: 6.92, y: 7.55), controlPoint2: CGPoint(x: 6.68, y: 6.95))
        view.addCurve(to: CGPoint(x: 7.4, y: 4.47), controlPoint1: CGPoint(x: 6.68, y: 5.55), controlPoint2: CGPoint(x: 6.92, y: 4.95))
        view.addCurve(to: CGPoint(x: 9.16, y: 3.75), controlPoint1: CGPoint(x: 7.88, y: 3.99), controlPoint2: CGPoint(x: 8.47, y: 3.75))
        view.close()
        view.move(to: CGPoint(x: 9.16, y: 3.75))
        context.saveGState()
        context.translateBy(x: 330, y: 248.25)
        view.usesEvenOddFillRule = true
        UIColor(hue: 0.607, saturation: 0.066, brightness: 0.831, alpha: 1).setFill()
        view.fill()
        context.restoreGState()
        /// Tagline
        let tagline = NSMutableAttributedString(string: "Login with email")
        tagline.addAttribute(.font, value: UIFont(name: "Avenir-Black", size: 32)!, range: NSRange(location: 0, length: tagline.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 46
            paragraphStyle.minimumLineHeight = 46
            tagline.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tagline.length))
        }
        context.saveGState()
        tagline.draw(in: CGRect(x: 24, y: 90, width: 315, height: 51))
        context.restoreGState()
        /// back
        // Warning: New symbols are not supported.
        /// Status bar - Dark
        // Warning: New symbols are not supported.
        /// Text Field Copy
        // Warning: New symbols are not supported.
        /// Button
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawMessageboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(hue: 1, saturation: 0.001, brightness: 0.95, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 375, y: 0))
        rectangle.addLine(to: CGPoint(x: 375, y: 81))
        rectangle.addLine(to: CGPoint(x: 0, y: 81))
        context.saveGState()
        rectangle.usesEvenOddFillRule = true
        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Messageboard
            let messageboard2 = NSMutableAttributedString(string: "Messageboard\n")
            messageboard2.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: messageboard2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                messageboard2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageboard2.length))
            }
            context.saveGState()
            messageboard2.draw(at: CGPoint(x: 120.5, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 167)
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 162), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.addRect(rectangle3.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle3.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// It wonât be a bigger
            let itWontBeABigger = NSMutableAttributedString(string: "It wonât be a bigger problem to find one game lover in yor neighbor. Since the introduction of Virtual Game, it has achieving great heights so far as its popularity and technological .")
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: 56))
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 12)!, range: NSRange(location: 56, length: 1))
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 57, length: 127))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                itWontBeABigger.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: itWontBeABigger.length))
            }
            context.saveGState()
            itWontBeABigger.draw(in: CGRect(x: 16, y: 59, width: 321, height: 97))
            context.restoreGState()
            
            /// Vernon Cox
            let vernonCox = NSMutableAttributedString(string: "Vernon Cox")
            vernonCox.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: vernonCox.length))
            context.saveGState()
            vernonCox.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 04 Jun 2017
            let _04Jun2017 = NSMutableAttributedString(string: "04 Jun 2017")
            _04Jun2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _04Jun2017.length))
            context.saveGState()
            _04Jun2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            context.saveGState()
            context.translateBy(x: 391.32, y: 251.66)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 354)
            
            /// Rectangle 3
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 158), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle6.cgPath)
            context.addRect(rectangle6.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle6.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle6.fill()
            context.restoreGState()
            
            /// The most important t
            let theMostImportantT = NSMutableAttributedString(string: "The most important thing to keep in mind is that a turkey takes a long while to cook through to the boneâ¦and keeps on cooking once you remove it from the oven. Make to bake, braise or roast the bird at a high enough .")
            theMostImportantT.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: theMostImportantT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                theMostImportantT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: theMostImportantT.length))
            }
            context.saveGState()
            theMostImportantT.draw(in: CGRect(x: 16, y: 54, width: 321, height: 285))
            context.restoreGState()
            
            /// Mason Simmons
            let masonSimmons = NSMutableAttributedString(string: "Mason Simmons")
            masonSimmons.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: masonSimmons.length))
            context.saveGState()
            masonSimmons.draw(in: CGRect(x: 62, y: 20, width: 98, height: 17))
            context.restoreGState()
            
            /// 21 Aug 2017
            let _21Aug2017 = NSMutableAttributedString(string: "21 Aug 2017")
            _21Aug2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _21Aug2017.length))
            context.saveGState()
            _21Aug2017.draw(in: CGRect(x: 63, y: 36, width: 46, height: 11))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 29), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 16)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 536)
            
            /// Rectangle 3
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 195), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle8.cgPath)
            context.addRect(rectangle8.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle8.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle8.fill()
            context.restoreGState()
            
            /// î«®
            let layer = NSMutableAttributedString(string: "î«®")
            layer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 256, y: 177))
            context.restoreGState()
            
            /// White Gold began gai
            let whiteGoldBeganGai = NSMutableAttributedString(string: "White Gold began gaining popularity in the early 1900âs as an alternative to platinum. Platinum was steadily becoming more fashionable, but because of its rarity many could not afford it. Then, during World War II the government put a ban on the use of Platinum for any non-military functions and the demand for White Gold skyrocketed.\n\nThe most common alloys added to gold to produce white gold are nickel, palladium and silver. Most white gold jewelry is also given an electroplated rhodium coating to intensify brightness. Throughout this process, white gold retains many of the benefits of gold. It wonât tarnish and due to the metals added, it is stronger than its yellow counterpart.\n\nRecently, palladium has replaced nickel as the common alloy in white gold. It seems that a small percent of the population-approximately 12-15%-has an allergic reaction to nickel causing skin irritation and rashes. It is now required by law that jewelry pieces containing nickel be labeled ânickel-containing.â\n\nSources:\n\nhttp://en.wikipedia.org/wiki/White_gold\n\nhttp://www.gold.org/jewellery/technology/colours/white.html\n\nhttp://www.govmint.com/knowledgebase/PreciousMetals.aspx")
            whiteGoldBeganGai.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: whiteGoldBeganGai.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                whiteGoldBeganGai.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: whiteGoldBeganGai.length))
            }
            context.saveGState()
            whiteGoldBeganGai.draw(in: CGRect(x: 16, y: 59, width: 321, height: 70))
            context.restoreGState()
            
            /// Della Hicks
            let dellaHicks = NSMutableAttributedString(string: "Della Hicks")
            dellaHicks.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: dellaHicks.length))
            context.saveGState()
            dellaHicks.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 29 Jul 2017
            let _29Jul2017 = NSMutableAttributedString(string: "29 Jul 2017")
            _29Jul2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _29Jul2017.length))
            context.saveGState()
            _29Jul2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// î¨
            let layer2 = NSMutableAttributedString(string: "î¨")
            layer2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer2.length))
            context.saveGState()
            layer2.draw(at: CGPoint(x: 26, y: 176))
            context.restoreGState()
            
            /// Like
            let like = NSMutableAttributedString(string: "Like")
            like.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: like.length))
            context.saveGState()
            like.draw(at: CGPoint(x: 41, y: 175))
            context.restoreGState()
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 1.5, y: 0.5))
            line2.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 228, y: 168)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Comment
            let comment = NSMutableAttributedString(string: "Comment")
            comment.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: comment.length))
            context.saveGState()
            comment.draw(at: CGPoint(x: 140, y: 175))
            context.restoreGState()
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 1.5, y: 0.5))
            line3.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 97, y: 168)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// î¦§
            let layer3 = NSMutableAttributedString(string: "î¦§")
            layer3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer3.length))
            context.saveGState()
            layer3.draw(at: CGPoint(x: 126, y: 178))
            context.restoreGState()
            
            /// Share
            let share = NSMutableAttributedString(string: "Share")
            share.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: share.length))
            context.saveGState()
            share.draw(at: CGPoint(x: 273, y: 175))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 0.5, y: 1.5))
            line4.addLine(to: CGPoint(x: 336.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 167)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line4.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Input
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 94)
            
            /// Rectangle 3
            let rectangle12 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 41), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle12.cgPath)
            context.addRect(rectangle12.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle12.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle12.fill()
            context.restoreGState()
            
            /// Type Your owne messa
            let typeYourOwneMessa = NSMutableAttributedString(string: "Type Your owne message")
            typeYourOwneMessa.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: typeYourOwneMessa.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                typeYourOwneMessa.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: typeYourOwneMessa.length))
            }
            // Warning: Text fill is not supported, use text color.
            context.saveGState()
            typeYourOwneMessa.draw(in: CGRect(x: 102, y: 8, width: 246, height: 25))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 19), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 11)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawMessageboardMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(hue: 1, saturation: 0.001, brightness: 0.95, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 81))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 15, y: 41)
            
            /// account_circle - material
            let account_circleMaterial = NSMutableAttributedString(string: "î ")
            account_circleMaterial.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: account_circleMaterial.length))
            context.saveGState()
            account_circleMaterial.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 105)
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 195), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.addRect(rectangle3.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle3.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// î«®
            let layer = NSMutableAttributedString(string: "î«®")
            layer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 256, y: 177))
            context.restoreGState()
            
            /// It wonât be a bigger
            let itWontBeABigger = NSMutableAttributedString(string: "It wonât be a bigger problem to find one game lover in yor neighbor. Since the introduction of Virtual Game, it has achieving great heights so far as its popularity and technological .")
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: 56))
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 12)!, range: NSRange(location: 56, length: 1))
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 57, length: 127))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                itWontBeABigger.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: itWontBeABigger.length))
            }
            context.saveGState()
            itWontBeABigger.draw(in: CGRect(x: 16, y: 59, width: 321, height: 97))
            context.restoreGState()
            
            /// Vernon Cox
            let vernonCox = NSMutableAttributedString(string: "Vernon Cox")
            vernonCox.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: vernonCox.length))
            context.saveGState()
            vernonCox.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 04 Jun 2017
            let _04Jun2017 = NSMutableAttributedString(string: "04 Jun 2017")
            _04Jun2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _04Jun2017.length))
            context.saveGState()
            _04Jun2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// î¨
            let layer2 = NSMutableAttributedString(string: "î¨")
            layer2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer2.length))
            context.saveGState()
            layer2.draw(at: CGPoint(x: 26, y: 176))
            context.restoreGState()
            
            /// Like
            let like = NSMutableAttributedString(string: "Like")
            like.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: like.length))
            context.saveGState()
            like.draw(at: CGPoint(x: 41, y: 175))
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 1.5, y: 0.5))
            line.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 228, y: 168)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            /// Comment
            let comment = NSMutableAttributedString(string: "Comment")
            comment.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: comment.length))
            context.saveGState()
            comment.draw(at: CGPoint(x: 140, y: 175))
            context.restoreGState()
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 1.5, y: 0.5))
            line2.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 97, y: 168)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// î¦§
            let layer3 = NSMutableAttributedString(string: "î¦§")
            layer3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer3.length))
            context.saveGState()
            layer3.draw(at: CGPoint(x: 126, y: 178))
            context.restoreGState()
            
            /// Share
            let share = NSMutableAttributedString(string: "Share")
            share.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: share.length))
            context.saveGState()
            share.draw(at: CGPoint(x: 273, y: 175))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 0.5, y: 1.5))
            line3.addLine(to: CGPoint(x: 336.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 167)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line3.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 325)
            
            /// Rectangle 3
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 195), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle6.cgPath)
            context.addRect(rectangle6.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle6.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle6.fill()
            context.restoreGState()
            
            /// î«®
            let layer4 = NSMutableAttributedString(string: "î«®")
            layer4.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer4.length))
            context.saveGState()
            layer4.draw(at: CGPoint(x: 256, y: 177))
            context.restoreGState()
            
            /// The most important t
            let theMostImportantT = NSMutableAttributedString(string: "The most important thing to keep in mind is that a turkey takes a long while to cook through to the boneâ¦and keeps on cooking once you remove it from the oven. Make to bake, braise or roast the bird at a high enough .")
            theMostImportantT.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: theMostImportantT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                theMostImportantT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: theMostImportantT.length))
            }
            context.saveGState()
            theMostImportantT.draw(in: CGRect(x: 16, y: 59, width: 321, height: 312))
            context.restoreGState()
            
            /// Mason Simmons
            let masonSimmons = NSMutableAttributedString(string: "Mason Simmons")
            masonSimmons.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: masonSimmons.length))
            context.saveGState()
            masonSimmons.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 21 Aug 2017
            let _21Aug2017 = NSMutableAttributedString(string: "21 Aug 2017")
            _21Aug2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _21Aug2017.length))
            context.saveGState()
            _21Aug2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// î¨
            let layer5 = NSMutableAttributedString(string: "î¨")
            layer5.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer5.length))
            context.saveGState()
            layer5.draw(at: CGPoint(x: 26, y: 176))
            context.restoreGState()
            
            /// Like
            let like2 = NSMutableAttributedString(string: "Like")
            like2.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: like2.length))
            context.saveGState()
            like2.draw(at: CGPoint(x: 41, y: 175))
            context.restoreGState()
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 1.5, y: 0.5))
            line4.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 228, y: 168)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line4.stroke()
            context.restoreGState()
            
            /// Comment
            let comment2 = NSMutableAttributedString(string: "Comment")
            comment2.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: comment2.length))
            context.saveGState()
            comment2.draw(at: CGPoint(x: 140, y: 175))
            context.restoreGState()
            
            /// Line
            let line5 = UIBezierPath()
            line5.move(to: CGPoint(x: 1.5, y: 0.5))
            line5.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 97, y: 168)
            line5.lineCapStyle = .square
            line5.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line5.stroke()
            context.restoreGState()
            
            /// î¦§
            let layer6 = NSMutableAttributedString(string: "î¦§")
            layer6.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer6.length))
            context.saveGState()
            layer6.draw(at: CGPoint(x: 126, y: 178))
            context.restoreGState()
            
            /// Share
            let share2 = NSMutableAttributedString(string: "Share")
            share2.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: share2.length))
            context.saveGState()
            share2.draw(at: CGPoint(x: 273, y: 175))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line6 = UIBezierPath()
            line6.move(to: CGPoint(x: 0.5, y: 1.5))
            line6.addLine(to: CGPoint(x: 336.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 167)
            line6.lineCapStyle = .square
            line6.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line6.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 545)
            
            /// Rectangle 3
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 195), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle8.cgPath)
            context.addRect(rectangle8.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle8.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle8.fill()
            context.restoreGState()
            
            /// î«®
            let layer7 = NSMutableAttributedString(string: "î«®")
            layer7.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer7.length))
            context.saveGState()
            layer7.draw(at: CGPoint(x: 256, y: 177))
            context.restoreGState()
            
            /// White Gold began gai
            let whiteGoldBeganGai = NSMutableAttributedString(string: "White Gold began gaining popularity in the early 1900âs as an alternative to platinum. Platinum was steadily becoming more fashionable, but because of its rarity many could not afford it. Then, during World War II the government put a ban on the use of Platinum for any non-military functions and the demand for White Gold skyrocketed.\n\nThe most common alloys added to gold to produce white gold are nickel, palladium and silver. Most white gold jewelry is also given an electroplated rhodium coating to intensify brightness. Throughout this process, white gold retains many of the benefits of gold. It wonât tarnish and due to the metals added, it is stronger than its yellow counterpart.\n\nRecently, palladium has replaced nickel as the common alloy in white gold. It seems that a small percent of the population-approximately 12-15%-has an allergic reaction to nickel causing skin irritation and rashes. It is now required by law that jewelry pieces containing nickel be labeled ânickel-containing.â\n\nSources:\n\nhttp://en.wikipedia.org/wiki/White_gold\n\nhttp://www.gold.org/jewellery/technology/colours/white.html\n\nhttp://www.govmint.com/knowledgebase/PreciousMetals.aspx")
            whiteGoldBeganGai.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: whiteGoldBeganGai.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                whiteGoldBeganGai.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: whiteGoldBeganGai.length))
            }
            context.saveGState()
            whiteGoldBeganGai.draw(in: CGRect(x: 16, y: 59, width: 321, height: 70))
            context.restoreGState()
            
            /// Della Hicks
            let dellaHicks = NSMutableAttributedString(string: "Della Hicks")
            dellaHicks.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: dellaHicks.length))
            context.saveGState()
            dellaHicks.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 29 Jul 2017
            let _29Jul2017 = NSMutableAttributedString(string: "29 Jul 2017")
            _29Jul2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _29Jul2017.length))
            context.saveGState()
            _29Jul2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// î¨
            let layer8 = NSMutableAttributedString(string: "î¨")
            layer8.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer8.length))
            context.saveGState()
            layer8.draw(at: CGPoint(x: 26, y: 176))
            context.restoreGState()
            
            /// Like
            let like3 = NSMutableAttributedString(string: "Like")
            like3.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: like3.length))
            context.saveGState()
            like3.draw(at: CGPoint(x: 41, y: 175))
            context.restoreGState()
            
            /// Line
            let line7 = UIBezierPath()
            line7.move(to: CGPoint(x: 1.5, y: 0.5))
            line7.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 228, y: 168)
            line7.lineCapStyle = .square
            line7.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line7.stroke()
            context.restoreGState()
            
            /// Comment
            let comment3 = NSMutableAttributedString(string: "Comment")
            comment3.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: comment3.length))
            context.saveGState()
            comment3.draw(at: CGPoint(x: 140, y: 175))
            context.restoreGState()
            
            /// Line
            let line8 = UIBezierPath()
            line8.move(to: CGPoint(x: 1.5, y: 0.5))
            line8.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 97, y: 168)
            line8.lineCapStyle = .square
            line8.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line8.stroke()
            context.restoreGState()
            
            /// î¦§
            let layer9 = NSMutableAttributedString(string: "î¦§")
            layer9.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer9.length))
            context.saveGState()
            layer9.draw(at: CGPoint(x: 126, y: 178))
            context.restoreGState()
            
            /// Share
            let share3 = NSMutableAttributedString(string: "Share")
            share3.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: share3.length))
            context.saveGState()
            share3.draw(at: CGPoint(x: 273, y: 175))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line9 = UIBezierPath()
            line9.move(to: CGPoint(x: 0.5, y: 1.5))
            line9.addLine(to: CGPoint(x: 336.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 167)
            line9.lineCapStyle = .square
            line9.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line9.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Menu
        // Warning: New symbols are not supported.
        /// settings
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 213)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 17.14, y: 11))
            shape.addCurve(to: CGPoint(x: 17.24, y: 10), controlPoint1: CGPoint(x: 17.14, y: 10.7), controlPoint2: CGPoint(x: 17.24, y: 10.4))
            shape.addCurve(to: CGPoint(x: 17.14, y: 9), controlPoint1: CGPoint(x: 17.24, y: 9.6), controlPoint2: CGPoint(x: 17.24, y: 9.3))
            shape.addLine(to: CGPoint(x: 19.24, y: 7.3))
            shape.addCurve(to: CGPoint(x: 19.34, y: 6.7), controlPoint1: CGPoint(x: 19.44, y: 7.1), controlPoint2: CGPoint(x: 19.44, y: 6.9))
            shape.addLine(to: CGPoint(x: 17.34, y: 3.2))
            shape.addCurve(to: CGPoint(x: 16.74, y: 3.1), controlPoint1: CGPoint(x: 17.24, y: 3.1), controlPoint2: CGPoint(x: 17.04, y: 3))
            shape.addLine(to: CGPoint(x: 14.24, y: 4.1))
            shape.addCurve(to: CGPoint(x: 12.54, y: 3.1), controlPoint1: CGPoint(x: 13.74, y: 3.7), controlPoint2: CGPoint(x: 13.14, y: 3.4))
            shape.addLine(to: CGPoint(x: 12.14, y: 0.5))
            shape.addCurve(to: CGPoint(x: 11.74, y: 0), controlPoint1: CGPoint(x: 12.24, y: 0.2), controlPoint2: CGPoint(x: 11.94, y: 0))
            shape.addLine(to: CGPoint(x: 7.74, y: 0))
            shape.addCurve(to: CGPoint(x: 7.24, y: 0.4), controlPoint1: CGPoint(x: 7.54, y: 0), controlPoint2: CGPoint(x: 7.24, y: 0.2))
            shape.addLine(to: CGPoint(x: 6.84, y: 3.1))
            shape.addCurve(to: CGPoint(x: 5.14, y: 4.1), controlPoint1: CGPoint(x: 6.24, y: 3.3), controlPoint2: CGPoint(x: 5.74, y: 3.7))
            shape.addLine(to: CGPoint(x: 2.74, y: 3.1))
            shape.addCurve(to: CGPoint(x: 2.04, y: 3.3), controlPoint1: CGPoint(x: 2.44, y: 3), controlPoint2: CGPoint(x: 2.24, y: 3.1))
            shape.addLine(to: CGPoint(x: 0.04, y: 6.8))
            shape.addCurve(to: CGPoint(x: 0.24, y: 7.4), controlPoint1: CGPoint(x: -0.06, y: 6.9), controlPoint2: CGPoint(x: 0.04, y: 7.2))
            shape.addLine(to: CGPoint(x: 2.34, y: 9))
            shape.addCurve(to: CGPoint(x: 2.24, y: 10), controlPoint1: CGPoint(x: 2.34, y: 9.3), controlPoint2: CGPoint(x: 2.24, y: 9.6))
            shape.addCurve(to: CGPoint(x: 2.34, y: 11), controlPoint1: CGPoint(x: 2.24, y: 10.4), controlPoint2: CGPoint(x: 2.24, y: 10.7))
            shape.addLine(to: CGPoint(x: 0.24, y: 12.7))
            shape.addCurve(to: CGPoint(x: 0.14, y: 13.3), controlPoint1: CGPoint(x: 0.04, y: 12.9), controlPoint2: CGPoint(x: 0.04, y: 13.1))
            shape.addLine(to: CGPoint(x: 2.14, y: 16.8))
            shape.addCurve(to: CGPoint(x: 2.74, y: 16.9), controlPoint1: CGPoint(x: 2.24, y: 16.9), controlPoint2: CGPoint(x: 2.44, y: 17))
            shape.addLine(to: CGPoint(x: 5.24, y: 15.9))
            shape.addCurve(to: CGPoint(x: 6.94, y: 16.9), controlPoint1: CGPoint(x: 5.74, y: 16.3), controlPoint2: CGPoint(x: 6.34, y: 16.6))
            shape.addLine(to: CGPoint(x: 7.34, y: 19.5))
            shape.addCurve(to: CGPoint(x: 7.84, y: 19.9), controlPoint1: CGPoint(x: 7.34, y: 19.7), controlPoint2: CGPoint(x: 7.54, y: 19.9))
            shape.addLine(to: CGPoint(x: 11.84, y: 19.9))
            shape.addCurve(to: CGPoint(x: 12.34, y: 19.5), controlPoint1: CGPoint(x: 12.04, y: 19.9), controlPoint2: CGPoint(x: 12.34, y: 19.7))
            shape.addLine(to: CGPoint(x: 12.74, y: 16.9))
            shape.addCurve(to: CGPoint(x: 14.44, y: 15.9), controlPoint1: CGPoint(x: 13.34, y: 16.6), controlPoint2: CGPoint(x: 13.94, y: 16.3))
            shape.addLine(to: CGPoint(x: 16.94, y: 16.9))
            shape.addCurve(to: CGPoint(x: 17.54, y: 16.7), controlPoint1: CGPoint(x: 17.14, y: 17), controlPoint2: CGPoint(x: 17.44, y: 16.9))
            shape.addLine(to: CGPoint(x: 19.54, y: 13.2))
            shape.addCurve(to: CGPoint(x: 19.44, y: 12.6), controlPoint1: CGPoint(x: 19.64, y: 13), controlPoint2: CGPoint(x: 19.64, y: 12.7))
            shape.addLine(to: CGPoint(x: 17.14, y: 11))
            shape.addLine(to: CGPoint(x: 17.14, y: 11))
            shape.close()
            shape.move(to: CGPoint(x: 9.74, y: 13.5))
            shape.addCurve(to: CGPoint(x: 6.24, y: 10), controlPoint1: CGPoint(x: 7.84, y: 13.5), controlPoint2: CGPoint(x: 6.24, y: 11.9))
            shape.addCurve(to: CGPoint(x: 9.74, y: 6.5), controlPoint1: CGPoint(x: 6.24, y: 8.1), controlPoint2: CGPoint(x: 7.84, y: 6.5))
            shape.addCurve(to: CGPoint(x: 13.24, y: 10), controlPoint1: CGPoint(x: 11.64, y: 6.5), controlPoint2: CGPoint(x: 13.24, y: 8.1))
            shape.addCurve(to: CGPoint(x: 9.74, y: 13.5), controlPoint1: CGPoint(x: 13.24, y: 11.9), controlPoint2: CGPoint(x: 11.64, y: 13.5))
            shape.addLine(to: CGPoint(x: 9.74, y: 13.5))
            shape.close()
            shape.move(to: CGPoint(x: 9.74, y: 13.5))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            shape.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// event 2
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 149)
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 14, y: 11))
            shape2.addLine(to: CGPoint(x: 9, y: 11))
            shape2.addLine(to: CGPoint(x: 9, y: 16))
            shape2.addLine(to: CGPoint(x: 14, y: 16))
            shape2.addLine(to: CGPoint(x: 14, y: 11))
            shape2.addLine(to: CGPoint(x: 14, y: 11))
            shape2.close()
            shape2.move(to: CGPoint(x: 13, y: 0))
            shape2.addLine(to: CGPoint(x: 13, y: 2))
            shape2.addLine(to: CGPoint(x: 5, y: 2))
            shape2.addLine(to: CGPoint(x: 5, y: 0))
            shape2.addLine(to: CGPoint(x: 3, y: 0))
            shape2.addLine(to: CGPoint(x: 3, y: 2))
            shape2.addLine(to: CGPoint(x: 2, y: 2))
            shape2.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
            shape2.addLine(to: CGPoint(x: 0, y: 18))
            shape2.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape2.addLine(to: CGPoint(x: 16, y: 20))
            shape2.addCurve(to: CGPoint(x: 18, y: 18), controlPoint1: CGPoint(x: 17.1, y: 20), controlPoint2: CGPoint(x: 18, y: 19.1))
            shape2.addLine(to: CGPoint(x: 18, y: 4))
            shape2.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
            shape2.addLine(to: CGPoint(x: 15, y: 2))
            shape2.addLine(to: CGPoint(x: 15, y: 0))
            shape2.addLine(to: CGPoint(x: 13, y: 0))
            shape2.addLine(to: CGPoint(x: 13, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 16, y: 18))
            shape2.addLine(to: CGPoint(x: 2, y: 18))
            shape2.addLine(to: CGPoint(x: 2, y: 7))
            shape2.addLine(to: CGPoint(x: 16, y: 7))
            shape2.addLine(to: CGPoint(x: 16, y: 18))
            shape2.addLine(to: CGPoint(x: 16, y: 18))
            shape2.close()
            shape2.move(to: CGPoint(x: 16, y: 18))
            context.saveGState()
            shape2.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// notifications-on
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 90)
            
            /// Shape
            let shape3 = UIBezierPath()
            shape3.move(to: CGPoint(x: 5.6, y: 1.6))
            shape3.addLine(to: CGPoint(x: 4.2, y: 0.2))
            shape3.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.8, y: 2), controlPoint2: CGPoint(x: 0.2, y: 4.8))
            shape3.addLine(to: CGPoint(x: 2, y: 8))
            shape3.addCurve(to: CGPoint(x: 5.6, y: 1.6), controlPoint1: CGPoint(x: 2.2, y: 5.3), controlPoint2: CGPoint(x: 3.5, y: 3))
            shape3.addLine(to: CGPoint(x: 5.6, y: 1.6))
            shape3.close()
            shape3.move(to: CGPoint(x: 19, y: 8))
            shape3.addLine(to: CGPoint(x: 21, y: 8))
            shape3.addCurve(to: CGPoint(x: 16.9, y: 0.2), controlPoint1: CGPoint(x: 20.8, y: 4.8), controlPoint2: CGPoint(x: 19.3, y: 2))
            shape3.addLine(to: CGPoint(x: 15.5, y: 1.6))
            shape3.addCurve(to: CGPoint(x: 19, y: 8), controlPoint1: CGPoint(x: 17.5, y: 3), controlPoint2: CGPoint(x: 18.8, y: 5.3))
            shape3.addLine(to: CGPoint(x: 19, y: 8))
            shape3.close()
            shape3.move(to: CGPoint(x: 17, y: 8.5))
            shape3.addCurve(to: CGPoint(x: 12, y: 2.2), controlPoint1: CGPoint(x: 17, y: 5.4), controlPoint2: CGPoint(x: 14.9, y: 2.9))
            shape3.addLine(to: CGPoint(x: 12, y: 1.5))
            shape3.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.7), controlPoint2: CGPoint(x: 11.3, y: 0))
            shape3.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 9.7, y: 0), controlPoint2: CGPoint(x: 9, y: 0.7))
            shape3.addLine(to: CGPoint(x: 9, y: 2.2))
            shape3.addCurve(to: CGPoint(x: 4, y: 8.5), controlPoint1: CGPoint(x: 6.1, y: 2.9), controlPoint2: CGPoint(x: 4, y: 5.4))
            shape3.addLine(to: CGPoint(x: 4, y: 14))
            shape3.addLine(to: CGPoint(x: 2, y: 16))
            shape3.addLine(to: CGPoint(x: 2, y: 17))
            shape3.addLine(to: CGPoint(x: 19, y: 17))
            shape3.addLine(to: CGPoint(x: 19, y: 16))
            shape3.addLine(to: CGPoint(x: 17, y: 14))
            shape3.addLine(to: CGPoint(x: 17, y: 8.5))
            shape3.addLine(to: CGPoint(x: 17, y: 8.5))
            shape3.close()
            shape3.move(to: CGPoint(x: 10.5, y: 20))
            shape3.addLine(to: CGPoint(x: 10.9, y: 20))
            shape3.addCurve(to: CGPoint(x: 12.3, y: 18.8), controlPoint1: CGPoint(x: 11.6, y: 19.9), controlPoint2: CGPoint(x: 12.1, y: 19.4))
            shape3.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 12.4, y: 18.6), controlPoint2: CGPoint(x: 12.5, y: 18.3))
            shape3.addLine(to: CGPoint(x: 8.5, y: 18))
            shape3.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 8.5, y: 19.1), controlPoint2: CGPoint(x: 9.4, y: 20))
            shape3.addLine(to: CGPoint(x: 10.5, y: 20))
            shape3.close()
            shape3.move(to: CGPoint(x: 10.5, y: 20))
            context.saveGState()
            shape3.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings-power
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 278)
            
            /// Shape
            let shape4 = UIBezierPath()
            shape4.move(to: CGPoint(x: 3, y: 22))
            shape4.addLine(to: CGPoint(x: 5, y: 22))
            shape4.addLine(to: CGPoint(x: 5, y: 20))
            shape4.addLine(to: CGPoint(x: 3, y: 20))
            shape4.addLine(to: CGPoint(x: 3, y: 22))
            shape4.addLine(to: CGPoint(x: 3, y: 22))
            shape4.close()
            shape4.move(to: CGPoint(x: 7, y: 22))
            shape4.addLine(to: CGPoint(x: 9, y: 22))
            shape4.addLine(to: CGPoint(x: 9, y: 20))
            shape4.addLine(to: CGPoint(x: 7, y: 20))
            shape4.addLine(to: CGPoint(x: 7, y: 22))
            shape4.addLine(to: CGPoint(x: 7, y: 22))
            shape4.close()
            shape4.move(to: CGPoint(x: 9, y: 0))
            shape4.addLine(to: CGPoint(x: 7, y: 0))
            shape4.addLine(to: CGPoint(x: 7, y: 10))
            shape4.addLine(to: CGPoint(x: 9, y: 10))
            shape4.addLine(to: CGPoint(x: 9, y: 0))
            shape4.addLine(to: CGPoint(x: 9, y: 0))
            shape4.close()
            shape4.move(to: CGPoint(x: 12.6, y: 2.4))
            shape4.addLine(to: CGPoint(x: 11.2, y: 3.8))
            shape4.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 12.8, y: 4.9), controlPoint2: CGPoint(x: 14, y: 6.8))
            shape4.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 14, y: 12.3), controlPoint2: CGPoint(x: 11.3, y: 15))
            shape4.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 4.7, y: 15), controlPoint2: CGPoint(x: 2, y: 12.3))
            shape4.addCurve(to: CGPoint(x: 4.9, y: 3.9), controlPoint1: CGPoint(x: 2, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 4.9))
            shape4.addLine(to: CGPoint(x: 3.4, y: 2.4))
            shape4.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.4, y: 3.9), controlPoint2: CGPoint(x: 0, y: 6.3))
            shape4.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 0, y: 13.4), controlPoint2: CGPoint(x: 3.6, y: 17))
            shape4.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.4, y: 17), controlPoint2: CGPoint(x: 16, y: 13.4))
            shape4.addCurve(to: CGPoint(x: 12.6, y: 2.4), controlPoint1: CGPoint(x: 16, y: 6.3), controlPoint2: CGPoint(x: 14.6, y: 3.9))
            shape4.addLine(to: CGPoint(x: 12.6, y: 2.4))
            shape4.close()
            shape4.move(to: CGPoint(x: 11, y: 22))
            shape4.addLine(to: CGPoint(x: 13, y: 22))
            shape4.addLine(to: CGPoint(x: 13, y: 20))
            shape4.addLine(to: CGPoint(x: 11, y: 20))
            shape4.addLine(to: CGPoint(x: 11, y: 22))
            shape4.addLine(to: CGPoint(x: 11, y: 22))
            shape4.close()
            shape4.move(to: CGPoint(x: 11, y: 22))
            context.saveGState()
            shape4.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Menu
        // Warning: New symbols are not supported.
        /// settings-power
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 278)
            
            /// Shape
            let shape5 = UIBezierPath()
            shape5.move(to: CGPoint(x: 3, y: 22))
            shape5.addLine(to: CGPoint(x: 5, y: 22))
            shape5.addLine(to: CGPoint(x: 5, y: 20))
            shape5.addLine(to: CGPoint(x: 3, y: 20))
            shape5.addLine(to: CGPoint(x: 3, y: 22))
            shape5.addLine(to: CGPoint(x: 3, y: 22))
            shape5.close()
            shape5.move(to: CGPoint(x: 7, y: 22))
            shape5.addLine(to: CGPoint(x: 9, y: 22))
            shape5.addLine(to: CGPoint(x: 9, y: 20))
            shape5.addLine(to: CGPoint(x: 7, y: 20))
            shape5.addLine(to: CGPoint(x: 7, y: 22))
            shape5.addLine(to: CGPoint(x: 7, y: 22))
            shape5.close()
            shape5.move(to: CGPoint(x: 9, y: 0))
            shape5.addLine(to: CGPoint(x: 7, y: 0))
            shape5.addLine(to: CGPoint(x: 7, y: 10))
            shape5.addLine(to: CGPoint(x: 9, y: 10))
            shape5.addLine(to: CGPoint(x: 9, y: 0))
            shape5.addLine(to: CGPoint(x: 9, y: 0))
            shape5.close()
            shape5.move(to: CGPoint(x: 12.6, y: 2.4))
            shape5.addLine(to: CGPoint(x: 11.2, y: 3.8))
            shape5.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 12.8, y: 4.9), controlPoint2: CGPoint(x: 14, y: 6.8))
            shape5.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 14, y: 12.3), controlPoint2: CGPoint(x: 11.3, y: 15))
            shape5.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 4.7, y: 15), controlPoint2: CGPoint(x: 2, y: 12.3))
            shape5.addCurve(to: CGPoint(x: 4.9, y: 3.9), controlPoint1: CGPoint(x: 2, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 4.9))
            shape5.addLine(to: CGPoint(x: 3.4, y: 2.4))
            shape5.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.4, y: 3.9), controlPoint2: CGPoint(x: 0, y: 6.3))
            shape5.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 0, y: 13.4), controlPoint2: CGPoint(x: 3.6, y: 17))
            shape5.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.4, y: 17), controlPoint2: CGPoint(x: 16, y: 13.4))
            shape5.addCurve(to: CGPoint(x: 12.6, y: 2.4), controlPoint1: CGPoint(x: 16, y: 6.3), controlPoint2: CGPoint(x: 14.6, y: 3.9))
            shape5.addLine(to: CGPoint(x: 12.6, y: 2.4))
            shape5.close()
            shape5.move(to: CGPoint(x: 11, y: 22))
            shape5.addLine(to: CGPoint(x: 13, y: 22))
            shape5.addLine(to: CGPoint(x: 13, y: 20))
            shape5.addLine(to: CGPoint(x: 11, y: 20))
            shape5.addLine(to: CGPoint(x: 11, y: 22))
            shape5.addLine(to: CGPoint(x: 11, y: 22))
            shape5.close()
            shape5.move(to: CGPoint(x: 11, y: 22))
            context.saveGState()
            shape5.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape5.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 213)
            
            /// Shape
            let shape6 = UIBezierPath()
            shape6.move(to: CGPoint(x: 17.14, y: 11))
            shape6.addCurve(to: CGPoint(x: 17.24, y: 10), controlPoint1: CGPoint(x: 17.14, y: 10.7), controlPoint2: CGPoint(x: 17.24, y: 10.4))
            shape6.addCurve(to: CGPoint(x: 17.14, y: 9), controlPoint1: CGPoint(x: 17.24, y: 9.6), controlPoint2: CGPoint(x: 17.24, y: 9.3))
            shape6.addLine(to: CGPoint(x: 19.24, y: 7.3))
            shape6.addCurve(to: CGPoint(x: 19.34, y: 6.7), controlPoint1: CGPoint(x: 19.44, y: 7.1), controlPoint2: CGPoint(x: 19.44, y: 6.9))
            shape6.addLine(to: CGPoint(x: 17.34, y: 3.2))
            shape6.addCurve(to: CGPoint(x: 16.74, y: 3.1), controlPoint1: CGPoint(x: 17.24, y: 3.1), controlPoint2: CGPoint(x: 17.04, y: 3))
            shape6.addLine(to: CGPoint(x: 14.24, y: 4.1))
            shape6.addCurve(to: CGPoint(x: 12.54, y: 3.1), controlPoint1: CGPoint(x: 13.74, y: 3.7), controlPoint2: CGPoint(x: 13.14, y: 3.4))
            shape6.addLine(to: CGPoint(x: 12.14, y: 0.5))
            shape6.addCurve(to: CGPoint(x: 11.74, y: 0), controlPoint1: CGPoint(x: 12.24, y: 0.2), controlPoint2: CGPoint(x: 11.94, y: 0))
            shape6.addLine(to: CGPoint(x: 7.74, y: 0))
            shape6.addCurve(to: CGPoint(x: 7.24, y: 0.4), controlPoint1: CGPoint(x: 7.54, y: 0), controlPoint2: CGPoint(x: 7.24, y: 0.2))
            shape6.addLine(to: CGPoint(x: 6.84, y: 3.1))
            shape6.addCurve(to: CGPoint(x: 5.14, y: 4.1), controlPoint1: CGPoint(x: 6.24, y: 3.3), controlPoint2: CGPoint(x: 5.74, y: 3.7))
            shape6.addLine(to: CGPoint(x: 2.74, y: 3.1))
            shape6.addCurve(to: CGPoint(x: 2.04, y: 3.3), controlPoint1: CGPoint(x: 2.44, y: 3), controlPoint2: CGPoint(x: 2.24, y: 3.1))
            shape6.addLine(to: CGPoint(x: 0.04, y: 6.8))
            shape6.addCurve(to: CGPoint(x: 0.24, y: 7.4), controlPoint1: CGPoint(x: -0.06, y: 6.9), controlPoint2: CGPoint(x: 0.04, y: 7.2))
            shape6.addLine(to: CGPoint(x: 2.34, y: 9))
            shape6.addCurve(to: CGPoint(x: 2.24, y: 10), controlPoint1: CGPoint(x: 2.34, y: 9.3), controlPoint2: CGPoint(x: 2.24, y: 9.6))
            shape6.addCurve(to: CGPoint(x: 2.34, y: 11), controlPoint1: CGPoint(x: 2.24, y: 10.4), controlPoint2: CGPoint(x: 2.24, y: 10.7))
            shape6.addLine(to: CGPoint(x: 0.24, y: 12.7))
            shape6.addCurve(to: CGPoint(x: 0.14, y: 13.3), controlPoint1: CGPoint(x: 0.04, y: 12.9), controlPoint2: CGPoint(x: 0.04, y: 13.1))
            shape6.addLine(to: CGPoint(x: 2.14, y: 16.8))
            shape6.addCurve(to: CGPoint(x: 2.74, y: 16.9), controlPoint1: CGPoint(x: 2.24, y: 16.9), controlPoint2: CGPoint(x: 2.44, y: 17))
            shape6.addLine(to: CGPoint(x: 5.24, y: 15.9))
            shape6.addCurve(to: CGPoint(x: 6.94, y: 16.9), controlPoint1: CGPoint(x: 5.74, y: 16.3), controlPoint2: CGPoint(x: 6.34, y: 16.6))
            shape6.addLine(to: CGPoint(x: 7.34, y: 19.5))
            shape6.addCurve(to: CGPoint(x: 7.84, y: 19.9), controlPoint1: CGPoint(x: 7.34, y: 19.7), controlPoint2: CGPoint(x: 7.54, y: 19.9))
            shape6.addLine(to: CGPoint(x: 11.84, y: 19.9))
            shape6.addCurve(to: CGPoint(x: 12.34, y: 19.5), controlPoint1: CGPoint(x: 12.04, y: 19.9), controlPoint2: CGPoint(x: 12.34, y: 19.7))
            shape6.addLine(to: CGPoint(x: 12.74, y: 16.9))
            shape6.addCurve(to: CGPoint(x: 14.44, y: 15.9), controlPoint1: CGPoint(x: 13.34, y: 16.6), controlPoint2: CGPoint(x: 13.94, y: 16.3))
            shape6.addLine(to: CGPoint(x: 16.94, y: 16.9))
            shape6.addCurve(to: CGPoint(x: 17.54, y: 16.7), controlPoint1: CGPoint(x: 17.14, y: 17), controlPoint2: CGPoint(x: 17.44, y: 16.9))
            shape6.addLine(to: CGPoint(x: 19.54, y: 13.2))
            shape6.addCurve(to: CGPoint(x: 19.44, y: 12.6), controlPoint1: CGPoint(x: 19.64, y: 13), controlPoint2: CGPoint(x: 19.64, y: 12.7))
            shape6.addLine(to: CGPoint(x: 17.14, y: 11))
            shape6.addLine(to: CGPoint(x: 17.14, y: 11))
            shape6.close()
            shape6.move(to: CGPoint(x: 9.74, y: 13.5))
            shape6.addCurve(to: CGPoint(x: 6.24, y: 10), controlPoint1: CGPoint(x: 7.84, y: 13.5), controlPoint2: CGPoint(x: 6.24, y: 11.9))
            shape6.addCurve(to: CGPoint(x: 9.74, y: 6.5), controlPoint1: CGPoint(x: 6.24, y: 8.1), controlPoint2: CGPoint(x: 7.84, y: 6.5))
            shape6.addCurve(to: CGPoint(x: 13.24, y: 10), controlPoint1: CGPoint(x: 11.64, y: 6.5), controlPoint2: CGPoint(x: 13.24, y: 8.1))
            shape6.addCurve(to: CGPoint(x: 9.74, y: 13.5), controlPoint1: CGPoint(x: 13.24, y: 11.9), controlPoint2: CGPoint(x: 11.64, y: 13.5))
            shape6.addLine(to: CGPoint(x: 9.74, y: 13.5))
            shape6.close()
            shape6.move(to: CGPoint(x: 9.74, y: 13.5))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            shape6.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape6.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// event 2
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 149)
            
            /// Shape
            let shape7 = UIBezierPath()
            shape7.move(to: CGPoint(x: 14, y: 11))
            shape7.addLine(to: CGPoint(x: 9, y: 11))
            shape7.addLine(to: CGPoint(x: 9, y: 16))
            shape7.addLine(to: CGPoint(x: 14, y: 16))
            shape7.addLine(to: CGPoint(x: 14, y: 11))
            shape7.addLine(to: CGPoint(x: 14, y: 11))
            shape7.close()
            shape7.move(to: CGPoint(x: 13, y: 0))
            shape7.addLine(to: CGPoint(x: 13, y: 2))
            shape7.addLine(to: CGPoint(x: 5, y: 2))
            shape7.addLine(to: CGPoint(x: 5, y: 0))
            shape7.addLine(to: CGPoint(x: 3, y: 0))
            shape7.addLine(to: CGPoint(x: 3, y: 2))
            shape7.addLine(to: CGPoint(x: 2, y: 2))
            shape7.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
            shape7.addLine(to: CGPoint(x: 0, y: 18))
            shape7.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape7.addLine(to: CGPoint(x: 16, y: 20))
            shape7.addCurve(to: CGPoint(x: 18, y: 18), controlPoint1: CGPoint(x: 17.1, y: 20), controlPoint2: CGPoint(x: 18, y: 19.1))
            shape7.addLine(to: CGPoint(x: 18, y: 4))
            shape7.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
            shape7.addLine(to: CGPoint(x: 15, y: 2))
            shape7.addLine(to: CGPoint(x: 15, y: 0))
            shape7.addLine(to: CGPoint(x: 13, y: 0))
            shape7.addLine(to: CGPoint(x: 13, y: 0))
            shape7.close()
            shape7.move(to: CGPoint(x: 16, y: 18))
            shape7.addLine(to: CGPoint(x: 2, y: 18))
            shape7.addLine(to: CGPoint(x: 2, y: 7))
            shape7.addLine(to: CGPoint(x: 16, y: 7))
            shape7.addLine(to: CGPoint(x: 16, y: 18))
            shape7.addLine(to: CGPoint(x: 16, y: 18))
            shape7.close()
            shape7.move(to: CGPoint(x: 16, y: 18))
            context.saveGState()
            shape7.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape7.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// notifications-on
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 90)
            
            /// Shape
            let shape8 = UIBezierPath()
            shape8.move(to: CGPoint(x: 5.6, y: 1.6))
            shape8.addLine(to: CGPoint(x: 4.2, y: 0.2))
            shape8.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.8, y: 2), controlPoint2: CGPoint(x: 0.2, y: 4.8))
            shape8.addLine(to: CGPoint(x: 2, y: 8))
            shape8.addCurve(to: CGPoint(x: 5.6, y: 1.6), controlPoint1: CGPoint(x: 2.2, y: 5.3), controlPoint2: CGPoint(x: 3.5, y: 3))
            shape8.addLine(to: CGPoint(x: 5.6, y: 1.6))
            shape8.close()
            shape8.move(to: CGPoint(x: 19, y: 8))
            shape8.addLine(to: CGPoint(x: 21, y: 8))
            shape8.addCurve(to: CGPoint(x: 16.9, y: 0.2), controlPoint1: CGPoint(x: 20.8, y: 4.8), controlPoint2: CGPoint(x: 19.3, y: 2))
            shape8.addLine(to: CGPoint(x: 15.5, y: 1.6))
            shape8.addCurve(to: CGPoint(x: 19, y: 8), controlPoint1: CGPoint(x: 17.5, y: 3), controlPoint2: CGPoint(x: 18.8, y: 5.3))
            shape8.addLine(to: CGPoint(x: 19, y: 8))
            shape8.close()
            shape8.move(to: CGPoint(x: 17, y: 8.5))
            shape8.addCurve(to: CGPoint(x: 12, y: 2.2), controlPoint1: CGPoint(x: 17, y: 5.4), controlPoint2: CGPoint(x: 14.9, y: 2.9))
            shape8.addLine(to: CGPoint(x: 12, y: 1.5))
            shape8.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.7), controlPoint2: CGPoint(x: 11.3, y: 0))
            shape8.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 9.7, y: 0), controlPoint2: CGPoint(x: 9, y: 0.7))
            shape8.addLine(to: CGPoint(x: 9, y: 2.2))
            shape8.addCurve(to: CGPoint(x: 4, y: 8.5), controlPoint1: CGPoint(x: 6.1, y: 2.9), controlPoint2: CGPoint(x: 4, y: 5.4))
            shape8.addLine(to: CGPoint(x: 4, y: 14))
            shape8.addLine(to: CGPoint(x: 2, y: 16))
            shape8.addLine(to: CGPoint(x: 2, y: 17))
            shape8.addLine(to: CGPoint(x: 19, y: 17))
            shape8.addLine(to: CGPoint(x: 19, y: 16))
            shape8.addLine(to: CGPoint(x: 17, y: 14))
            shape8.addLine(to: CGPoint(x: 17, y: 8.5))
            shape8.addLine(to: CGPoint(x: 17, y: 8.5))
            shape8.close()
            shape8.move(to: CGPoint(x: 10.5, y: 20))
            shape8.addLine(to: CGPoint(x: 10.9, y: 20))
            shape8.addCurve(to: CGPoint(x: 12.3, y: 18.8), controlPoint1: CGPoint(x: 11.6, y: 19.9), controlPoint2: CGPoint(x: 12.1, y: 19.4))
            shape8.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 12.4, y: 18.6), controlPoint2: CGPoint(x: 12.5, y: 18.3))
            shape8.addLine(to: CGPoint(x: 8.5, y: 18))
            shape8.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 8.5, y: 19.1), controlPoint2: CGPoint(x: 9.4, y: 20))
            shape8.addLine(to: CGPoint(x: 10.5, y: 20))
            shape8.close()
            shape8.move(to: CGPoint(x: 10.5, y: 20))
            context.saveGState()
            shape8.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape8.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawMessageboardKeyboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(hue: 1, saturation: 0.001, brightness: 0.95, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 375, y: 0))
        rectangle.addLine(to: CGPoint(x: 375, y: 81))
        rectangle.addLine(to: CGPoint(x: 0, y: 81))
        context.saveGState()
        rectangle.usesEvenOddFillRule = true
        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Messageboard
            let messageboard = NSMutableAttributedString(string: "Messageboard\n")
            messageboard.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: messageboard.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                messageboard.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageboard.length))
            }
            context.saveGState()
            messageboard.draw(at: CGPoint(x: 120.5, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 167)
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 162), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.addRect(rectangle3.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle3.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// It wonât be a bigger
            let itWontBeABigger = NSMutableAttributedString(string: "It wonât be a bigger problem to find one game lover in yor neighbor. Since the introduction of Virtual Game, it has achieving great heights so far as its popularity and technological .")
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: 56))
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 12)!, range: NSRange(location: 56, length: 1))
            itWontBeABigger.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 57, length: 127))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                itWontBeABigger.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: itWontBeABigger.length))
            }
            context.saveGState()
            itWontBeABigger.draw(in: CGRect(x: 16, y: 59, width: 321, height: 97))
            context.restoreGState()
            
            /// Vernon Cox
            let vernonCox = NSMutableAttributedString(string: "Vernon Cox")
            vernonCox.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: vernonCox.length))
            context.saveGState()
            vernonCox.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 04 Jun 2017
            let _04Jun2017 = NSMutableAttributedString(string: "04 Jun 2017")
            _04Jun2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _04Jun2017.length))
            context.saveGState()
            _04Jun2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            context.saveGState()
            context.translateBy(x: 391.32, y: 251.66)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 354)
            
            /// Rectangle 3
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 158), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle6.cgPath)
            context.addRect(rectangle6.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle6.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle6.fill()
            context.restoreGState()
            
            /// The most important t
            let theMostImportantT = NSMutableAttributedString(string: "The most important thing to keep in mind is that a turkey takes a long while to cook through to the boneâ¦and keeps on cooking once you remove it from the oven. Make to bake, braise or roast the bird at a high enough .")
            theMostImportantT.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: theMostImportantT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                theMostImportantT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: theMostImportantT.length))
            }
            context.saveGState()
            theMostImportantT.draw(in: CGRect(x: 16, y: 54, width: 321, height: 285))
            context.restoreGState()
            
            /// Mason Simmons
            let masonSimmons = NSMutableAttributedString(string: "Mason Simmons")
            masonSimmons.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: masonSimmons.length))
            context.saveGState()
            masonSimmons.draw(in: CGRect(x: 62, y: 20, width: 98, height: 17))
            context.restoreGState()
            
            /// 21 Aug 2017
            let _21Aug2017 = NSMutableAttributedString(string: "21 Aug 2017")
            _21Aug2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _21Aug2017.length))
            context.saveGState()
            _21Aug2017.draw(in: CGRect(x: 63, y: 36, width: 46, height: 11))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 29), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 16)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Post
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 536)
            
            /// Rectangle 3
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 195), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle8.cgPath)
            context.addRect(rectangle8.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle8.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle8.fill()
            context.restoreGState()
            
            /// î«®
            let layer = NSMutableAttributedString(string: "î«®")
            layer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 256, y: 177))
            context.restoreGState()
            
            /// White Gold began gai
            let whiteGoldBeganGai = NSMutableAttributedString(string: "White Gold began gaining popularity in the early 1900âs as an alternative to platinum. Platinum was steadily becoming more fashionable, but because of its rarity many could not afford it. Then, during World War II the government put a ban on the use of Platinum for any non-military functions and the demand for White Gold skyrocketed.\n\nThe most common alloys added to gold to produce white gold are nickel, palladium and silver. Most white gold jewelry is also given an electroplated rhodium coating to intensify brightness. Throughout this process, white gold retains many of the benefits of gold. It wonât tarnish and due to the metals added, it is stronger than its yellow counterpart.\n\nRecently, palladium has replaced nickel as the common alloy in white gold. It seems that a small percent of the population-approximately 12-15%-has an allergic reaction to nickel causing skin irritation and rashes. It is now required by law that jewelry pieces containing nickel be labeled ânickel-containing.â\n\nSources:\n\nhttp://en.wikipedia.org/wiki/White_gold\n\nhttp://www.gold.org/jewellery/technology/colours/white.html\n\nhttp://www.govmint.com/knowledgebase/PreciousMetals.aspx")
            whiteGoldBeganGai.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: whiteGoldBeganGai.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                whiteGoldBeganGai.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: whiteGoldBeganGai.length))
            }
            context.saveGState()
            whiteGoldBeganGai.draw(in: CGRect(x: 16, y: 59, width: 321, height: 70))
            context.restoreGState()
            
            /// Della Hicks
            let dellaHicks = NSMutableAttributedString(string: "Della Hicks")
            dellaHicks.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 13)!, range: NSRange(location: 0, length: dellaHicks.length))
            context.saveGState()
            dellaHicks.draw(at: CGPoint(x: 62, y: 23))
            context.restoreGState()
            
            /// 29 Jul 2017
            let _29Jul2017 = NSMutableAttributedString(string: "29 Jul 2017")
            _29Jul2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 8)!, range: NSRange(location: 0, length: _29Jul2017.length))
            context.saveGState()
            _29Jul2017.draw(at: CGPoint(x: 63, y: 40))
            context.restoreGState()
            
            /// î¨
            let layer2 = NSMutableAttributedString(string: "î¨")
            layer2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer2.length))
            context.saveGState()
            layer2.draw(at: CGPoint(x: 26, y: 176))
            context.restoreGState()
            
            /// Like
            let like = NSMutableAttributedString(string: "Like")
            like.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: like.length))
            context.saveGState()
            like.draw(at: CGPoint(x: 41, y: 175))
            context.restoreGState()
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 1.5, y: 0.5))
            line2.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 228, y: 168)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Comment
            let comment = NSMutableAttributedString(string: "Comment")
            comment.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: comment.length))
            context.saveGState()
            comment.draw(at: CGPoint(x: 140, y: 175))
            context.restoreGState()
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 1.5, y: 0.5))
            line3.addLine(to: CGPoint(x: 1.5, y: 26.5))
            context.saveGState()
            context.translateBy(x: 97, y: 168)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.937, alpha: 1).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// î¦§
            let layer3 = NSMutableAttributedString(string: "î¦§")
            layer3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: layer3.length))
            context.saveGState()
            layer3.draw(at: CGPoint(x: 126, y: 178))
            context.restoreGState()
            
            /// Share
            let share = NSMutableAttributedString(string: "Share")
            share.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 11)!, range: NSRange(location: 0, length: share.length))
            context.saveGState()
            share.draw(at: CGPoint(x: 273, y: 175))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 32), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 0.5, y: 1.5))
            line4.addLine(to: CGPoint(x: 336.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 167)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 0.17).setStroke()
            line4.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Input
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 94)
            
            /// Rectangle 3
            let rectangle12 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 337, height: 41), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle12.cgPath)
            context.addRect(rectangle12.bounds.insetBy(dx: -9, dy: -9))
            context.clip(using: .evenOdd)
            context.translateBy(x: -347, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 347, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 9 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            rectangle12.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle12.fill()
            context.restoreGState()
            
            /// Type Your owne messa
            let typeYourOwneMessa = NSMutableAttributedString(string: "Type Your owne message")
            typeYourOwneMessa.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 12)!, range: NSRange(location: 0, length: typeYourOwneMessa.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                typeYourOwneMessa.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: typeYourOwneMessa.length))
            }
            // Warning: Text fill is not supported, use text color.
            context.saveGState()
            typeYourOwneMessa.draw(in: CGRect(x: 102, y: 8, width: 246, height: 25))
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 32, height: 19), cornerRadius: 1)
            context.saveGState()
            context.translateBy(x: 16, y: 11)
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Keyboards/Keyboard + Suggestions
        // Warning: New symbols are not supported.
        /// Bar
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 361)
            
            /// Blur
            let blur = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 46))
            context.saveGState()
            // Warning: Blur effects are not supported.
            context.saveGState()
            context.beginPath()
            context.addPath(blur.cgPath)
            context.addRect(blur.bounds.insetBy(dx: 0, dy: -0.5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -376, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.13).cgColor)
            }
            UIColor.black.setFill()
            blur.fill()
            context.restoreGState()
            UIColor.white.setFill()
            blur.fill()
            context.restoreGState()
            
            /// Tape a messageâ¦
            let tapeAMessage = NSMutableAttributedString(string: "Tape a messageâ¦")
            tapeAMessage.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: tapeAMessage.length))
            tapeAMessage.addAttribute(.kern, value: -0.15, range: NSRange(location: 0, length: tapeAMessage.length))
            context.saveGState()
            tapeAMessage.draw(at: CGPoint(x: 46, y: 15))
            context.restoreGState()
            
            /// attach
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 8)
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 32, y: 0))
                clip2.addLine(to: CGPoint(x: 32, y: 31))
                clip2.addLine(to: CGPoint(x: 0, y: 31))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                clip2.move(to: CGPoint.zero)
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 4.95, y: 19.71))
                fill1.addCurve(to: CGPoint(x: 1.45, y: 18.26), controlPoint1: CGPoint(x: 3.69, y: 19.71), controlPoint2: CGPoint(x: 2.42, y: 19.23))
                fill1.addCurve(to: CGPoint(x: 1.45, y: 11.25), controlPoint1: CGPoint(x: -0.48, y: 16.33), controlPoint2: CGPoint(x: -0.48, y: 13.18))
                fill1.addLine(to: CGPoint(x: 11.64, y: 1.06))
                fill1.addCurve(to: CGPoint(x: 16.76, y: 1.06), controlPoint1: CGPoint(x: 13.05, y: -0.35), controlPoint2: CGPoint(x: 15.35, y: -0.35))
                fill1.addCurve(to: CGPoint(x: 17.83, y: 3.63), controlPoint1: CGPoint(x: 17.45, y: 1.75), controlPoint2: CGPoint(x: 17.83, y: 2.66))
                fill1.addCurve(to: CGPoint(x: 16.77, y: 6.19), controlPoint1: CGPoint(x: 17.83, y: 4.6), controlPoint2: CGPoint(x: 17.45, y: 5.51))
                fill1.addLine(to: CGPoint(x: 7.37, y: 15.59))
                fill1.addLine(to: CGPoint(x: 7.24, y: 15.7))
                fill1.addCurve(to: CGPoint(x: 4.36, y: 15.69), controlPoint1: CGPoint(x: 6.45, y: 16.49), controlPoint2: CGPoint(x: 5.16, y: 16.49))
                fill1.addLine(to: CGPoint(x: 4.34, y: 15.67))
                fill1.addCurve(to: CGPoint(x: 3.75, y: 14.23), controlPoint1: CGPoint(x: 3.96, y: 15.29), controlPoint2: CGPoint(x: 3.75, y: 14.78))
                fill1.addCurve(to: CGPoint(x: 4.35, y: 12.79), controlPoint1: CGPoint(x: 3.75, y: 13.69), controlPoint2: CGPoint(x: 3.96, y: 13.17))
                fill1.addLine(to: CGPoint(x: 9.23, y: 7.9))
                fill1.addCurve(to: CGPoint(x: 9.92, y: 7.9), controlPoint1: CGPoint(x: 9.42, y: 7.71), controlPoint2: CGPoint(x: 9.73, y: 7.71))
                fill1.addCurve(to: CGPoint(x: 9.92, y: 8.59), controlPoint1: CGPoint(x: 10.11, y: 8.09), controlPoint2: CGPoint(x: 10.11, y: 8.4))
                fill1.addLine(to: CGPoint(x: 5.04, y: 13.47))
                fill1.addCurve(to: CGPoint(x: 4.72, y: 14.23), controlPoint1: CGPoint(x: 4.83, y: 13.68), controlPoint2: CGPoint(x: 4.72, y: 13.95))
                fill1.addCurve(to: CGPoint(x: 5.04, y: 14.99), controlPoint1: CGPoint(x: 4.72, y: 14.52), controlPoint2: CGPoint(x: 4.83, y: 14.79))
                fill1.addLine(to: CGPoint(x: 5.06, y: 15.01))
                fill1.addCurve(to: CGPoint(x: 6.56, y: 15), controlPoint1: CGPoint(x: 5.47, y: 15.42), controlPoint2: CGPoint(x: 6.15, y: 15.42))
                fill1.addLine(to: CGPoint(x: 16.08, y: 5.5))
                fill1.addCurve(to: CGPoint(x: 16.86, y: 3.63), controlPoint1: CGPoint(x: 16.58, y: 5), controlPoint2: CGPoint(x: 16.86, y: 4.34))
                fill1.addCurve(to: CGPoint(x: 16.08, y: 1.76), controlPoint1: CGPoint(x: 16.86, y: 2.92), controlPoint2: CGPoint(x: 16.58, y: 2.26))
                fill1.addCurve(to: CGPoint(x: 12.33, y: 1.75), controlPoint1: CGPoint(x: 15.04, y: 0.72), controlPoint2: CGPoint(x: 13.36, y: 0.72))
                fill1.addLine(to: CGPoint(x: 2.14, y: 11.94))
                fill1.addCurve(to: CGPoint(x: 2.14, y: 17.57), controlPoint1: CGPoint(x: 0.59, y: 13.49), controlPoint2: CGPoint(x: 0.59, y: 16.02))
                fill1.addCurve(to: CGPoint(x: 7.77, y: 17.57), controlPoint1: CGPoint(x: 3.69, y: 19.12), controlPoint2: CGPoint(x: 6.22, y: 19.12))
                fill1.addLine(to: CGPoint(x: 17.96, y: 7.38))
                fill1.addCurve(to: CGPoint(x: 18.65, y: 7.38), controlPoint1: CGPoint(x: 18.15, y: 7.19), controlPoint2: CGPoint(x: 18.46, y: 7.19))
                fill1.addCurve(to: CGPoint(x: 18.65, y: 8.07), controlPoint1: CGPoint(x: 18.84, y: 7.57), controlPoint2: CGPoint(x: 18.84, y: 7.88))
                fill1.addLine(to: CGPoint(x: 8.46, y: 18.26))
                fill1.addCurve(to: CGPoint(x: 4.95, y: 19.71), controlPoint1: CGPoint(x: 7.49, y: 19.23), controlPoint2: CGPoint(x: 6.22, y: 19.71))
                fill1.addLine(to: CGPoint(x: 4.95, y: 19.71))
                fill1.close()
                fill1.move(to: CGPoint(x: 4.95, y: 19.71))
                context.saveGState()
                context.translateBy(x: 6, y: 5.02)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.588, saturation: 0.221, brightness: 0.593, alpha: 1).setFill()
                fill1.fill()
                fill1.lineWidth = 0.2
                UIColor(white: 0.745, alpha: 1).setStroke()
                fill1.stroke()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 343, y: 12)
                
                /// Siri Mic
                let siriMic = UIBezierPath()
                siriMic.move(to: CGPoint(x: 5.47, y: 17.37))
                siriMic.addCurve(to: CGPoint(x: 0, y: 11.14), controlPoint1: CGPoint(x: 2.4, y: 17.09), controlPoint2: CGPoint(x: 0, y: 14.41))
                siriMic.addLine(to: CGPoint(x: 0, y: 7.86))
                siriMic.addLine(to: CGPoint(x: 1.24, y: 7.86))
                siriMic.addLine(to: CGPoint(x: 1.24, y: 11.49))
                siriMic.addCurve(to: CGPoint(x: 6.07, y: 16.32), controlPoint1: CGPoint(x: 1.24, y: 14.16), controlPoint2: CGPoint(x: 3.4, y: 16.32))
                siriMic.addCurve(to: CGPoint(x: 10.91, y: 11.49), controlPoint1: CGPoint(x: 8.74, y: 16.32), controlPoint2: CGPoint(x: 10.91, y: 14.16))
                siriMic.addLine(to: CGPoint(x: 10.91, y: 7.86))
                siriMic.addLine(to: CGPoint(x: 12, y: 7.86))
                siriMic.addLine(to: CGPoint(x: 12, y: 11.14))
                siriMic.addCurve(to: CGPoint(x: 6.68, y: 17.35), controlPoint1: CGPoint(x: 12, y: 14.35), controlPoint2: CGPoint(x: 9.67, y: 17))
                siriMic.addLine(to: CGPoint(x: 6.68, y: 20.56))
                siriMic.addLine(to: CGPoint(x: 10.27, y: 20.56))
                siriMic.addLine(to: CGPoint(x: 10.27, y: 21.76))
                siriMic.addLine(to: CGPoint(x: 1.88, y: 21.76))
                siriMic.addLine(to: CGPoint(x: 1.88, y: 20.56))
                siriMic.addLine(to: CGPoint(x: 5.47, y: 20.56))
                siriMic.addLine(to: CGPoint(x: 5.47, y: 17.37))
                siriMic.close()
                siriMic.move(to: CGPoint(x: 9.7, y: 11.27))
                siriMic.addCurve(to: CGPoint(x: 6.08, y: 15.02), controlPoint1: CGPoint(x: 9.7, y: 13.34), controlPoint2: CGPoint(x: 8.08, y: 15.02))
                siriMic.addCurve(to: CGPoint(x: 2.45, y: 11.27), controlPoint1: CGPoint(x: 4.07, y: 15.02), controlPoint2: CGPoint(x: 2.45, y: 13.34))
                siriMic.addLine(to: CGPoint(x: 2.45, y: 3.76))
                siriMic.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 2.45, y: 1.68), controlPoint2: CGPoint(x: 4.07, y: 0))
                siriMic.addCurve(to: CGPoint(x: 9.7, y: 3.76), controlPoint1: CGPoint(x: 8.08, y: 0), controlPoint2: CGPoint(x: 9.7, y: 1.68))
                siriMic.addLine(to: CGPoint(x: 9.7, y: 11.27))
                siriMic.close()
                siriMic.move(to: CGPoint(x: 9.7, y: 11.27))
                context.saveGState()
                siriMic.usesEvenOddFillRule = true
                UIColor(hue: 0.588, saturation: 0.221, brightness: 0.593, alpha: 1).setFill()
                siriMic.fill()
                context.restoreGState()
                
                /// Shape
                let shape5 = UIBezierPath()
                shape5.move(to: CGPoint(x: 5.07, y: 9.52))
                shape5.addCurve(to: CGPoint(x: 2.54, y: 12.69), controlPoint1: CGPoint(x: 5.07, y: 11.27), controlPoint2: CGPoint(x: 3.94, y: 12.69))
                shape5.addLine(to: CGPoint(x: 2.54, y: 12.69))
                shape5.addCurve(to: CGPoint(x: 0, y: 9.52), controlPoint1: CGPoint(x: 1.14, y: 12.69), controlPoint2: CGPoint(x: 0, y: 11.27))
                shape5.addLine(to: CGPoint(x: 0, y: 3.17))
                shape5.addCurve(to: CGPoint(x: 2.54, y: 0), controlPoint1: CGPoint(x: 0, y: 1.42), controlPoint2: CGPoint(x: 1.14, y: 0))
                shape5.addLine(to: CGPoint(x: 2.54, y: 0))
                shape5.addCurve(to: CGPoint(x: 5.07, y: 3.17), controlPoint1: CGPoint(x: 3.94, y: 0), controlPoint2: CGPoint(x: 5.07, y: 1.42))
                shape5.addLine(to: CGPoint(x: 5.07, y: 9.52))
                shape5.addLine(to: CGPoint(x: 5.07, y: 9.52))
                shape5.close()
                shape5.move(to: CGPoint(x: 5.07, y: 9.52))
                context.saveGState()
                context.translateBy(x: 3.54, y: 1.09)
                shape5.usesEvenOddFillRule = true
                UIColor.white.setFill()
                shape5.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Stickers
            do {
                context.saveGState()
                context.translateBy(x: 309, y: 14)
                
                /// Path
                let path20 = UIBezierPath()
                path20.move(to: CGPoint.zero)
                path20.addCurve(to: CGPoint(x: 4.39, y: 2.64), controlPoint1: CGPoint.zero, controlPoint2: CGPoint(x: 1.32, y: 2.64))
                path20.addCurve(to: CGPoint(x: 8.63, y: 0.02), controlPoint1: CGPoint(x: 7.46, y: 2.63), controlPoint2: CGPoint(x: 8.63, y: 0.02))
                context.saveGState()
                context.translateBy(x: 4.64, y: 11.25)
                path20.lineCapStyle = .round
                path20.lineWidth = 1
                UIColor(hue: 0.588, saturation: 0.221, brightness: 0.593, alpha: 1).setStroke()
                path20.stroke()
                context.restoreGState()
                
                /// Path
                let path22 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 1.82, height: 1.82))
                context.saveGState()
                context.translateBy(x: 10.73, y: 5.79)
                UIColor(white: 0.745, alpha: 1).setFill()
                path22.fill()
                path22.lineWidth = 0.5
                UIColor(hue: 0.588, saturation: 0.221, brightness: 0.593, alpha: 1).setStroke()
                path22.stroke()
                context.restoreGState()
                
                /// Path
                let path24 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 1.82, height: 1.82))
                context.saveGState()
                context.translateBy(x: 5.27, y: 5.79)
                UIColor(white: 0.745, alpha: 1).setFill()
                path24.fill()
                path24.lineWidth = 0.5
                UIColor(hue: 0.588, saturation: 0.221, brightness: 0.593, alpha: 1).setStroke()
                path24.stroke()
                context.restoreGState()
                
                /// Oval 203
                let oval203 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 18, height: 18))
                context.saveGState()
                oval203.lineWidth = 1
                UIColor(hue: 0.588, saturation: 0.221, brightness: 0.593, alpha: 1).setStroke()
                oval203.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawAgenda(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bg
        // Warning: New symbols are not supported.
        /// Menu
        do {
            context.saveGState()
            context.translateBy(x: -1, y: 0)
            
            /// Container
            let container = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 299, height: 667))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(container.cgPath)
            context.addRect(container.bounds.insetBy(dx: -8, dy: -8))
            context.clip(using: .evenOdd)
            context.translateBy(x: -308, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 308, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.43).cgColor)
            }
            UIColor.black.setFill()
            container.fill()
            context.restoreGState()
            UIColor.white.setFill()
            container.fill()
            context.restoreGState()
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 88)
                
                /// Line
                let line = UIBezierPath()
                line.move(to: CGPoint(x: 0.45, y: 1.84))
                line.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 39.99)
                line.lineCapStyle = .square
                line.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line.stroke()
                context.restoreGState()
                
                /// Messageboard
                let messageboard = NSMutableAttributedString(string: "Messageboard")
                messageboard.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: messageboard.length))
                context.saveGState()
                messageboard.draw(in: CGRect(x: 84.6, y: 0, width: 102.4, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 36)
                
                /// Line
                let line2 = UIBezierPath()
                line2.move(to: CGPoint(x: 0.45, y: 1.84))
                line2.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 31.99)
                line2.lineCapStyle = .square
                line2.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line2.stroke()
                context.restoreGState()
                
                /// Thomas de Lange
                let thomasDeLange = NSMutableAttributedString(string: "Thomas de Lange")
                thomasDeLange.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: thomasDeLange.length))
                context.saveGState()
                thomasDeLange.draw(in: CGRect(x: 84.6, y: 0, width: 124.02, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 152)
                
                /// Line
                let line3 = UIBezierPath()
                line3.move(to: CGPoint(x: 0.45, y: 1.84))
                line3.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 37.22)
                line3.lineCapStyle = .square
                line3.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line3.stroke()
                context.restoreGState()
                
                /// Agenda
                let agenda2 = NSMutableAttributedString(string: "Agenda")
                agenda2.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: agenda2.length))
                context.saveGState()
                agenda2.draw(in: CGRect(x: 84.6, y: 0, width: 52.98, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 217)
                
                /// Line
                let line4 = UIBezierPath()
                line4.move(to: CGPoint(x: 0.45, y: 1.84))
                line4.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 38.99)
                line4.lineCapStyle = .square
                line4.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line4.stroke()
                context.restoreGState()
                
                /// Instellingen
                let instellingen = NSMutableAttributedString(string: "Instellingen")
                instellingen.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: instellingen.length))
                context.saveGState()
                instellingen.draw(in: CGRect(x: 86.01, y: 0, width: 71.83, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 289)
                
                /// Line
                let line5 = UIBezierPath()
                line5.move(to: CGPoint(x: 0.45, y: 1.84))
                line5.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 36.99)
                line5.lineCapStyle = .square
                line5.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line5.stroke()
                context.restoreGState()
                
                /// Loguit
                let loguit = NSMutableAttributedString(string: "Loguit")
                loguit.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: loguit.length))
                context.saveGState()
                loguit.draw(in: CGRect(x: 86.53, y: 0, width: 59.61, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 626)
            
            /// Rectangle 5
            let rectangle5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 133), cornerRadius: 6)
            context.saveGState()
            UIColor.white.setFill()
            rectangle5.fill()
            context.restoreGState()
            
            /// Eind Feest
            let eindFeest = NSMutableAttributedString(string: "Eind Feest")
            eindFeest.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: eindFeest.length))
            eindFeest.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: eindFeest.length))
            context.saveGState()
            eindFeest.draw(in: CGRect(x: 10, y: 17, width: 154, height: 20))
            context.restoreGState()
            
            /// Seisjes berg Huizen
            let seisjesBergHuizen = NSMutableAttributedString(string: "Seisjes berg Huizen")
            seisjesBergHuizen.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: seisjesBergHuizen.length))
            seisjesBergHuizen.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: seisjesBergHuizen.length))
            context.saveGState()
            seisjesBergHuizen.draw(in: CGRect(x: 58, y: 98, width: 200, height: 20))
            context.restoreGState()
            
            /// Zondag 18:00 Locatie
            let zondag1800Locatie = NSMutableAttributedString(string: "Zondag\n18:00\nLocatie:")
            zondag1800Locatie.addAttribute(.font, value: UIFont(name: "SourceSansPro-Regular", size: 12)!, range: NSRange(location: 0, length: zondag1800Locatie.length))
            zondag1800Locatie.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: zondag1800Locatie.length))
            context.saveGState()
            context.setAlpha(0.8)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                zondag1800Locatie.draw(in: CGRect(x: 10, y: 63, width: 58, height: 50))
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Deelnemers: 26
            let deelnemers26 = NSMutableAttributedString(string: "Deelnemers:  26")
            deelnemers26.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: deelnemers26.length))
            deelnemers26.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: deelnemers26.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                deelnemers26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: deelnemers26.length))
            }
            context.saveGState()
            deelnemers26.draw(in: CGRect(x: 201, y: 17, width: 124, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 474)
            
            /// Rectangle 5
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 133), cornerRadius: 6)
            context.saveGState()
            UIColor.white.setFill()
            rectangle6.fill()
            context.restoreGState()
            
            /// Team eten
            let teamEten = NSMutableAttributedString(string: "Team eten")
            teamEten.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: teamEten.length))
            teamEten.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: teamEten.length))
            context.saveGState()
            teamEten.draw(in: CGRect(x: 10, y: 17, width: 154, height: 20))
            context.restoreGState()
            
            /// Seisjes berg Huizen
            let seisjesBergHuizen2 = NSMutableAttributedString(string: "Seisjes berg Huizen")
            seisjesBergHuizen2.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: seisjesBergHuizen2.length))
            seisjesBergHuizen2.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: seisjesBergHuizen2.length))
            context.saveGState()
            seisjesBergHuizen2.draw(in: CGRect(x: 63, y: 90, width: 200, height: 20))
            context.restoreGState()
            
            /// Zondag 18:00 Locatie
            let zondag1800Locatie2 = NSMutableAttributedString(string: "Zondag\n18:00\nLocatie:")
            zondag1800Locatie2.addAttribute(.font, value: UIFont(name: "SourceSansPro-Regular", size: 12)!, range: NSRange(location: 0, length: zondag1800Locatie2.length))
            zondag1800Locatie2.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: zondag1800Locatie2.length))
            context.saveGState()
            context.setAlpha(0.8)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                zondag1800Locatie2.draw(in: CGRect(x: 10, y: 63, width: 58, height: 50))
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Deelnemers: 20
            let deelnemers20 = NSMutableAttributedString(string: "Deelnemers:  20")
            deelnemers20.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: deelnemers20.length))
            deelnemers20.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: deelnemers20.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                deelnemers20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: deelnemers20.length))
            }
            context.saveGState()
            deelnemers20.draw(in: CGRect(x: 222, y: 17, width: 103, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Buttons/Primary
        // Warning: New symbols are not supported.
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 458))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Date - Selector
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 75)
            
            /// Background
            let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 383), cornerRadius: 8)
            context.saveGState()
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// Selected
            do {
                context.saveGState()
                context.translateBy(x: 9, y: 267)
                
                /// Oval
                let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 36, height: 34))
                context.saveGState()
                UIColor(hue: 0.453, saturation: 0.772, brightness: 0.757, alpha: 1).setFill()
                oval.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Calendar
            do {
                context.saveGState()
                context.translateBy(x: 16, y: 68)
                
                /// Row_6
                do {
                    context.saveGState()
                    context.translateBy(x: 6, y: 248.86)
                    
                    /// 5
                    let _5 = NSMutableAttributedString(string: "5")
                    _5.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _5.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                    }
                    context.saveGState()
                    _5.draw(in: CGRect(x: 94, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 6
                    let _6 = NSMutableAttributedString(string: "6")
                    _6.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _6.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                    }
                    context.saveGState()
                    _6.draw(in: CGRect(x: 140, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 7
                    let _7 = NSMutableAttributedString(string: "7")
                    _7.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _7.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                    }
                    context.saveGState()
                    _7.draw(in: CGRect(x: 188.5, y: 0, width: 10, height: 22))
                    context.restoreGState()
                    
                    /// 8
                    let _8 = NSMutableAttributedString(string: "8")
                    _8.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _8.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                    }
                    context.saveGState()
                    _8.draw(in: CGRect(x: 235, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 9
                    let _9 = NSMutableAttributedString(string: "9")
                    _9.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _9.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
                    }
                    context.saveGState()
                    _9.draw(in: CGRect(x: 282, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 3
                    let _3 = NSMutableAttributedString(string: "3")
                    _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _3.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
                    }
                    context.saveGState()
                    _3.draw(in: CGRect(x: 0, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 4
                    let _4 = NSMutableAttributedString(string: "4")
                    _4.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _4.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
                    }
                    context.saveGState()
                    _4.draw(in: CGRect(x: 46, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_5
                do {
                    context.saveGState()
                    context.translateBy(x: 1, y: 206.74)
                    
                    /// 29
                    let _29 = NSMutableAttributedString(string: "29")
                    _29.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _29.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _29.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _29.length))
                    }
                    context.saveGState()
                    _29.draw(in: CGRect(x: 93.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 30
                    let _30 = NSMutableAttributedString(string: "30")
                    _30.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _30.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _30.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _30.length))
                    }
                    context.saveGState()
                    _30.draw(in: CGRect(x: 139.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 31
                    let _31 = NSMutableAttributedString(string: "31")
                    _31.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _31.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _31.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _31.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    _31.draw(in: CGRect(x: 189, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 1
                    let _1 = NSMutableAttributedString(string: "1")
                    _1.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _1.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
                    }
                    context.saveGState()
                    _1.draw(in: CGRect(x: 241.5, y: 0, width: 8, height: 22))
                    context.restoreGState()
                    
                    /// 2
                    let _2 = NSMutableAttributedString(string: "2")
                    _2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
                    }
                    context.saveGState()
                    _2.draw(in: CGRect(x: 287, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 27
                    let _27 = NSMutableAttributedString(string: "27")
                    _27.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _27.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _27.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _27.length))
                    }
                    context.saveGState()
                    _27.draw(in: CGRect(x: 0.5, y: 0, width: 20, height: 22))
                    context.restoreGState()
                    
                    /// 28
                    let _28 = NSMutableAttributedString(string: "28")
                    _28.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _28.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _28.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _28.length))
                    }
                    context.saveGState()
                    _28.draw(in: CGRect(x: 45.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_4
                do {
                    context.saveGState()
                    context.translateBy(x: 1, y: 164.63)
                    
                    /// 22
                    let _22 = NSMutableAttributedString(string: "22")
                    _22.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _22.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _22.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _22.length))
                    }
                    context.saveGState()
                    _22.draw(in: CGRect(x: 94, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 23
                    let _23 = NSMutableAttributedString(string: "23")
                    _23.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _23.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
                    }
                    context.saveGState()
                    _23.draw(in: CGRect(x: 140, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 24
                    let _24 = NSMutableAttributedString(string: "24")
                    _24.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _24.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _24.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _24.length))
                    }
                    context.saveGState()
                    _24.draw(in: CGRect(x: 188, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 25
                    let _25 = NSMutableAttributedString(string: "25")
                    _25.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _25.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _25.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25.length))
                    }
                    context.saveGState()
                    _25.draw(in: CGRect(x: 235, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 26
                    let _26 = NSMutableAttributedString(string: "26")
                    _26.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _26.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _26.length))
                    }
                    context.saveGState()
                    _26.draw(in: CGRect(x: 281.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 20
                    let _20 = NSMutableAttributedString(string: "20")
                    _20.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _20.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
                    }
                    context.saveGState()
                    _20.draw(in: CGRect(x: 0, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 21
                    let _21 = NSMutableAttributedString(string: "21")
                    _21.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _21.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _21.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _21.length))
                    }
                    context.saveGState()
                    _21.draw(in: CGRect(x: 47, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_3
                do {
                    context.saveGState()
                    context.translateBy(x: 2, y: 122.51)
                    
                    /// 15
                    let _15 = NSMutableAttributedString(string: "15")
                    _15.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _15.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _15.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15.length))
                    }
                    context.saveGState()
                    _15.draw(in: CGRect(x: 94, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 16
                    let _16 = NSMutableAttributedString(string: "16")
                    _16.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _16.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _16.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _16.length))
                    }
                    context.saveGState()
                    _16.draw(in: CGRect(x: 140, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 17
                    let _17 = NSMutableAttributedString(string: "17")
                    _17.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _17.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _17.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _17.length))
                    }
                    context.saveGState()
                    _17.draw(in: CGRect(x: 188.5, y: 0, width: 18, height: 22))
                    context.restoreGState()
                    
                    /// 18
                    let _18 = NSMutableAttributedString(string: "18")
                    _18.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _18.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _18.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _18.length))
                    }
                    context.saveGState()
                    _18.draw(in: CGRect(x: 235, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 19
                    let _19 = NSMutableAttributedString(string: "19")
                    _19.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _19.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _19.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _19.length))
                    }
                    context.saveGState()
                    _19.draw(in: CGRect(x: 282, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 13
                    let _13 = NSMutableAttributedString(string: "13")
                    _13.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _13.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                    }
                    context.saveGState()
                    _13.draw(in: CGRect(x: 0, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 14
                    let _14 = NSMutableAttributedString(string: "14")
                    _14.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _14.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _14.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _14.length))
                    }
                    context.saveGState()
                    _14.draw(in: CGRect(x: 46, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_2
                do {
                    context.saveGState()
                    context.translateBy(x: 6, y: 79.44)
                    
                    /// 8
                    let _32 = NSMutableAttributedString(string: "8")
                    _32.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _32.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _32.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _32.length))
                    }
                    context.saveGState()
                    _32.draw(in: CGRect(x: 94, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 9
                    let _33 = NSMutableAttributedString(string: "9")
                    _33.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _33.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _33.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _33.length))
                    }
                    context.saveGState()
                    _33.draw(in: CGRect(x: 140, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 10
                    let _10 = NSMutableAttributedString(string: "10")
                    _10.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _10.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                    }
                    context.saveGState()
                    _10.draw(in: CGRect(x: 184, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 11
                    let _11 = NSMutableAttributedString(string: "11")
                    _11.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _11.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                    }
                    context.saveGState()
                    _11.draw(in: CGRect(x: 232.5, y: 0, width: 16, height: 22))
                    context.restoreGState()
                    
                    /// 12
                    let _12 = NSMutableAttributedString(string: "12")
                    _12.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _12.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                    }
                    context.saveGState()
                    _12.draw(in: CGRect(x: 278, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 6
                    let _34 = NSMutableAttributedString(string: "6")
                    _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _34.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
                    }
                    context.saveGState()
                    _34.draw(in: CGRect(x: 0, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 7
                    let _35 = NSMutableAttributedString(string: "7")
                    _35.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _35.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _35.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _35.length))
                    }
                    context.saveGState()
                    _35.draw(in: CGRect(x: 46.5, y: 0, width: 10, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_1
                do {
                    context.saveGState()
                    context.translateBy(x: 0, y: 39.24)
                    
                    /// 1
                    let _36 = NSMutableAttributedString(string: "1")
                    _36.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _36.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _36.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _36.length))
                    }
                    context.saveGState()
                    _36.draw(in: CGRect(x: 101.5, y: 0, width: 8, height: 22))
                    context.restoreGState()
                    
                    /// 2
                    let _37 = NSMutableAttributedString(string: "2")
                    _37.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _37.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _37.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _37.length))
                    }
                    context.saveGState()
                    _37.draw(in: CGRect(x: 146, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 3
                    let _38 = NSMutableAttributedString(string: "3")
                    _38.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _38.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _38.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _38.length))
                    }
                    context.saveGState()
                    _38.draw(in: CGRect(x: 194, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 4
                    let _39 = NSMutableAttributedString(string: "4")
                    _39.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _39.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _39.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _39.length))
                    }
                    context.saveGState()
                    _39.draw(in: CGRect(x: 241, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 5
                    let _40 = NSMutableAttributedString(string: "5")
                    _40.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _40.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _40.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _40.length))
                    }
                    context.saveGState()
                    _40.draw(in: CGRect(x: 288, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 30
                    let _41 = NSMutableAttributedString(string: "30")
                    _41.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _41.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _41.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _41.length))
                    }
                    context.saveGState()
                    _41.draw(in: CGRect(x: 0.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 31
                    let _42 = NSMutableAttributedString(string: "31")
                    _42.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _42.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _42.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _42.length))
                    }
                    context.saveGState()
                    _42.draw(in: CGRect(x: 48, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Days
                do {
                    context.saveGState()
                    context.translateBy(x: 5, y: 0)
                    
                    /// T
                    let t = NSMutableAttributedString(string: "T")
                    t.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: t.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    t.draw(in: CGRect(x: 94.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// W
                    let w = NSMutableAttributedString(string: "W")
                    w.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: w.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    w.draw(in: CGRect(x: 138, y: 0, width: 17, height: 22))
                    context.restoreGState()
                    
                    /// T
                    let t2 = NSMutableAttributedString(string: "T")
                    t2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: t2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        t2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t2.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    t2.draw(in: CGRect(x: 188.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// F
                    let f = NSMutableAttributedString(string: "F")
                    f.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: f.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    f.draw(in: CGRect(x: 236, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// S
                    let s = NSMutableAttributedString(string: "S")
                    s.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: s.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    s.draw(in: CGRect(x: 282.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// S
                    let s2 = NSMutableAttributedString(string: "S")
                    s2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: s2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        s2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s2.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    s2.draw(in: CGRect(x: 0.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// M
                    let m = NSMutableAttributedString(string: "M")
                    m.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: m.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    m.draw(in: CGRect(x: 44.5, y: 0, width: 16, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Title
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 16)
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 2.28, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 2.22))
                shape.addLine(to: CGPoint(x: 7.42, y: 9.44))
                shape.addLine(to: CGPoint(x: 0, y: 16.66))
                shape.addLine(to: CGPoint(x: 2.28, y: 18.88))
                shape.addLine(to: CGPoint(x: 12, y: 9.44))
                shape.addLine(to: CGPoint(x: 2.28, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2.28, y: 0))
                context.saveGState()
                context.translateBy(x: 283, y: 8.77)
                UIColor(hue: 0.453, saturation: 0.772, brightness: 0.757, alpha: 1).setFill()
                shape.fill()
                context.restoreGState()
                
                /// Shape Copy
                let shapeCopy = UIBezierPath()
                shapeCopy.move(to: CGPoint(x: 2.28, y: 0))
                shapeCopy.addLine(to: CGPoint(x: 0, y: 2.22))
                shapeCopy.addLine(to: CGPoint(x: 7.42, y: 9.44))
                shapeCopy.addLine(to: CGPoint(x: 0, y: 16.66))
                shapeCopy.addLine(to: CGPoint(x: 2.28, y: 18.88))
                shapeCopy.addLine(to: CGPoint(x: 12, y: 9.44))
                shapeCopy.addLine(to: CGPoint(x: 2.28, y: 0))
                shapeCopy.close()
                shapeCopy.move(to: CGPoint(x: 2.28, y: 0))
                context.saveGState()
                context.translateBy(x: 6, y: 18.21)
                context.scaleBy(x: -1, y: 1)
                context.rotate(by: 2 * CGFloat.pi)
                context.translateBy(x: -6, y: -9.44)
                UIColor(hue: 0.453, saturation: 0.772, brightness: 0.757, alpha: 1).setFill()
                shapeCopy.fill()
                context.restoreGState()
                
                /// August 2017
                let august2017 = NSMutableAttributedString(string: "August 2017")
                august2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 17)!, range: NSRange(location: 0, length: august2017.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    august2017.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: august2017.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                august2017.draw(in: CGRect(x: 95, y: 0.71, width: 105, height: 22))
                context.restoreGState()
                
                /// Aug 27 - Aug 31
                let aug27Aug31 = NSMutableAttributedString(string: "Aug 27 - Aug 31")
                aug27Aug31.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: aug27Aug31.length))
                context.saveGState()
                aug27Aug31.draw(in: CGRect(x: 99, y: 21.21, width: 91, height: 17))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Agenda
            let agenda3 = NSMutableAttributedString(string: "Agenda")
            agenda3.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: agenda3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                agenda3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: agenda3.length))
            }
            context.saveGState()
            agenda3.draw(at: CGPoint(x: 144.5, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawAgendaMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bg
        // Warning: New symbols are not supported.
        /// Menu
        do {
            context.saveGState()
            context.translateBy(x: -1, y: 0)
            
            /// Container
            let container = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 299, height: 667))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(container.cgPath)
            context.addRect(container.bounds.insetBy(dx: -8, dy: -8))
            context.clip(using: .evenOdd)
            context.translateBy(x: -308, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 308, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.43).cgColor)
            }
            UIColor.black.setFill()
            container.fill()
            context.restoreGState()
            UIColor.white.setFill()
            container.fill()
            context.restoreGState()
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 88)
                
                /// Line
                let line = UIBezierPath()
                line.move(to: CGPoint(x: 0.45, y: 1.84))
                line.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 39.99)
                line.lineCapStyle = .square
                line.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line.stroke()
                context.restoreGState()
                
                /// Messageboard
                let messageboard = NSMutableAttributedString(string: "Messageboard")
                messageboard.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: messageboard.length))
                context.saveGState()
                messageboard.draw(in: CGRect(x: 84.6, y: 0, width: 102.4, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 36)
                
                /// Line
                let line2 = UIBezierPath()
                line2.move(to: CGPoint(x: 0.45, y: 1.84))
                line2.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 31.99)
                line2.lineCapStyle = .square
                line2.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line2.stroke()
                context.restoreGState()
                
                /// Thomas de Lange
                let thomasDeLange = NSMutableAttributedString(string: "Thomas de Lange")
                thomasDeLange.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: thomasDeLange.length))
                context.saveGState()
                thomasDeLange.draw(in: CGRect(x: 84.6, y: 0, width: 124.02, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 152)
                
                /// Line
                let line3 = UIBezierPath()
                line3.move(to: CGPoint(x: 0.45, y: 1.84))
                line3.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 37.22)
                line3.lineCapStyle = .square
                line3.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line3.stroke()
                context.restoreGState()
                
                /// Agenda
                let agenda = NSMutableAttributedString(string: "Agenda")
                agenda.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: agenda.length))
                context.saveGState()
                agenda.draw(in: CGRect(x: 84.6, y: 0, width: 52.98, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 217)
                
                /// Line
                let line4 = UIBezierPath()
                line4.move(to: CGPoint(x: 0.45, y: 1.84))
                line4.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 38.99)
                line4.lineCapStyle = .square
                line4.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line4.stroke()
                context.restoreGState()
                
                /// Instellingen
                let instellingen = NSMutableAttributedString(string: "Instellingen")
                instellingen.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: instellingen.length))
                context.saveGState()
                instellingen.draw(in: CGRect(x: 86.01, y: 0, width: 71.83, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 289)
                
                /// Line
                let line5 = UIBezierPath()
                line5.move(to: CGPoint(x: 0.45, y: 1.84))
                line5.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 36.99)
                line5.lineCapStyle = .square
                line5.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line5.stroke()
                context.restoreGState()
                
                /// Loguit
                let loguit = NSMutableAttributedString(string: "Loguit")
                loguit.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: loguit.length))
                context.saveGState()
                loguit.draw(in: CGRect(x: 86.53, y: 0, width: 59.61, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 626)
            
            /// Rectangle 5
            let rectangle5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 133), cornerRadius: 6)
            context.saveGState()
            UIColor.white.setFill()
            rectangle5.fill()
            context.restoreGState()
            
            /// Eind Feest
            let eindFeest = NSMutableAttributedString(string: "Eind Feest")
            eindFeest.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: eindFeest.length))
            eindFeest.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: eindFeest.length))
            context.saveGState()
            eindFeest.draw(in: CGRect(x: 10, y: 17, width: 154, height: 20))
            context.restoreGState()
            
            /// Seisjes berg Huizen
            let seisjesBergHuizen = NSMutableAttributedString(string: "Seisjes berg Huizen")
            seisjesBergHuizen.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: seisjesBergHuizen.length))
            seisjesBergHuizen.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: seisjesBergHuizen.length))
            context.saveGState()
            seisjesBergHuizen.draw(in: CGRect(x: 58, y: 98, width: 200, height: 20))
            context.restoreGState()
            
            /// Zondag 18:00 Locatie
            let zondag1800Locatie = NSMutableAttributedString(string: "Zondag\n18:00\nLocatie:")
            zondag1800Locatie.addAttribute(.font, value: UIFont(name: "SourceSansPro-Regular", size: 12)!, range: NSRange(location: 0, length: zondag1800Locatie.length))
            zondag1800Locatie.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: zondag1800Locatie.length))
            context.saveGState()
            context.setAlpha(0.8)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                zondag1800Locatie.draw(in: CGRect(x: 10, y: 63, width: 58, height: 50))
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Deelnemers: 26
            let deelnemers26 = NSMutableAttributedString(string: "Deelnemers:  26")
            deelnemers26.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: deelnemers26.length))
            deelnemers26.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: deelnemers26.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                deelnemers26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: deelnemers26.length))
            }
            context.saveGState()
            deelnemers26.draw(in: CGRect(x: 201, y: 17, width: 124, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 474)
            
            /// Rectangle 5
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 133), cornerRadius: 6)
            context.saveGState()
            UIColor.white.setFill()
            rectangle6.fill()
            context.restoreGState()
            
            /// Team eten
            let teamEten = NSMutableAttributedString(string: "Team eten")
            teamEten.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: teamEten.length))
            teamEten.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: teamEten.length))
            context.saveGState()
            teamEten.draw(in: CGRect(x: 10, y: 17, width: 154, height: 20))
            context.restoreGState()
            
            /// Seisjes berg Huizen
            let seisjesBergHuizen2 = NSMutableAttributedString(string: "Seisjes berg Huizen")
            seisjesBergHuizen2.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: seisjesBergHuizen2.length))
            seisjesBergHuizen2.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: seisjesBergHuizen2.length))
            context.saveGState()
            seisjesBergHuizen2.draw(in: CGRect(x: 63, y: 90, width: 200, height: 20))
            context.restoreGState()
            
            /// Zondag 18:00 Locatie
            let zondag1800Locatie2 = NSMutableAttributedString(string: "Zondag\n18:00\nLocatie:")
            zondag1800Locatie2.addAttribute(.font, value: UIFont(name: "SourceSansPro-Regular", size: 12)!, range: NSRange(location: 0, length: zondag1800Locatie2.length))
            zondag1800Locatie2.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: zondag1800Locatie2.length))
            context.saveGState()
            context.setAlpha(0.8)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                zondag1800Locatie2.draw(in: CGRect(x: 10, y: 63, width: 58, height: 50))
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Deelnemers: 20
            let deelnemers20 = NSMutableAttributedString(string: "Deelnemers:  20")
            deelnemers20.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: deelnemers20.length))
            deelnemers20.addAttribute(.kern, value: 0.29, range: NSRange(location: 0, length: deelnemers20.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                deelnemers20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: deelnemers20.length))
            }
            context.saveGState()
            deelnemers20.draw(in: CGRect(x: 222, y: 17, width: 103, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Buttons/Primary
        // Warning: New symbols are not supported.
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 458))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Date - Selector
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 75)
            
            /// Background
            let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 383), cornerRadius: 8)
            context.saveGState()
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// Selected
            do {
                context.saveGState()
                context.translateBy(x: 9, y: 267)
                
                /// Oval
                let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 36, height: 34))
                context.saveGState()
                UIColor(hue: 0.453, saturation: 0.772, brightness: 0.757, alpha: 1).setFill()
                oval.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Calendar
            do {
                context.saveGState()
                context.translateBy(x: 16, y: 68)
                
                /// Row_6
                do {
                    context.saveGState()
                    context.translateBy(x: 6, y: 248.86)
                    
                    /// 5
                    let _5 = NSMutableAttributedString(string: "5")
                    _5.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _5.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                    }
                    context.saveGState()
                    _5.draw(in: CGRect(x: 94, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 6
                    let _6 = NSMutableAttributedString(string: "6")
                    _6.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _6.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                    }
                    context.saveGState()
                    _6.draw(in: CGRect(x: 140, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 7
                    let _7 = NSMutableAttributedString(string: "7")
                    _7.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _7.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                    }
                    context.saveGState()
                    _7.draw(in: CGRect(x: 188.5, y: 0, width: 10, height: 22))
                    context.restoreGState()
                    
                    /// 8
                    let _8 = NSMutableAttributedString(string: "8")
                    _8.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _8.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                    }
                    context.saveGState()
                    _8.draw(in: CGRect(x: 235, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 9
                    let _9 = NSMutableAttributedString(string: "9")
                    _9.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _9.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
                    }
                    context.saveGState()
                    _9.draw(in: CGRect(x: 282, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 3
                    let _3 = NSMutableAttributedString(string: "3")
                    _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _3.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
                    }
                    context.saveGState()
                    _3.draw(in: CGRect(x: 0, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 4
                    let _4 = NSMutableAttributedString(string: "4")
                    _4.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _4.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
                    }
                    context.saveGState()
                    _4.draw(in: CGRect(x: 46, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_5
                do {
                    context.saveGState()
                    context.translateBy(x: 1, y: 206.74)
                    
                    /// 29
                    let _29 = NSMutableAttributedString(string: "29")
                    _29.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _29.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _29.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _29.length))
                    }
                    context.saveGState()
                    _29.draw(in: CGRect(x: 93.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 30
                    let _30 = NSMutableAttributedString(string: "30")
                    _30.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _30.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _30.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _30.length))
                    }
                    context.saveGState()
                    _30.draw(in: CGRect(x: 139.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 31
                    let _31 = NSMutableAttributedString(string: "31")
                    _31.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _31.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _31.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _31.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    _31.draw(in: CGRect(x: 189, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 1
                    let _1 = NSMutableAttributedString(string: "1")
                    _1.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _1.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
                    }
                    context.saveGState()
                    _1.draw(in: CGRect(x: 241.5, y: 0, width: 8, height: 22))
                    context.restoreGState()
                    
                    /// 2
                    let _2 = NSMutableAttributedString(string: "2")
                    _2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
                    }
                    context.saveGState()
                    _2.draw(in: CGRect(x: 287, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 27
                    let _27 = NSMutableAttributedString(string: "27")
                    _27.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _27.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _27.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _27.length))
                    }
                    context.saveGState()
                    _27.draw(in: CGRect(x: 0.5, y: 0, width: 20, height: 22))
                    context.restoreGState()
                    
                    /// 28
                    let _28 = NSMutableAttributedString(string: "28")
                    _28.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _28.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _28.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _28.length))
                    }
                    context.saveGState()
                    _28.draw(in: CGRect(x: 45.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_4
                do {
                    context.saveGState()
                    context.translateBy(x: 1, y: 164.63)
                    
                    /// 22
                    let _22 = NSMutableAttributedString(string: "22")
                    _22.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _22.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _22.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _22.length))
                    }
                    context.saveGState()
                    _22.draw(in: CGRect(x: 94, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 23
                    let _23 = NSMutableAttributedString(string: "23")
                    _23.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _23.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
                    }
                    context.saveGState()
                    _23.draw(in: CGRect(x: 140, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 24
                    let _24 = NSMutableAttributedString(string: "24")
                    _24.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _24.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _24.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _24.length))
                    }
                    context.saveGState()
                    _24.draw(in: CGRect(x: 188, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 25
                    let _25 = NSMutableAttributedString(string: "25")
                    _25.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _25.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _25.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25.length))
                    }
                    context.saveGState()
                    _25.draw(in: CGRect(x: 235, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 26
                    let _26 = NSMutableAttributedString(string: "26")
                    _26.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _26.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _26.length))
                    }
                    context.saveGState()
                    _26.draw(in: CGRect(x: 281.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 20
                    let _20 = NSMutableAttributedString(string: "20")
                    _20.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _20.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
                    }
                    context.saveGState()
                    _20.draw(in: CGRect(x: 0, y: 0, width: 21, height: 22))
                    context.restoreGState()
                    
                    /// 21
                    let _21 = NSMutableAttributedString(string: "21")
                    _21.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _21.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _21.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _21.length))
                    }
                    context.saveGState()
                    _21.draw(in: CGRect(x: 47, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_3
                do {
                    context.saveGState()
                    context.translateBy(x: 2, y: 122.51)
                    
                    /// 15
                    let _15 = NSMutableAttributedString(string: "15")
                    _15.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _15.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _15.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15.length))
                    }
                    context.saveGState()
                    _15.draw(in: CGRect(x: 94, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 16
                    let _16 = NSMutableAttributedString(string: "16")
                    _16.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _16.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _16.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _16.length))
                    }
                    context.saveGState()
                    _16.draw(in: CGRect(x: 140, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 17
                    let _17 = NSMutableAttributedString(string: "17")
                    _17.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _17.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _17.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _17.length))
                    }
                    context.saveGState()
                    _17.draw(in: CGRect(x: 188.5, y: 0, width: 18, height: 22))
                    context.restoreGState()
                    
                    /// 18
                    let _18 = NSMutableAttributedString(string: "18")
                    _18.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _18.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _18.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _18.length))
                    }
                    context.saveGState()
                    _18.draw(in: CGRect(x: 235, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 19
                    let _19 = NSMutableAttributedString(string: "19")
                    _19.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _19.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _19.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _19.length))
                    }
                    context.saveGState()
                    _19.draw(in: CGRect(x: 282, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 13
                    let _13 = NSMutableAttributedString(string: "13")
                    _13.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _13.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                    }
                    context.saveGState()
                    _13.draw(in: CGRect(x: 0, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 14
                    let _14 = NSMutableAttributedString(string: "14")
                    _14.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _14.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _14.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _14.length))
                    }
                    context.saveGState()
                    _14.draw(in: CGRect(x: 46, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_2
                do {
                    context.saveGState()
                    context.translateBy(x: 6, y: 79.44)
                    
                    /// 8
                    let _32 = NSMutableAttributedString(string: "8")
                    _32.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _32.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _32.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _32.length))
                    }
                    context.saveGState()
                    _32.draw(in: CGRect(x: 94, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 9
                    let _33 = NSMutableAttributedString(string: "9")
                    _33.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _33.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _33.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _33.length))
                    }
                    context.saveGState()
                    _33.draw(in: CGRect(x: 140, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 10
                    let _10 = NSMutableAttributedString(string: "10")
                    _10.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _10.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                    }
                    context.saveGState()
                    _10.draw(in: CGRect(x: 184, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 11
                    let _11 = NSMutableAttributedString(string: "11")
                    _11.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _11.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                    }
                    context.saveGState()
                    _11.draw(in: CGRect(x: 232.5, y: 0, width: 16, height: 22))
                    context.restoreGState()
                    
                    /// 12
                    let _12 = NSMutableAttributedString(string: "12")
                    _12.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _12.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                    }
                    context.saveGState()
                    _12.draw(in: CGRect(x: 278, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    /// 6
                    let _34 = NSMutableAttributedString(string: "6")
                    _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _34.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
                    }
                    context.saveGState()
                    _34.draw(in: CGRect(x: 0, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 7
                    let _35 = NSMutableAttributedString(string: "7")
                    _35.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _35.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _35.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _35.length))
                    }
                    context.saveGState()
                    _35.draw(in: CGRect(x: 46.5, y: 0, width: 10, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Row_1
                do {
                    context.saveGState()
                    context.translateBy(x: 0, y: 39.24)
                    
                    /// 1
                    let _36 = NSMutableAttributedString(string: "1")
                    _36.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _36.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _36.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _36.length))
                    }
                    context.saveGState()
                    _36.draw(in: CGRect(x: 101.5, y: 0, width: 8, height: 22))
                    context.restoreGState()
                    
                    /// 2
                    let _37 = NSMutableAttributedString(string: "2")
                    _37.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _37.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _37.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _37.length))
                    }
                    context.saveGState()
                    _37.draw(in: CGRect(x: 146, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 3
                    let _38 = NSMutableAttributedString(string: "3")
                    _38.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _38.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _38.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _38.length))
                    }
                    context.saveGState()
                    _38.draw(in: CGRect(x: 194, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 4
                    let _39 = NSMutableAttributedString(string: "4")
                    _39.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _39.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _39.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _39.length))
                    }
                    context.saveGState()
                    _39.draw(in: CGRect(x: 241, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 5
                    let _40 = NSMutableAttributedString(string: "5")
                    _40.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _40.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _40.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _40.length))
                    }
                    context.saveGState()
                    _40.draw(in: CGRect(x: 288, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// 30
                    let _41 = NSMutableAttributedString(string: "30")
                    _41.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _41.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _41.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _41.length))
                    }
                    context.saveGState()
                    _41.draw(in: CGRect(x: 0.5, y: 0, width: 22, height: 22))
                    context.restoreGState()
                    
                    /// 31
                    let _42 = NSMutableAttributedString(string: "31")
                    _42.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: _42.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        _42.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _42.length))
                    }
                    context.saveGState()
                    _42.draw(in: CGRect(x: 48, y: 0, width: 19, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Days
                do {
                    context.saveGState()
                    context.translateBy(x: 5, y: 0)
                    
                    /// T
                    let t = NSMutableAttributedString(string: "T")
                    t.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: t.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    t.draw(in: CGRect(x: 94.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// W
                    let w = NSMutableAttributedString(string: "W")
                    w.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: w.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    w.draw(in: CGRect(x: 138, y: 0, width: 17, height: 22))
                    context.restoreGState()
                    
                    /// T
                    let t2 = NSMutableAttributedString(string: "T")
                    t2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: t2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        t2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t2.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    t2.draw(in: CGRect(x: 188.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// F
                    let f = NSMutableAttributedString(string: "F")
                    f.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: f.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    f.draw(in: CGRect(x: 236, y: 0, width: 11, height: 22))
                    context.restoreGState()
                    
                    /// S
                    let s = NSMutableAttributedString(string: "S")
                    s.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: s.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    s.draw(in: CGRect(x: 282.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// S
                    let s2 = NSMutableAttributedString(string: "S")
                    s2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: s2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        s2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s2.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    s2.draw(in: CGRect(x: 0.5, y: 0, width: 12, height: 22))
                    context.restoreGState()
                    
                    /// M
                    let m = NSMutableAttributedString(string: "M")
                    m.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: m.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    m.draw(in: CGRect(x: 44.5, y: 0, width: 16, height: 22))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Title
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 16)
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 2.28, y: 0))
                shape.addLine(to: CGPoint(x: 0, y: 2.22))
                shape.addLine(to: CGPoint(x: 7.42, y: 9.44))
                shape.addLine(to: CGPoint(x: 0, y: 16.66))
                shape.addLine(to: CGPoint(x: 2.28, y: 18.88))
                shape.addLine(to: CGPoint(x: 12, y: 9.44))
                shape.addLine(to: CGPoint(x: 2.28, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 2.28, y: 0))
                context.saveGState()
                context.translateBy(x: 283, y: 8.77)
                UIColor(hue: 0.453, saturation: 0.772, brightness: 0.757, alpha: 1).setFill()
                shape.fill()
                context.restoreGState()
                
                /// Shape Copy
                let shapeCopy = UIBezierPath()
                shapeCopy.move(to: CGPoint(x: 2.28, y: 0))
                shapeCopy.addLine(to: CGPoint(x: 0, y: 2.22))
                shapeCopy.addLine(to: CGPoint(x: 7.42, y: 9.44))
                shapeCopy.addLine(to: CGPoint(x: 0, y: 16.66))
                shapeCopy.addLine(to: CGPoint(x: 2.28, y: 18.88))
                shapeCopy.addLine(to: CGPoint(x: 12, y: 9.44))
                shapeCopy.addLine(to: CGPoint(x: 2.28, y: 0))
                shapeCopy.close()
                shapeCopy.move(to: CGPoint(x: 2.28, y: 0))
                context.saveGState()
                context.translateBy(x: 6, y: 18.21)
                context.scaleBy(x: -1, y: 1)
                context.rotate(by: 2 * CGFloat.pi)
                context.translateBy(x: -6, y: -9.44)
                UIColor(hue: 0.453, saturation: 0.772, brightness: 0.757, alpha: 1).setFill()
                shapeCopy.fill()
                context.restoreGState()
                
                /// August 2017
                let august2017 = NSMutableAttributedString(string: "August 2017")
                august2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 17)!, range: NSRange(location: 0, length: august2017.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    august2017.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: august2017.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                august2017.draw(in: CGRect(x: 95, y: 0.71, width: 105, height: 22))
                context.restoreGState()
                
                /// Aug 27 - Aug 31
                let aug27Aug31 = NSMutableAttributedString(string: "Aug 27 - Aug 31")
                aug27Aug31.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: aug27Aug31.length))
                context.saveGState()
                aug27Aug31.draw(in: CGRect(x: 99, y: 21.21, width: 91, height: 17))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Agenda
            let agenda2 = NSMutableAttributedString(string: "Agenda")
            agenda2.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: agenda2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                agenda2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: agenda2.length))
            }
            context.saveGState()
            agenda2.draw(at: CGPoint(x: 144.5, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// Menu
        // Warning: New symbols are not supported.
        /// settings-power
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 278)
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 3, y: 22))
            shape2.addLine(to: CGPoint(x: 5, y: 22))
            shape2.addLine(to: CGPoint(x: 5, y: 20))
            shape2.addLine(to: CGPoint(x: 3, y: 20))
            shape2.addLine(to: CGPoint(x: 3, y: 22))
            shape2.addLine(to: CGPoint(x: 3, y: 22))
            shape2.close()
            shape2.move(to: CGPoint(x: 7, y: 22))
            shape2.addLine(to: CGPoint(x: 9, y: 22))
            shape2.addLine(to: CGPoint(x: 9, y: 20))
            shape2.addLine(to: CGPoint(x: 7, y: 20))
            shape2.addLine(to: CGPoint(x: 7, y: 22))
            shape2.addLine(to: CGPoint(x: 7, y: 22))
            shape2.close()
            shape2.move(to: CGPoint(x: 9, y: 0))
            shape2.addLine(to: CGPoint(x: 7, y: 0))
            shape2.addLine(to: CGPoint(x: 7, y: 10))
            shape2.addLine(to: CGPoint(x: 9, y: 10))
            shape2.addLine(to: CGPoint(x: 9, y: 0))
            shape2.addLine(to: CGPoint(x: 9, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 12.6, y: 2.4))
            shape2.addLine(to: CGPoint(x: 11.2, y: 3.8))
            shape2.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 12.8, y: 4.9), controlPoint2: CGPoint(x: 14, y: 6.8))
            shape2.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 14, y: 12.3), controlPoint2: CGPoint(x: 11.3, y: 15))
            shape2.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 4.7, y: 15), controlPoint2: CGPoint(x: 2, y: 12.3))
            shape2.addCurve(to: CGPoint(x: 4.9, y: 3.9), controlPoint1: CGPoint(x: 2, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 4.9))
            shape2.addLine(to: CGPoint(x: 3.4, y: 2.4))
            shape2.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.4, y: 3.9), controlPoint2: CGPoint(x: 0, y: 6.3))
            shape2.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 0, y: 13.4), controlPoint2: CGPoint(x: 3.6, y: 17))
            shape2.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.4, y: 17), controlPoint2: CGPoint(x: 16, y: 13.4))
            shape2.addCurve(to: CGPoint(x: 12.6, y: 2.4), controlPoint1: CGPoint(x: 16, y: 6.3), controlPoint2: CGPoint(x: 14.6, y: 3.9))
            shape2.addLine(to: CGPoint(x: 12.6, y: 2.4))
            shape2.close()
            shape2.move(to: CGPoint(x: 11, y: 22))
            shape2.addLine(to: CGPoint(x: 13, y: 22))
            shape2.addLine(to: CGPoint(x: 13, y: 20))
            shape2.addLine(to: CGPoint(x: 11, y: 20))
            shape2.addLine(to: CGPoint(x: 11, y: 22))
            shape2.addLine(to: CGPoint(x: 11, y: 22))
            shape2.close()
            shape2.move(to: CGPoint(x: 11, y: 22))
            context.saveGState()
            shape2.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 213)
            
            /// Shape
            let shape3 = UIBezierPath()
            shape3.move(to: CGPoint(x: 17.14, y: 11))
            shape3.addCurve(to: CGPoint(x: 17.24, y: 10), controlPoint1: CGPoint(x: 17.14, y: 10.7), controlPoint2: CGPoint(x: 17.24, y: 10.4))
            shape3.addCurve(to: CGPoint(x: 17.14, y: 9), controlPoint1: CGPoint(x: 17.24, y: 9.6), controlPoint2: CGPoint(x: 17.24, y: 9.3))
            shape3.addLine(to: CGPoint(x: 19.24, y: 7.3))
            shape3.addCurve(to: CGPoint(x: 19.34, y: 6.7), controlPoint1: CGPoint(x: 19.44, y: 7.1), controlPoint2: CGPoint(x: 19.44, y: 6.9))
            shape3.addLine(to: CGPoint(x: 17.34, y: 3.2))
            shape3.addCurve(to: CGPoint(x: 16.74, y: 3.1), controlPoint1: CGPoint(x: 17.24, y: 3.1), controlPoint2: CGPoint(x: 17.04, y: 3))
            shape3.addLine(to: CGPoint(x: 14.24, y: 4.1))
            shape3.addCurve(to: CGPoint(x: 12.54, y: 3.1), controlPoint1: CGPoint(x: 13.74, y: 3.7), controlPoint2: CGPoint(x: 13.14, y: 3.4))
            shape3.addLine(to: CGPoint(x: 12.14, y: 0.5))
            shape3.addCurve(to: CGPoint(x: 11.74, y: 0), controlPoint1: CGPoint(x: 12.24, y: 0.2), controlPoint2: CGPoint(x: 11.94, y: 0))
            shape3.addLine(to: CGPoint(x: 7.74, y: 0))
            shape3.addCurve(to: CGPoint(x: 7.24, y: 0.4), controlPoint1: CGPoint(x: 7.54, y: 0), controlPoint2: CGPoint(x: 7.24, y: 0.2))
            shape3.addLine(to: CGPoint(x: 6.84, y: 3.1))
            shape3.addCurve(to: CGPoint(x: 5.14, y: 4.1), controlPoint1: CGPoint(x: 6.24, y: 3.3), controlPoint2: CGPoint(x: 5.74, y: 3.7))
            shape3.addLine(to: CGPoint(x: 2.74, y: 3.1))
            shape3.addCurve(to: CGPoint(x: 2.04, y: 3.3), controlPoint1: CGPoint(x: 2.44, y: 3), controlPoint2: CGPoint(x: 2.24, y: 3.1))
            shape3.addLine(to: CGPoint(x: 0.04, y: 6.8))
            shape3.addCurve(to: CGPoint(x: 0.24, y: 7.4), controlPoint1: CGPoint(x: -0.06, y: 6.9), controlPoint2: CGPoint(x: 0.04, y: 7.2))
            shape3.addLine(to: CGPoint(x: 2.34, y: 9))
            shape3.addCurve(to: CGPoint(x: 2.24, y: 10), controlPoint1: CGPoint(x: 2.34, y: 9.3), controlPoint2: CGPoint(x: 2.24, y: 9.6))
            shape3.addCurve(to: CGPoint(x: 2.34, y: 11), controlPoint1: CGPoint(x: 2.24, y: 10.4), controlPoint2: CGPoint(x: 2.24, y: 10.7))
            shape3.addLine(to: CGPoint(x: 0.24, y: 12.7))
            shape3.addCurve(to: CGPoint(x: 0.14, y: 13.3), controlPoint1: CGPoint(x: 0.04, y: 12.9), controlPoint2: CGPoint(x: 0.04, y: 13.1))
            shape3.addLine(to: CGPoint(x: 2.14, y: 16.8))
            shape3.addCurve(to: CGPoint(x: 2.74, y: 16.9), controlPoint1: CGPoint(x: 2.24, y: 16.9), controlPoint2: CGPoint(x: 2.44, y: 17))
            shape3.addLine(to: CGPoint(x: 5.24, y: 15.9))
            shape3.addCurve(to: CGPoint(x: 6.94, y: 16.9), controlPoint1: CGPoint(x: 5.74, y: 16.3), controlPoint2: CGPoint(x: 6.34, y: 16.6))
            shape3.addLine(to: CGPoint(x: 7.34, y: 19.5))
            shape3.addCurve(to: CGPoint(x: 7.84, y: 19.9), controlPoint1: CGPoint(x: 7.34, y: 19.7), controlPoint2: CGPoint(x: 7.54, y: 19.9))
            shape3.addLine(to: CGPoint(x: 11.84, y: 19.9))
            shape3.addCurve(to: CGPoint(x: 12.34, y: 19.5), controlPoint1: CGPoint(x: 12.04, y: 19.9), controlPoint2: CGPoint(x: 12.34, y: 19.7))
            shape3.addLine(to: CGPoint(x: 12.74, y: 16.9))
            shape3.addCurve(to: CGPoint(x: 14.44, y: 15.9), controlPoint1: CGPoint(x: 13.34, y: 16.6), controlPoint2: CGPoint(x: 13.94, y: 16.3))
            shape3.addLine(to: CGPoint(x: 16.94, y: 16.9))
            shape3.addCurve(to: CGPoint(x: 17.54, y: 16.7), controlPoint1: CGPoint(x: 17.14, y: 17), controlPoint2: CGPoint(x: 17.44, y: 16.9))
            shape3.addLine(to: CGPoint(x: 19.54, y: 13.2))
            shape3.addCurve(to: CGPoint(x: 19.44, y: 12.6), controlPoint1: CGPoint(x: 19.64, y: 13), controlPoint2: CGPoint(x: 19.64, y: 12.7))
            shape3.addLine(to: CGPoint(x: 17.14, y: 11))
            shape3.addLine(to: CGPoint(x: 17.14, y: 11))
            shape3.close()
            shape3.move(to: CGPoint(x: 9.74, y: 13.5))
            shape3.addCurve(to: CGPoint(x: 6.24, y: 10), controlPoint1: CGPoint(x: 7.84, y: 13.5), controlPoint2: CGPoint(x: 6.24, y: 11.9))
            shape3.addCurve(to: CGPoint(x: 9.74, y: 6.5), controlPoint1: CGPoint(x: 6.24, y: 8.1), controlPoint2: CGPoint(x: 7.84, y: 6.5))
            shape3.addCurve(to: CGPoint(x: 13.24, y: 10), controlPoint1: CGPoint(x: 11.64, y: 6.5), controlPoint2: CGPoint(x: 13.24, y: 8.1))
            shape3.addCurve(to: CGPoint(x: 9.74, y: 13.5), controlPoint1: CGPoint(x: 13.24, y: 11.9), controlPoint2: CGPoint(x: 11.64, y: 13.5))
            shape3.addLine(to: CGPoint(x: 9.74, y: 13.5))
            shape3.close()
            shape3.move(to: CGPoint(x: 9.74, y: 13.5))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            shape3.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// event 2
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 149)
            
            /// Shape
            let shape4 = UIBezierPath()
            shape4.move(to: CGPoint(x: 14, y: 11))
            shape4.addLine(to: CGPoint(x: 9, y: 11))
            shape4.addLine(to: CGPoint(x: 9, y: 16))
            shape4.addLine(to: CGPoint(x: 14, y: 16))
            shape4.addLine(to: CGPoint(x: 14, y: 11))
            shape4.addLine(to: CGPoint(x: 14, y: 11))
            shape4.close()
            shape4.move(to: CGPoint(x: 13, y: 0))
            shape4.addLine(to: CGPoint(x: 13, y: 2))
            shape4.addLine(to: CGPoint(x: 5, y: 2))
            shape4.addLine(to: CGPoint(x: 5, y: 0))
            shape4.addLine(to: CGPoint(x: 3, y: 0))
            shape4.addLine(to: CGPoint(x: 3, y: 2))
            shape4.addLine(to: CGPoint(x: 2, y: 2))
            shape4.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
            shape4.addLine(to: CGPoint(x: 0, y: 18))
            shape4.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape4.addLine(to: CGPoint(x: 16, y: 20))
            shape4.addCurve(to: CGPoint(x: 18, y: 18), controlPoint1: CGPoint(x: 17.1, y: 20), controlPoint2: CGPoint(x: 18, y: 19.1))
            shape4.addLine(to: CGPoint(x: 18, y: 4))
            shape4.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
            shape4.addLine(to: CGPoint(x: 15, y: 2))
            shape4.addLine(to: CGPoint(x: 15, y: 0))
            shape4.addLine(to: CGPoint(x: 13, y: 0))
            shape4.addLine(to: CGPoint(x: 13, y: 0))
            shape4.close()
            shape4.move(to: CGPoint(x: 16, y: 18))
            shape4.addLine(to: CGPoint(x: 2, y: 18))
            shape4.addLine(to: CGPoint(x: 2, y: 7))
            shape4.addLine(to: CGPoint(x: 16, y: 7))
            shape4.addLine(to: CGPoint(x: 16, y: 18))
            shape4.addLine(to: CGPoint(x: 16, y: 18))
            shape4.close()
            shape4.move(to: CGPoint(x: 16, y: 18))
            context.saveGState()
            shape4.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// notifications-on
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 90)
            
            /// Shape
            let shape5 = UIBezierPath()
            shape5.move(to: CGPoint(x: 5.6, y: 1.6))
            shape5.addLine(to: CGPoint(x: 4.2, y: 0.2))
            shape5.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.8, y: 2), controlPoint2: CGPoint(x: 0.2, y: 4.8))
            shape5.addLine(to: CGPoint(x: 2, y: 8))
            shape5.addCurve(to: CGPoint(x: 5.6, y: 1.6), controlPoint1: CGPoint(x: 2.2, y: 5.3), controlPoint2: CGPoint(x: 3.5, y: 3))
            shape5.addLine(to: CGPoint(x: 5.6, y: 1.6))
            shape5.close()
            shape5.move(to: CGPoint(x: 19, y: 8))
            shape5.addLine(to: CGPoint(x: 21, y: 8))
            shape5.addCurve(to: CGPoint(x: 16.9, y: 0.2), controlPoint1: CGPoint(x: 20.8, y: 4.8), controlPoint2: CGPoint(x: 19.3, y: 2))
            shape5.addLine(to: CGPoint(x: 15.5, y: 1.6))
            shape5.addCurve(to: CGPoint(x: 19, y: 8), controlPoint1: CGPoint(x: 17.5, y: 3), controlPoint2: CGPoint(x: 18.8, y: 5.3))
            shape5.addLine(to: CGPoint(x: 19, y: 8))
            shape5.close()
            shape5.move(to: CGPoint(x: 17, y: 8.5))
            shape5.addCurve(to: CGPoint(x: 12, y: 2.2), controlPoint1: CGPoint(x: 17, y: 5.4), controlPoint2: CGPoint(x: 14.9, y: 2.9))
            shape5.addLine(to: CGPoint(x: 12, y: 1.5))
            shape5.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.7), controlPoint2: CGPoint(x: 11.3, y: 0))
            shape5.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 9.7, y: 0), controlPoint2: CGPoint(x: 9, y: 0.7))
            shape5.addLine(to: CGPoint(x: 9, y: 2.2))
            shape5.addCurve(to: CGPoint(x: 4, y: 8.5), controlPoint1: CGPoint(x: 6.1, y: 2.9), controlPoint2: CGPoint(x: 4, y: 5.4))
            shape5.addLine(to: CGPoint(x: 4, y: 14))
            shape5.addLine(to: CGPoint(x: 2, y: 16))
            shape5.addLine(to: CGPoint(x: 2, y: 17))
            shape5.addLine(to: CGPoint(x: 19, y: 17))
            shape5.addLine(to: CGPoint(x: 19, y: 16))
            shape5.addLine(to: CGPoint(x: 17, y: 14))
            shape5.addLine(to: CGPoint(x: 17, y: 8.5))
            shape5.addLine(to: CGPoint(x: 17, y: 8.5))
            shape5.close()
            shape5.move(to: CGPoint(x: 10.5, y: 20))
            shape5.addLine(to: CGPoint(x: 10.9, y: 20))
            shape5.addCurve(to: CGPoint(x: 12.3, y: 18.8), controlPoint1: CGPoint(x: 11.6, y: 19.9), controlPoint2: CGPoint(x: 12.1, y: 19.4))
            shape5.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 12.4, y: 18.6), controlPoint2: CGPoint(x: 12.5, y: 18.3))
            shape5.addLine(to: CGPoint(x: 8.5, y: 18))
            shape5.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 8.5, y: 19.1), controlPoint2: CGPoint(x: 9.4, y: 20))
            shape5.addLine(to: CGPoint(x: 10.5, y: 20))
            shape5.close()
            shape5.move(to: CGPoint(x: 10.5, y: 20))
            context.saveGState()
            shape5.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape5.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Menu
        // Warning: New symbols are not supported.
        /// event 2
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 149)
            
            /// Shape
            let shape6 = UIBezierPath()
            shape6.move(to: CGPoint(x: 14, y: 11))
            shape6.addLine(to: CGPoint(x: 9, y: 11))
            shape6.addLine(to: CGPoint(x: 9, y: 16))
            shape6.addLine(to: CGPoint(x: 14, y: 16))
            shape6.addLine(to: CGPoint(x: 14, y: 11))
            shape6.addLine(to: CGPoint(x: 14, y: 11))
            shape6.close()
            shape6.move(to: CGPoint(x: 13, y: 0))
            shape6.addLine(to: CGPoint(x: 13, y: 2))
            shape6.addLine(to: CGPoint(x: 5, y: 2))
            shape6.addLine(to: CGPoint(x: 5, y: 0))
            shape6.addLine(to: CGPoint(x: 3, y: 0))
            shape6.addLine(to: CGPoint(x: 3, y: 2))
            shape6.addLine(to: CGPoint(x: 2, y: 2))
            shape6.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
            shape6.addLine(to: CGPoint(x: 0, y: 18))
            shape6.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape6.addLine(to: CGPoint(x: 16, y: 20))
            shape6.addCurve(to: CGPoint(x: 18, y: 18), controlPoint1: CGPoint(x: 17.1, y: 20), controlPoint2: CGPoint(x: 18, y: 19.1))
            shape6.addLine(to: CGPoint(x: 18, y: 4))
            shape6.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
            shape6.addLine(to: CGPoint(x: 15, y: 2))
            shape6.addLine(to: CGPoint(x: 15, y: 0))
            shape6.addLine(to: CGPoint(x: 13, y: 0))
            shape6.addLine(to: CGPoint(x: 13, y: 0))
            shape6.close()
            shape6.move(to: CGPoint(x: 16, y: 18))
            shape6.addLine(to: CGPoint(x: 2, y: 18))
            shape6.addLine(to: CGPoint(x: 2, y: 7))
            shape6.addLine(to: CGPoint(x: 16, y: 7))
            shape6.addLine(to: CGPoint(x: 16, y: 18))
            shape6.addLine(to: CGPoint(x: 16, y: 18))
            shape6.close()
            shape6.move(to: CGPoint(x: 16, y: 18))
            context.saveGState()
            shape6.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape6.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// notifications-on
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 90)
            
            /// Shape
            let shape7 = UIBezierPath()
            shape7.move(to: CGPoint(x: 5.6, y: 1.6))
            shape7.addLine(to: CGPoint(x: 4.2, y: 0.2))
            shape7.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.8, y: 2), controlPoint2: CGPoint(x: 0.2, y: 4.8))
            shape7.addLine(to: CGPoint(x: 2, y: 8))
            shape7.addCurve(to: CGPoint(x: 5.6, y: 1.6), controlPoint1: CGPoint(x: 2.2, y: 5.3), controlPoint2: CGPoint(x: 3.5, y: 3))
            shape7.addLine(to: CGPoint(x: 5.6, y: 1.6))
            shape7.close()
            shape7.move(to: CGPoint(x: 19, y: 8))
            shape7.addLine(to: CGPoint(x: 21, y: 8))
            shape7.addCurve(to: CGPoint(x: 16.9, y: 0.2), controlPoint1: CGPoint(x: 20.8, y: 4.8), controlPoint2: CGPoint(x: 19.3, y: 2))
            shape7.addLine(to: CGPoint(x: 15.5, y: 1.6))
            shape7.addCurve(to: CGPoint(x: 19, y: 8), controlPoint1: CGPoint(x: 17.5, y: 3), controlPoint2: CGPoint(x: 18.8, y: 5.3))
            shape7.addLine(to: CGPoint(x: 19, y: 8))
            shape7.close()
            shape7.move(to: CGPoint(x: 17, y: 8.5))
            shape7.addCurve(to: CGPoint(x: 12, y: 2.2), controlPoint1: CGPoint(x: 17, y: 5.4), controlPoint2: CGPoint(x: 14.9, y: 2.9))
            shape7.addLine(to: CGPoint(x: 12, y: 1.5))
            shape7.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.7), controlPoint2: CGPoint(x: 11.3, y: 0))
            shape7.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 9.7, y: 0), controlPoint2: CGPoint(x: 9, y: 0.7))
            shape7.addLine(to: CGPoint(x: 9, y: 2.2))
            shape7.addCurve(to: CGPoint(x: 4, y: 8.5), controlPoint1: CGPoint(x: 6.1, y: 2.9), controlPoint2: CGPoint(x: 4, y: 5.4))
            shape7.addLine(to: CGPoint(x: 4, y: 14))
            shape7.addLine(to: CGPoint(x: 2, y: 16))
            shape7.addLine(to: CGPoint(x: 2, y: 17))
            shape7.addLine(to: CGPoint(x: 19, y: 17))
            shape7.addLine(to: CGPoint(x: 19, y: 16))
            shape7.addLine(to: CGPoint(x: 17, y: 14))
            shape7.addLine(to: CGPoint(x: 17, y: 8.5))
            shape7.addLine(to: CGPoint(x: 17, y: 8.5))
            shape7.close()
            shape7.move(to: CGPoint(x: 10.5, y: 20))
            shape7.addLine(to: CGPoint(x: 10.9, y: 20))
            shape7.addCurve(to: CGPoint(x: 12.3, y: 18.8), controlPoint1: CGPoint(x: 11.6, y: 19.9), controlPoint2: CGPoint(x: 12.1, y: 19.4))
            shape7.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 12.4, y: 18.6), controlPoint2: CGPoint(x: 12.5, y: 18.3))
            shape7.addLine(to: CGPoint(x: 8.5, y: 18))
            shape7.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 8.5, y: 19.1), controlPoint2: CGPoint(x: 9.4, y: 20))
            shape7.addLine(to: CGPoint(x: 10.5, y: 20))
            shape7.close()
            shape7.move(to: CGPoint(x: 10.5, y: 20))
            context.saveGState()
            shape7.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape7.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 213)
            
            /// Shape
            let shape8 = UIBezierPath()
            shape8.move(to: CGPoint(x: 17.14, y: 11))
            shape8.addCurve(to: CGPoint(x: 17.24, y: 10), controlPoint1: CGPoint(x: 17.14, y: 10.7), controlPoint2: CGPoint(x: 17.24, y: 10.4))
            shape8.addCurve(to: CGPoint(x: 17.14, y: 9), controlPoint1: CGPoint(x: 17.24, y: 9.6), controlPoint2: CGPoint(x: 17.24, y: 9.3))
            shape8.addLine(to: CGPoint(x: 19.24, y: 7.3))
            shape8.addCurve(to: CGPoint(x: 19.34, y: 6.7), controlPoint1: CGPoint(x: 19.44, y: 7.1), controlPoint2: CGPoint(x: 19.44, y: 6.9))
            shape8.addLine(to: CGPoint(x: 17.34, y: 3.2))
            shape8.addCurve(to: CGPoint(x: 16.74, y: 3.1), controlPoint1: CGPoint(x: 17.24, y: 3.1), controlPoint2: CGPoint(x: 17.04, y: 3))
            shape8.addLine(to: CGPoint(x: 14.24, y: 4.1))
            shape8.addCurve(to: CGPoint(x: 12.54, y: 3.1), controlPoint1: CGPoint(x: 13.74, y: 3.7), controlPoint2: CGPoint(x: 13.14, y: 3.4))
            shape8.addLine(to: CGPoint(x: 12.14, y: 0.5))
            shape8.addCurve(to: CGPoint(x: 11.74, y: 0), controlPoint1: CGPoint(x: 12.24, y: 0.2), controlPoint2: CGPoint(x: 11.94, y: 0))
            shape8.addLine(to: CGPoint(x: 7.74, y: 0))
            shape8.addCurve(to: CGPoint(x: 7.24, y: 0.4), controlPoint1: CGPoint(x: 7.54, y: 0), controlPoint2: CGPoint(x: 7.24, y: 0.2))
            shape8.addLine(to: CGPoint(x: 6.84, y: 3.1))
            shape8.addCurve(to: CGPoint(x: 5.14, y: 4.1), controlPoint1: CGPoint(x: 6.24, y: 3.3), controlPoint2: CGPoint(x: 5.74, y: 3.7))
            shape8.addLine(to: CGPoint(x: 2.74, y: 3.1))
            shape8.addCurve(to: CGPoint(x: 2.04, y: 3.3), controlPoint1: CGPoint(x: 2.44, y: 3), controlPoint2: CGPoint(x: 2.24, y: 3.1))
            shape8.addLine(to: CGPoint(x: 0.04, y: 6.8))
            shape8.addCurve(to: CGPoint(x: 0.24, y: 7.4), controlPoint1: CGPoint(x: -0.06, y: 6.9), controlPoint2: CGPoint(x: 0.04, y: 7.2))
            shape8.addLine(to: CGPoint(x: 2.34, y: 9))
            shape8.addCurve(to: CGPoint(x: 2.24, y: 10), controlPoint1: CGPoint(x: 2.34, y: 9.3), controlPoint2: CGPoint(x: 2.24, y: 9.6))
            shape8.addCurve(to: CGPoint(x: 2.34, y: 11), controlPoint1: CGPoint(x: 2.24, y: 10.4), controlPoint2: CGPoint(x: 2.24, y: 10.7))
            shape8.addLine(to: CGPoint(x: 0.24, y: 12.7))
            shape8.addCurve(to: CGPoint(x: 0.14, y: 13.3), controlPoint1: CGPoint(x: 0.04, y: 12.9), controlPoint2: CGPoint(x: 0.04, y: 13.1))
            shape8.addLine(to: CGPoint(x: 2.14, y: 16.8))
            shape8.addCurve(to: CGPoint(x: 2.74, y: 16.9), controlPoint1: CGPoint(x: 2.24, y: 16.9), controlPoint2: CGPoint(x: 2.44, y: 17))
            shape8.addLine(to: CGPoint(x: 5.24, y: 15.9))
            shape8.addCurve(to: CGPoint(x: 6.94, y: 16.9), controlPoint1: CGPoint(x: 5.74, y: 16.3), controlPoint2: CGPoint(x: 6.34, y: 16.6))
            shape8.addLine(to: CGPoint(x: 7.34, y: 19.5))
            shape8.addCurve(to: CGPoint(x: 7.84, y: 19.9), controlPoint1: CGPoint(x: 7.34, y: 19.7), controlPoint2: CGPoint(x: 7.54, y: 19.9))
            shape8.addLine(to: CGPoint(x: 11.84, y: 19.9))
            shape8.addCurve(to: CGPoint(x: 12.34, y: 19.5), controlPoint1: CGPoint(x: 12.04, y: 19.9), controlPoint2: CGPoint(x: 12.34, y: 19.7))
            shape8.addLine(to: CGPoint(x: 12.74, y: 16.9))
            shape8.addCurve(to: CGPoint(x: 14.44, y: 15.9), controlPoint1: CGPoint(x: 13.34, y: 16.6), controlPoint2: CGPoint(x: 13.94, y: 16.3))
            shape8.addLine(to: CGPoint(x: 16.94, y: 16.9))
            shape8.addCurve(to: CGPoint(x: 17.54, y: 16.7), controlPoint1: CGPoint(x: 17.14, y: 17), controlPoint2: CGPoint(x: 17.44, y: 16.9))
            shape8.addLine(to: CGPoint(x: 19.54, y: 13.2))
            shape8.addCurve(to: CGPoint(x: 19.44, y: 12.6), controlPoint1: CGPoint(x: 19.64, y: 13), controlPoint2: CGPoint(x: 19.64, y: 12.7))
            shape8.addLine(to: CGPoint(x: 17.14, y: 11))
            shape8.addLine(to: CGPoint(x: 17.14, y: 11))
            shape8.close()
            shape8.move(to: CGPoint(x: 9.74, y: 13.5))
            shape8.addCurve(to: CGPoint(x: 6.24, y: 10), controlPoint1: CGPoint(x: 7.84, y: 13.5), controlPoint2: CGPoint(x: 6.24, y: 11.9))
            shape8.addCurve(to: CGPoint(x: 9.74, y: 6.5), controlPoint1: CGPoint(x: 6.24, y: 8.1), controlPoint2: CGPoint(x: 7.84, y: 6.5))
            shape8.addCurve(to: CGPoint(x: 13.24, y: 10), controlPoint1: CGPoint(x: 11.64, y: 6.5), controlPoint2: CGPoint(x: 13.24, y: 8.1))
            shape8.addCurve(to: CGPoint(x: 9.74, y: 13.5), controlPoint1: CGPoint(x: 13.24, y: 11.9), controlPoint2: CGPoint(x: 11.64, y: 13.5))
            shape8.addLine(to: CGPoint(x: 9.74, y: 13.5))
            shape8.close()
            shape8.move(to: CGPoint(x: 9.74, y: 13.5))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            shape8.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape8.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings-power
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 278)
            
            /// Shape
            let shape9 = UIBezierPath()
            shape9.move(to: CGPoint(x: 3, y: 22))
            shape9.addLine(to: CGPoint(x: 5, y: 22))
            shape9.addLine(to: CGPoint(x: 5, y: 20))
            shape9.addLine(to: CGPoint(x: 3, y: 20))
            shape9.addLine(to: CGPoint(x: 3, y: 22))
            shape9.addLine(to: CGPoint(x: 3, y: 22))
            shape9.close()
            shape9.move(to: CGPoint(x: 7, y: 22))
            shape9.addLine(to: CGPoint(x: 9, y: 22))
            shape9.addLine(to: CGPoint(x: 9, y: 20))
            shape9.addLine(to: CGPoint(x: 7, y: 20))
            shape9.addLine(to: CGPoint(x: 7, y: 22))
            shape9.addLine(to: CGPoint(x: 7, y: 22))
            shape9.close()
            shape9.move(to: CGPoint(x: 9, y: 0))
            shape9.addLine(to: CGPoint(x: 7, y: 0))
            shape9.addLine(to: CGPoint(x: 7, y: 10))
            shape9.addLine(to: CGPoint(x: 9, y: 10))
            shape9.addLine(to: CGPoint(x: 9, y: 0))
            shape9.addLine(to: CGPoint(x: 9, y: 0))
            shape9.close()
            shape9.move(to: CGPoint(x: 12.6, y: 2.4))
            shape9.addLine(to: CGPoint(x: 11.2, y: 3.8))
            shape9.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 12.8, y: 4.9), controlPoint2: CGPoint(x: 14, y: 6.8))
            shape9.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 14, y: 12.3), controlPoint2: CGPoint(x: 11.3, y: 15))
            shape9.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 4.7, y: 15), controlPoint2: CGPoint(x: 2, y: 12.3))
            shape9.addCurve(to: CGPoint(x: 4.9, y: 3.9), controlPoint1: CGPoint(x: 2, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 4.9))
            shape9.addLine(to: CGPoint(x: 3.4, y: 2.4))
            shape9.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.4, y: 3.9), controlPoint2: CGPoint(x: 0, y: 6.3))
            shape9.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 0, y: 13.4), controlPoint2: CGPoint(x: 3.6, y: 17))
            shape9.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.4, y: 17), controlPoint2: CGPoint(x: 16, y: 13.4))
            shape9.addCurve(to: CGPoint(x: 12.6, y: 2.4), controlPoint1: CGPoint(x: 16, y: 6.3), controlPoint2: CGPoint(x: 14.6, y: 3.9))
            shape9.addLine(to: CGPoint(x: 12.6, y: 2.4))
            shape9.close()
            shape9.move(to: CGPoint(x: 11, y: 22))
            shape9.addLine(to: CGPoint(x: 13, y: 22))
            shape9.addLine(to: CGPoint(x: 13, y: 20))
            shape9.addLine(to: CGPoint(x: 11, y: 20))
            shape9.addLine(to: CGPoint(x: 11, y: 22))
            shape9.addLine(to: CGPoint(x: 11, y: 22))
            shape9.close()
            shape9.move(to: CGPoint(x: 11, y: 22))
            context.saveGState()
            shape9.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawAccountSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(white: 0.953, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 81))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Instellingen
            let instellingen = NSMutableAttributedString(string: "Instellingen")
            instellingen.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: instellingen.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                instellingen.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: instellingen.length))
            }
            context.saveGState()
            instellingen.draw(at: CGPoint(x: 129.5, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// Container
        let container = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 333, height: 543), cornerRadius: 4)
        context.saveGState()
        context.translateBy(x: 21, y: 110)
        context.saveGState()
        context.beginPath()
        context.addPath(container.cgPath)
        context.addRect(container.bounds.insetBy(dx: -8, dy: -8))
        context.clip(using: .evenOdd)
        context.translateBy(x: -342, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 342, y: 0)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.43).cgColor)
        }
        UIColor.black.setFill()
        container.fill()
        context.restoreGState()
        UIColor.white.setFill()
        container.fill()
        context.restoreGState()
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 130)
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 0.5, y: 1.5))
            line.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line.stroke()
            context.restoreGState()
            
            /// Name : Thomas de Lan
            let nameThomasDeLan = NSMutableAttributedString(string: "Name :       Thomas de Lange")
            nameThomasDeLan.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: nameThomasDeLan.length))
            context.saveGState()
            nameThomasDeLan.draw(at: CGPoint(x: 53, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 183)
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 0.5, y: 1.5))
            line2.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Email : delange.thom
            let emailDelangethom = NSMutableAttributedString(string: "Email :        delange.thomas@gmail.com")
            emailDelangethom.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: emailDelangethom.length))
            context.saveGState()
            emailDelangethom.draw(at: CGPoint(x: 54, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 234)
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 0.5, y: 1.5))
            line3.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// Gender :
            let gender = NSMutableAttributedString(string: "Gender : ")
            gender.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: gender.length))
            context.saveGState()
            gender.draw(at: CGPoint(x: 42, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 288)
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 0.5, y: 1.5))
            line4.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line4.stroke()
            context.restoreGState()
            
            /// Birthday :
            let birthday = NSMutableAttributedString(string: "Birthday :")
            birthday.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: birthday.length))
            context.saveGState()
            birthday.draw(at: CGPoint(x: 39, y: 0))
            context.restoreGState()
            
            /// 14 Aug 2017
            let _14Aug2017 = NSMutableAttributedString(string: "14 Aug 2017")
            _14Aug2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: _14Aug2017.length))
            context.saveGState()
            _14Aug2017.draw(at: CGPoint(x: 125, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 341)
            
            /// Line
            let line5 = UIBezierPath()
            line5.move(to: CGPoint(x: 0.5, y: 1.5))
            line5.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line5.lineCapStyle = .square
            line5.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line5.stroke()
            context.restoreGState()
            
            /// City :
            let city = NSMutableAttributedString(string: "City :")
            city.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: city.length))
            context.saveGState()
            city.draw(at: CGPoint(x: 67, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Stad
        let stad = NSMutableAttributedString(string: "Stad")
        stad.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: stad.length))
        context.saveGState()
        stad.draw(at: CGPoint(x: 148, y: 344))
        context.restoreGState()
        /// M
        let m = NSMutableAttributedString(string: "M")
        m.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: m.length))
        context.saveGState()
        m.draw(at: CGPoint(x: 144, y: 234))
        context.restoreGState()
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 395)
            
            /// Line
            let line6 = UIBezierPath()
            line6.move(to: CGPoint(x: 0.5, y: 1.5))
            line6.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line6.lineCapStyle = .square
            line6.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line6.stroke()
            context.restoreGState()
            
            /// Address :
            let address = NSMutableAttributedString(string: "Address  :")
            address.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: address.length))
            context.saveGState()
            address.draw(at: CGPoint(x: 38, y: 0))
            context.restoreGState()
            
            /// Straatnaam
            let straatnaam = NSMutableAttributedString(string: "Straatnaam")
            straatnaam.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: straatnaam.length))
            context.saveGState()
            straatnaam.draw(at: CGPoint(x: 127, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 448)
            
            /// Line
            let line7 = UIBezierPath()
            line7.move(to: CGPoint(x: 0.5, y: 1.5))
            line7.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line7.lineCapStyle = .square
            line7.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line7.stroke()
            context.restoreGState()
            
            /// Group :
            let group = NSMutableAttributedString(string: "Group  :")
            group.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: group.length))
            context.saveGState()
            group.draw(at: CGPoint(x: 52, y: 0))
            context.restoreGState()
            
            /// MijnGroep
            let mijnGroep = NSMutableAttributedString(string: "MijnGroep ")
            mijnGroep.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: mijnGroep.length))
            context.saveGState()
            mijnGroep.draw(at: CGPoint(x: 128, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 497)
            
            /// Line
            let line8 = UIBezierPath()
            line8.move(to: CGPoint(x: 0.5, y: 1.5))
            line8.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line8.lineCapStyle = .square
            line8.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line8.stroke()
            context.restoreGState()
            
            /// Administrator :
            let administrator = NSMutableAttributedString(string: "Administrator  :")
            administrator.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: administrator.length))
            context.saveGState()
            administrator.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// Yes
            let yes = NSMutableAttributedString(string: "Yes ")
            yes.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: yes.length))
            context.saveGState()
            yes.draw(at: CGPoint(x: 128, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Btn
        do {
            context.saveGState()
            context.translateBy(x: 71, y: 601)
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 234, height: 44), cornerRadius: 3)
            context.saveGState()
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Aanpassen
            let aanpassen = NSMutableAttributedString(string: "Aanpassen")
            aanpassen.addAttribute(.font, value: UIFont(name: "HelveticaNeue-Bold", size: 14)!, range: NSRange(location: 0, length: aanpassen.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aanpassen.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: aanpassen.length))
            }
            context.saveGState()
            aanpassen.draw(at: CGPoint(x: 80, y: 12))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawAccountSettingsMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(white: 0.953, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 81))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Instellingen
            let instellingen = NSMutableAttributedString(string: "Instellingen")
            instellingen.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: instellingen.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                instellingen.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: instellingen.length))
            }
            context.saveGState()
            instellingen.draw(at: CGPoint(x: 129.5, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// Container
        let container = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 333, height: 543), cornerRadius: 4)
        context.saveGState()
        context.translateBy(x: 21, y: 110)
        context.saveGState()
        context.beginPath()
        context.addPath(container.cgPath)
        context.addRect(container.bounds.insetBy(dx: -8, dy: -8))
        context.clip(using: .evenOdd)
        context.translateBy(x: -342, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 342, y: 0)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.43).cgColor)
        }
        UIColor.black.setFill()
        container.fill()
        context.restoreGState()
        UIColor.white.setFill()
        container.fill()
        context.restoreGState()
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 130)
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 0.5, y: 1.5))
            line.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line.stroke()
            context.restoreGState()
            
            /// Name : Thomas de Lan
            let nameThomasDeLan = NSMutableAttributedString(string: "Name :       Thomas de Lange")
            nameThomasDeLan.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: nameThomasDeLan.length))
            context.saveGState()
            nameThomasDeLan.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 183)
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 0.5, y: 1.5))
            line2.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Email : delange.thom
            let emailDelangethom = NSMutableAttributedString(string: "Email :        delange.thomas@gmail.com")
            emailDelangethom.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: emailDelangethom.length))
            context.saveGState()
            emailDelangethom.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 234)
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 0.5, y: 1.5))
            line3.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// Gender :
            let gender = NSMutableAttributedString(string: "Gender : ")
            gender.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: gender.length))
            context.saveGState()
            gender.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 288)
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 0.5, y: 1.5))
            line4.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line4.stroke()
            context.restoreGState()
            
            /// Birthday :
            let birthday = NSMutableAttributedString(string: "Birthday :")
            birthday.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: birthday.length))
            context.saveGState()
            birthday.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            /// 14 Aug 2017
            let _14Aug2017 = NSMutableAttributedString(string: "14 Aug 2017")
            _14Aug2017.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: _14Aug2017.length))
            context.saveGState()
            _14Aug2017.draw(at: CGPoint(x: 99, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 341)
            
            /// Line
            let line5 = UIBezierPath()
            line5.move(to: CGPoint(x: 0.5, y: 1.5))
            line5.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line5.lineCapStyle = .square
            line5.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line5.stroke()
            context.restoreGState()
            
            /// City :
            let city = NSMutableAttributedString(string: "City :")
            city.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: city.length))
            context.saveGState()
            city.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 395)
            
            /// Line
            let line6 = UIBezierPath()
            line6.move(to: CGPoint(x: 0.5, y: 1.5))
            line6.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line6.lineCapStyle = .square
            line6.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line6.stroke()
            context.restoreGState()
            
            /// Address :
            let address = NSMutableAttributedString(string: "Address  :")
            address.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: address.length))
            context.saveGState()
            address.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            /// Straatnaam
            let straatnaam = NSMutableAttributedString(string: "Straatnaam")
            straatnaam.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: straatnaam.length))
            context.saveGState()
            straatnaam.draw(at: CGPoint(x: 98, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Section
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 448)
            
            /// Line
            let line7 = UIBezierPath()
            line7.move(to: CGPoint(x: 0.5, y: 1.5))
            line7.addLine(to: CGPoint(x: 332.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 35)
            line7.lineCapStyle = .square
            line7.lineWidth = 1
            UIColor(white: 0.592, alpha: 0.17).setStroke()
            line7.stroke()
            context.restoreGState()
            
            /// Group:
            let group = NSMutableAttributedString(string: "Group:")
            group.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: group.length))
            context.saveGState()
            group.draw(at: CGPoint(x: 26, y: 0))
            context.restoreGState()
            
            /// MijnGroep
            let mijnGroep = NSMutableAttributedString(string: "MijnGroep ")
            mijnGroep.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: mijnGroep.length))
            context.saveGState()
            mijnGroep.draw(at: CGPoint(x: 99, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Btn
        do {
            context.saveGState()
            context.translateBy(x: 71, y: 601)
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 234, height: 44), cornerRadius: 3)
            context.saveGState()
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Aanpassen
            let aanpassen = NSMutableAttributedString(string: "Aanpassen")
            aanpassen.addAttribute(.font, value: UIFont(name: "HelveticaNeue-Bold", size: 14)!, range: NSRange(location: 0, length: aanpassen.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aanpassen.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: aanpassen.length))
            }
            context.saveGState()
            aanpassen.draw(at: CGPoint(x: 80, y: 12))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Menu
        // Warning: New symbols are not supported.
        /// notifications-on
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 90)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 5.6, y: 1.6))
            shape.addLine(to: CGPoint(x: 4.2, y: 0.2))
            shape.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.8, y: 2), controlPoint2: CGPoint(x: 0.2, y: 4.8))
            shape.addLine(to: CGPoint(x: 2, y: 8))
            shape.addCurve(to: CGPoint(x: 5.6, y: 1.6), controlPoint1: CGPoint(x: 2.2, y: 5.3), controlPoint2: CGPoint(x: 3.5, y: 3))
            shape.addLine(to: CGPoint(x: 5.6, y: 1.6))
            shape.close()
            shape.move(to: CGPoint(x: 19, y: 8))
            shape.addLine(to: CGPoint(x: 21, y: 8))
            shape.addCurve(to: CGPoint(x: 16.9, y: 0.2), controlPoint1: CGPoint(x: 20.8, y: 4.8), controlPoint2: CGPoint(x: 19.3, y: 2))
            shape.addLine(to: CGPoint(x: 15.5, y: 1.6))
            shape.addCurve(to: CGPoint(x: 19, y: 8), controlPoint1: CGPoint(x: 17.5, y: 3), controlPoint2: CGPoint(x: 18.8, y: 5.3))
            shape.addLine(to: CGPoint(x: 19, y: 8))
            shape.close()
            shape.move(to: CGPoint(x: 17, y: 8.5))
            shape.addCurve(to: CGPoint(x: 12, y: 2.2), controlPoint1: CGPoint(x: 17, y: 5.4), controlPoint2: CGPoint(x: 14.9, y: 2.9))
            shape.addLine(to: CGPoint(x: 12, y: 1.5))
            shape.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.7), controlPoint2: CGPoint(x: 11.3, y: 0))
            shape.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 9.7, y: 0), controlPoint2: CGPoint(x: 9, y: 0.7))
            shape.addLine(to: CGPoint(x: 9, y: 2.2))
            shape.addCurve(to: CGPoint(x: 4, y: 8.5), controlPoint1: CGPoint(x: 6.1, y: 2.9), controlPoint2: CGPoint(x: 4, y: 5.4))
            shape.addLine(to: CGPoint(x: 4, y: 14))
            shape.addLine(to: CGPoint(x: 2, y: 16))
            shape.addLine(to: CGPoint(x: 2, y: 17))
            shape.addLine(to: CGPoint(x: 19, y: 17))
            shape.addLine(to: CGPoint(x: 19, y: 16))
            shape.addLine(to: CGPoint(x: 17, y: 14))
            shape.addLine(to: CGPoint(x: 17, y: 8.5))
            shape.addLine(to: CGPoint(x: 17, y: 8.5))
            shape.close()
            shape.move(to: CGPoint(x: 10.5, y: 20))
            shape.addLine(to: CGPoint(x: 10.9, y: 20))
            shape.addCurve(to: CGPoint(x: 12.3, y: 18.8), controlPoint1: CGPoint(x: 11.6, y: 19.9), controlPoint2: CGPoint(x: 12.1, y: 19.4))
            shape.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 12.4, y: 18.6), controlPoint2: CGPoint(x: 12.5, y: 18.3))
            shape.addLine(to: CGPoint(x: 8.5, y: 18))
            shape.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 8.5, y: 19.1), controlPoint2: CGPoint(x: 9.4, y: 20))
            shape.addLine(to: CGPoint(x: 10.5, y: 20))
            shape.close()
            shape.move(to: CGPoint(x: 10.5, y: 20))
            context.saveGState()
            shape.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// event 2
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 149)
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 14, y: 11))
            shape2.addLine(to: CGPoint(x: 9, y: 11))
            shape2.addLine(to: CGPoint(x: 9, y: 16))
            shape2.addLine(to: CGPoint(x: 14, y: 16))
            shape2.addLine(to: CGPoint(x: 14, y: 11))
            shape2.addLine(to: CGPoint(x: 14, y: 11))
            shape2.close()
            shape2.move(to: CGPoint(x: 13, y: 0))
            shape2.addLine(to: CGPoint(x: 13, y: 2))
            shape2.addLine(to: CGPoint(x: 5, y: 2))
            shape2.addLine(to: CGPoint(x: 5, y: 0))
            shape2.addLine(to: CGPoint(x: 3, y: 0))
            shape2.addLine(to: CGPoint(x: 3, y: 2))
            shape2.addLine(to: CGPoint(x: 2, y: 2))
            shape2.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
            shape2.addLine(to: CGPoint(x: 0, y: 18))
            shape2.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape2.addLine(to: CGPoint(x: 16, y: 20))
            shape2.addCurve(to: CGPoint(x: 18, y: 18), controlPoint1: CGPoint(x: 17.1, y: 20), controlPoint2: CGPoint(x: 18, y: 19.1))
            shape2.addLine(to: CGPoint(x: 18, y: 4))
            shape2.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
            shape2.addLine(to: CGPoint(x: 15, y: 2))
            shape2.addLine(to: CGPoint(x: 15, y: 0))
            shape2.addLine(to: CGPoint(x: 13, y: 0))
            shape2.addLine(to: CGPoint(x: 13, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 16, y: 18))
            shape2.addLine(to: CGPoint(x: 2, y: 18))
            shape2.addLine(to: CGPoint(x: 2, y: 7))
            shape2.addLine(to: CGPoint(x: 16, y: 7))
            shape2.addLine(to: CGPoint(x: 16, y: 18))
            shape2.addLine(to: CGPoint(x: 16, y: 18))
            shape2.close()
            shape2.move(to: CGPoint(x: 16, y: 18))
            context.saveGState()
            shape2.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 213)
            
            /// Shape
            let shape3 = UIBezierPath()
            shape3.move(to: CGPoint(x: 17.14, y: 11))
            shape3.addCurve(to: CGPoint(x: 17.24, y: 10), controlPoint1: CGPoint(x: 17.14, y: 10.7), controlPoint2: CGPoint(x: 17.24, y: 10.4))
            shape3.addCurve(to: CGPoint(x: 17.14, y: 9), controlPoint1: CGPoint(x: 17.24, y: 9.6), controlPoint2: CGPoint(x: 17.24, y: 9.3))
            shape3.addLine(to: CGPoint(x: 19.24, y: 7.3))
            shape3.addCurve(to: CGPoint(x: 19.34, y: 6.7), controlPoint1: CGPoint(x: 19.44, y: 7.1), controlPoint2: CGPoint(x: 19.44, y: 6.9))
            shape3.addLine(to: CGPoint(x: 17.34, y: 3.2))
            shape3.addCurve(to: CGPoint(x: 16.74, y: 3.1), controlPoint1: CGPoint(x: 17.24, y: 3.1), controlPoint2: CGPoint(x: 17.04, y: 3))
            shape3.addLine(to: CGPoint(x: 14.24, y: 4.1))
            shape3.addCurve(to: CGPoint(x: 12.54, y: 3.1), controlPoint1: CGPoint(x: 13.74, y: 3.7), controlPoint2: CGPoint(x: 13.14, y: 3.4))
            shape3.addLine(to: CGPoint(x: 12.14, y: 0.5))
            shape3.addCurve(to: CGPoint(x: 11.74, y: 0), controlPoint1: CGPoint(x: 12.24, y: 0.2), controlPoint2: CGPoint(x: 11.94, y: 0))
            shape3.addLine(to: CGPoint(x: 7.74, y: 0))
            shape3.addCurve(to: CGPoint(x: 7.24, y: 0.4), controlPoint1: CGPoint(x: 7.54, y: 0), controlPoint2: CGPoint(x: 7.24, y: 0.2))
            shape3.addLine(to: CGPoint(x: 6.84, y: 3.1))
            shape3.addCurve(to: CGPoint(x: 5.14, y: 4.1), controlPoint1: CGPoint(x: 6.24, y: 3.3), controlPoint2: CGPoint(x: 5.74, y: 3.7))
            shape3.addLine(to: CGPoint(x: 2.74, y: 3.1))
            shape3.addCurve(to: CGPoint(x: 2.04, y: 3.3), controlPoint1: CGPoint(x: 2.44, y: 3), controlPoint2: CGPoint(x: 2.24, y: 3.1))
            shape3.addLine(to: CGPoint(x: 0.04, y: 6.8))
            shape3.addCurve(to: CGPoint(x: 0.24, y: 7.4), controlPoint1: CGPoint(x: -0.06, y: 6.9), controlPoint2: CGPoint(x: 0.04, y: 7.2))
            shape3.addLine(to: CGPoint(x: 2.34, y: 9))
            shape3.addCurve(to: CGPoint(x: 2.24, y: 10), controlPoint1: CGPoint(x: 2.34, y: 9.3), controlPoint2: CGPoint(x: 2.24, y: 9.6))
            shape3.addCurve(to: CGPoint(x: 2.34, y: 11), controlPoint1: CGPoint(x: 2.24, y: 10.4), controlPoint2: CGPoint(x: 2.24, y: 10.7))
            shape3.addLine(to: CGPoint(x: 0.24, y: 12.7))
            shape3.addCurve(to: CGPoint(x: 0.14, y: 13.3), controlPoint1: CGPoint(x: 0.04, y: 12.9), controlPoint2: CGPoint(x: 0.04, y: 13.1))
            shape3.addLine(to: CGPoint(x: 2.14, y: 16.8))
            shape3.addCurve(to: CGPoint(x: 2.74, y: 16.9), controlPoint1: CGPoint(x: 2.24, y: 16.9), controlPoint2: CGPoint(x: 2.44, y: 17))
            shape3.addLine(to: CGPoint(x: 5.24, y: 15.9))
            shape3.addCurve(to: CGPoint(x: 6.94, y: 16.9), controlPoint1: CGPoint(x: 5.74, y: 16.3), controlPoint2: CGPoint(x: 6.34, y: 16.6))
            shape3.addLine(to: CGPoint(x: 7.34, y: 19.5))
            shape3.addCurve(to: CGPoint(x: 7.84, y: 19.9), controlPoint1: CGPoint(x: 7.34, y: 19.7), controlPoint2: CGPoint(x: 7.54, y: 19.9))
            shape3.addLine(to: CGPoint(x: 11.84, y: 19.9))
            shape3.addCurve(to: CGPoint(x: 12.34, y: 19.5), controlPoint1: CGPoint(x: 12.04, y: 19.9), controlPoint2: CGPoint(x: 12.34, y: 19.7))
            shape3.addLine(to: CGPoint(x: 12.74, y: 16.9))
            shape3.addCurve(to: CGPoint(x: 14.44, y: 15.9), controlPoint1: CGPoint(x: 13.34, y: 16.6), controlPoint2: CGPoint(x: 13.94, y: 16.3))
            shape3.addLine(to: CGPoint(x: 16.94, y: 16.9))
            shape3.addCurve(to: CGPoint(x: 17.54, y: 16.7), controlPoint1: CGPoint(x: 17.14, y: 17), controlPoint2: CGPoint(x: 17.44, y: 16.9))
            shape3.addLine(to: CGPoint(x: 19.54, y: 13.2))
            shape3.addCurve(to: CGPoint(x: 19.44, y: 12.6), controlPoint1: CGPoint(x: 19.64, y: 13), controlPoint2: CGPoint(x: 19.64, y: 12.7))
            shape3.addLine(to: CGPoint(x: 17.14, y: 11))
            shape3.addLine(to: CGPoint(x: 17.14, y: 11))
            shape3.close()
            shape3.move(to: CGPoint(x: 9.74, y: 13.5))
            shape3.addCurve(to: CGPoint(x: 6.24, y: 10), controlPoint1: CGPoint(x: 7.84, y: 13.5), controlPoint2: CGPoint(x: 6.24, y: 11.9))
            shape3.addCurve(to: CGPoint(x: 9.74, y: 6.5), controlPoint1: CGPoint(x: 6.24, y: 8.1), controlPoint2: CGPoint(x: 7.84, y: 6.5))
            shape3.addCurve(to: CGPoint(x: 13.24, y: 10), controlPoint1: CGPoint(x: 11.64, y: 6.5), controlPoint2: CGPoint(x: 13.24, y: 8.1))
            shape3.addCurve(to: CGPoint(x: 9.74, y: 13.5), controlPoint1: CGPoint(x: 13.24, y: 11.9), controlPoint2: CGPoint(x: 11.64, y: 13.5))
            shape3.addLine(to: CGPoint(x: 9.74, y: 13.5))
            shape3.close()
            shape3.move(to: CGPoint(x: 9.74, y: 13.5))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            shape3.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings-power
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 278)
            
            /// Shape
            let shape4 = UIBezierPath()
            shape4.move(to: CGPoint(x: 3, y: 22))
            shape4.addLine(to: CGPoint(x: 5, y: 22))
            shape4.addLine(to: CGPoint(x: 5, y: 20))
            shape4.addLine(to: CGPoint(x: 3, y: 20))
            shape4.addLine(to: CGPoint(x: 3, y: 22))
            shape4.addLine(to: CGPoint(x: 3, y: 22))
            shape4.close()
            shape4.move(to: CGPoint(x: 7, y: 22))
            shape4.addLine(to: CGPoint(x: 9, y: 22))
            shape4.addLine(to: CGPoint(x: 9, y: 20))
            shape4.addLine(to: CGPoint(x: 7, y: 20))
            shape4.addLine(to: CGPoint(x: 7, y: 22))
            shape4.addLine(to: CGPoint(x: 7, y: 22))
            shape4.close()
            shape4.move(to: CGPoint(x: 9, y: 0))
            shape4.addLine(to: CGPoint(x: 7, y: 0))
            shape4.addLine(to: CGPoint(x: 7, y: 10))
            shape4.addLine(to: CGPoint(x: 9, y: 10))
            shape4.addLine(to: CGPoint(x: 9, y: 0))
            shape4.addLine(to: CGPoint(x: 9, y: 0))
            shape4.close()
            shape4.move(to: CGPoint(x: 12.6, y: 2.4))
            shape4.addLine(to: CGPoint(x: 11.2, y: 3.8))
            shape4.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 12.8, y: 4.9), controlPoint2: CGPoint(x: 14, y: 6.8))
            shape4.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 14, y: 12.3), controlPoint2: CGPoint(x: 11.3, y: 15))
            shape4.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 4.7, y: 15), controlPoint2: CGPoint(x: 2, y: 12.3))
            shape4.addCurve(to: CGPoint(x: 4.9, y: 3.9), controlPoint1: CGPoint(x: 2, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 4.9))
            shape4.addLine(to: CGPoint(x: 3.4, y: 2.4))
            shape4.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.4, y: 3.9), controlPoint2: CGPoint(x: 0, y: 6.3))
            shape4.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 0, y: 13.4), controlPoint2: CGPoint(x: 3.6, y: 17))
            shape4.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.4, y: 17), controlPoint2: CGPoint(x: 16, y: 13.4))
            shape4.addCurve(to: CGPoint(x: 12.6, y: 2.4), controlPoint1: CGPoint(x: 16, y: 6.3), controlPoint2: CGPoint(x: 14.6, y: 3.9))
            shape4.addLine(to: CGPoint(x: 12.6, y: 2.4))
            shape4.close()
            shape4.move(to: CGPoint(x: 11, y: 22))
            shape4.addLine(to: CGPoint(x: 13, y: 22))
            shape4.addLine(to: CGPoint(x: 13, y: 20))
            shape4.addLine(to: CGPoint(x: 11, y: 20))
            shape4.addLine(to: CGPoint(x: 11, y: 22))
            shape4.addLine(to: CGPoint(x: 11, y: 22))
            shape4.close()
            shape4.move(to: CGPoint(x: 11, y: 22))
            context.saveGState()
            shape4.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRekening(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bg
        // Warning: New symbols are not supported.
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 475))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Balans Van de Rekeni
        let balansVanDeRekeni = NSMutableAttributedString(string: "Balans Van de Rekening\n")
        balansVanDeRekeni.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: balansVanDeRekeni.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            balansVanDeRekeni.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: balansVanDeRekeni.length))
        }
        context.saveGState()
        balansVanDeRekeni.draw(in: CGRect(x: 88, y: 116, width: 200, height: 27))
        context.restoreGState()
        /// Uw huidige schuld
        let uwHuidigeSchuld = NSMutableAttributedString(string: " Uw huidige schuld\n")
        uwHuidigeSchuld.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: uwHuidigeSchuld.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            uwHuidigeSchuld.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: uwHuidigeSchuld.length))
        }
        context.saveGState()
        uwHuidigeSchuld.draw(in: CGRect(x: 88, y: 245, width: 200, height: 27))
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Groeps Rekening
            let groepsRekening = NSMutableAttributedString(string: "Groeps Rekening")
            groepsRekening.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: groepsRekening.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                groepsRekening.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: groepsRekening.length))
            }
            context.saveGState()
            groepsRekening.draw(at: CGPoint(x: 112, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// $-56.50
        let _5650 = NSMutableAttributedString(string: "$-56.50\n")
        _5650.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 72)!, range: NSRange(location: 0, length: _5650.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5650.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5650.length))
        }
        context.saveGState()
        _5650.draw(in: CGRect(x: 0, y: 269, width: 375, height: 101))
        context.restoreGState()
        /// $679.00
        let _67900 = NSMutableAttributedString(string: "$679.00")
        _67900.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 72)!, range: NSRange(location: 0, length: _67900.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _67900.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _67900.length))
        }
        context.saveGState()
        _67900.draw(in: CGRect(x: 0, y: 154, width: 375, height: 101))
        context.restoreGState()
        /// Buttons/Primary
        // Warning: New symbols are not supported.
        /// Top_menu
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 424)
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 51))
            context.saveGState()
            UIColor(white: 0, alpha: 0.15).setFill()
            rectangle4.fill()
            context.restoreGState()
            
            /// iDeal
            let iDeal = NSMutableAttributedString(string: "iDeal")
            iDeal.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 14)!, range: NSRange(location: 0, length: iDeal.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                iDeal.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: iDeal.length))
            }
            context.saveGState()
            iDeal.draw(in: CGRect(x: 0, y: 16, width: 90, height: 20))
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint.zero)
            rectangle2.addLine(to: CGPoint(x: 50, y: 0))
            rectangle2.addLine(to: CGPoint(x: 50, y: 3))
            rectangle2.addLine(to: CGPoint(x: 0, y: 3))
            rectangle2.addLine(to: CGPoint.zero)
            rectangle2.close()
            rectangle2.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 20, y: 48)
            rectangle2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.addRect(rectangle2.bounds.insetBy(dx: -3, dy: -4))
            context.clip(using: .evenOdd)
            context.translateBy(x: -54, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 54, y: -1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.453, saturation: 0.772, brightness: 0.755, alpha: 0.6).cgColor)
            }
            UIColor.black.setFill()
            rectangle2.fill()
            context.restoreGState()
            rectangle2.usesEvenOddFillRule = true
            UIColor(hue: 0.453, saturation: 0.772, brightness: 0.755, alpha: 1).setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// Credit Card
            let creditCard = NSMutableAttributedString(string: "Credit Card")
            creditCard.addAttribute(.font, value: UIFont(name: "SourceSansPro-Regular", size: 14)!, range: NSRange(location: 0, length: creditCard.length))
            creditCard.addAttribute(.kern, value: 0.19, range: NSRange(location: 0, length: creditCard.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                creditCard.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: creditCard.length))
            }
            context.saveGState()
            creditCard.draw(in: CGRect(x: 91, y: 16, width: 105, height: 20))
            context.restoreGState()
            
            /// PayPal
            let payPal = NSMutableAttributedString(string: "PayPal")
            payPal.addAttribute(.font, value: UIFont(name: "SourceSansPro-Regular", size: 14)!, range: NSRange(location: 0, length: payPal.length))
            payPal.addAttribute(.kern, value: 0.19, range: NSRange(location: 0, length: payPal.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                payPal.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: payPal.length))
            }
            context.saveGState()
            payPal.draw(in: CGRect(x: 197, y: 16, width: 80, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRekeningMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bg
        // Warning: New symbols are not supported.
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 475))
        context.saveGState()
        UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Balans Van de Rekeni
        let balansVanDeRekeni = NSMutableAttributedString(string: "Balans Van de Rekening\n")
        balansVanDeRekeni.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: balansVanDeRekeni.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            balansVanDeRekeni.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: balansVanDeRekeni.length))
        }
        context.saveGState()
        balansVanDeRekeni.draw(in: CGRect(x: 88, y: 116, width: 200, height: 27))
        context.restoreGState()
        /// Uw huidige schuld
        let uwHuidigeSchuld = NSMutableAttributedString(string: " Uw huidige schuld\n")
        uwHuidigeSchuld.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: uwHuidigeSchuld.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            uwHuidigeSchuld.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: uwHuidigeSchuld.length))
        }
        context.saveGState()
        uwHuidigeSchuld.draw(in: CGRect(x: 88, y: 245, width: 200, height: 27))
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 35)
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Groeps Rekening
            let groepsRekening = NSMutableAttributedString(string: "Groeps Rekening")
            groepsRekening.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: groepsRekening.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                groepsRekening.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: groepsRekening.length))
            }
            context.saveGState()
            groepsRekening.draw(at: CGPoint(x: 112, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Bars/Status/White
        // Warning: New symbols are not supported.
        /// $-56.50
        let _5650 = NSMutableAttributedString(string: "$-56.50\n")
        _5650.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 72)!, range: NSRange(location: 0, length: _5650.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5650.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5650.length))
        }
        context.saveGState()
        _5650.draw(in: CGRect(x: 0, y: 269, width: 375, height: 101))
        context.restoreGState()
        /// $679.00
        let _67900 = NSMutableAttributedString(string: "$679.00")
        _67900.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 72)!, range: NSRange(location: 0, length: _67900.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _67900.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _67900.length))
        }
        context.saveGState()
        _67900.draw(in: CGRect(x: 0, y: 154, width: 375, height: 101))
        context.restoreGState()
        /// Menu
        // Warning: New symbols are not supported.
        /// settings-power
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 278)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 3, y: 22))
            shape.addLine(to: CGPoint(x: 5, y: 22))
            shape.addLine(to: CGPoint(x: 5, y: 20))
            shape.addLine(to: CGPoint(x: 3, y: 20))
            shape.addLine(to: CGPoint(x: 3, y: 22))
            shape.addLine(to: CGPoint(x: 3, y: 22))
            shape.close()
            shape.move(to: CGPoint(x: 7, y: 22))
            shape.addLine(to: CGPoint(x: 9, y: 22))
            shape.addLine(to: CGPoint(x: 9, y: 20))
            shape.addLine(to: CGPoint(x: 7, y: 20))
            shape.addLine(to: CGPoint(x: 7, y: 22))
            shape.addLine(to: CGPoint(x: 7, y: 22))
            shape.close()
            shape.move(to: CGPoint(x: 9, y: 0))
            shape.addLine(to: CGPoint(x: 7, y: 0))
            shape.addLine(to: CGPoint(x: 7, y: 10))
            shape.addLine(to: CGPoint(x: 9, y: 10))
            shape.addLine(to: CGPoint(x: 9, y: 0))
            shape.addLine(to: CGPoint(x: 9, y: 0))
            shape.close()
            shape.move(to: CGPoint(x: 12.6, y: 2.4))
            shape.addLine(to: CGPoint(x: 11.2, y: 3.8))
            shape.addCurve(to: CGPoint(x: 14, y: 9), controlPoint1: CGPoint(x: 12.8, y: 4.9), controlPoint2: CGPoint(x: 14, y: 6.8))
            shape.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 14, y: 12.3), controlPoint2: CGPoint(x: 11.3, y: 15))
            shape.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 4.7, y: 15), controlPoint2: CGPoint(x: 2, y: 12.3))
            shape.addCurve(to: CGPoint(x: 4.9, y: 3.9), controlPoint1: CGPoint(x: 2, y: 6.8), controlPoint2: CGPoint(x: 3.2, y: 4.9))
            shape.addLine(to: CGPoint(x: 3.4, y: 2.4))
            shape.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.4, y: 3.9), controlPoint2: CGPoint(x: 0, y: 6.3))
            shape.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 0, y: 13.4), controlPoint2: CGPoint(x: 3.6, y: 17))
            shape.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.4, y: 17), controlPoint2: CGPoint(x: 16, y: 13.4))
            shape.addCurve(to: CGPoint(x: 12.6, y: 2.4), controlPoint1: CGPoint(x: 16, y: 6.3), controlPoint2: CGPoint(x: 14.6, y: 3.9))
            shape.addLine(to: CGPoint(x: 12.6, y: 2.4))
            shape.close()
            shape.move(to: CGPoint(x: 11, y: 22))
            shape.addLine(to: CGPoint(x: 13, y: 22))
            shape.addLine(to: CGPoint(x: 13, y: 20))
            shape.addLine(to: CGPoint(x: 11, y: 20))
            shape.addLine(to: CGPoint(x: 11, y: 22))
            shape.addLine(to: CGPoint(x: 11, y: 22))
            shape.close()
            shape.move(to: CGPoint(x: 11, y: 22))
            context.saveGState()
            shape.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// settings
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 213)
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 17.14, y: 11))
            shape2.addCurve(to: CGPoint(x: 17.24, y: 10), controlPoint1: CGPoint(x: 17.14, y: 10.7), controlPoint2: CGPoint(x: 17.24, y: 10.4))
            shape2.addCurve(to: CGPoint(x: 17.14, y: 9), controlPoint1: CGPoint(x: 17.24, y: 9.6), controlPoint2: CGPoint(x: 17.24, y: 9.3))
            shape2.addLine(to: CGPoint(x: 19.24, y: 7.3))
            shape2.addCurve(to: CGPoint(x: 19.34, y: 6.7), controlPoint1: CGPoint(x: 19.44, y: 7.1), controlPoint2: CGPoint(x: 19.44, y: 6.9))
            shape2.addLine(to: CGPoint(x: 17.34, y: 3.2))
            shape2.addCurve(to: CGPoint(x: 16.74, y: 3.1), controlPoint1: CGPoint(x: 17.24, y: 3.1), controlPoint2: CGPoint(x: 17.04, y: 3))
            shape2.addLine(to: CGPoint(x: 14.24, y: 4.1))
            shape2.addCurve(to: CGPoint(x: 12.54, y: 3.1), controlPoint1: CGPoint(x: 13.74, y: 3.7), controlPoint2: CGPoint(x: 13.14, y: 3.4))
            shape2.addLine(to: CGPoint(x: 12.14, y: 0.5))
            shape2.addCurve(to: CGPoint(x: 11.74, y: 0), controlPoint1: CGPoint(x: 12.24, y: 0.2), controlPoint2: CGPoint(x: 11.94, y: 0))
            shape2.addLine(to: CGPoint(x: 7.74, y: 0))
            shape2.addCurve(to: CGPoint(x: 7.24, y: 0.4), controlPoint1: CGPoint(x: 7.54, y: 0), controlPoint2: CGPoint(x: 7.24, y: 0.2))
            shape2.addLine(to: CGPoint(x: 6.84, y: 3.1))
            shape2.addCurve(to: CGPoint(x: 5.14, y: 4.1), controlPoint1: CGPoint(x: 6.24, y: 3.3), controlPoint2: CGPoint(x: 5.74, y: 3.7))
            shape2.addLine(to: CGPoint(x: 2.74, y: 3.1))
            shape2.addCurve(to: CGPoint(x: 2.04, y: 3.3), controlPoint1: CGPoint(x: 2.44, y: 3), controlPoint2: CGPoint(x: 2.24, y: 3.1))
            shape2.addLine(to: CGPoint(x: 0.04, y: 6.8))
            shape2.addCurve(to: CGPoint(x: 0.24, y: 7.4), controlPoint1: CGPoint(x: -0.06, y: 6.9), controlPoint2: CGPoint(x: 0.04, y: 7.2))
            shape2.addLine(to: CGPoint(x: 2.34, y: 9))
            shape2.addCurve(to: CGPoint(x: 2.24, y: 10), controlPoint1: CGPoint(x: 2.34, y: 9.3), controlPoint2: CGPoint(x: 2.24, y: 9.6))
            shape2.addCurve(to: CGPoint(x: 2.34, y: 11), controlPoint1: CGPoint(x: 2.24, y: 10.4), controlPoint2: CGPoint(x: 2.24, y: 10.7))
            shape2.addLine(to: CGPoint(x: 0.24, y: 12.7))
            shape2.addCurve(to: CGPoint(x: 0.14, y: 13.3), controlPoint1: CGPoint(x: 0.04, y: 12.9), controlPoint2: CGPoint(x: 0.04, y: 13.1))
            shape2.addLine(to: CGPoint(x: 2.14, y: 16.8))
            shape2.addCurve(to: CGPoint(x: 2.74, y: 16.9), controlPoint1: CGPoint(x: 2.24, y: 16.9), controlPoint2: CGPoint(x: 2.44, y: 17))
            shape2.addLine(to: CGPoint(x: 5.24, y: 15.9))
            shape2.addCurve(to: CGPoint(x: 6.94, y: 16.9), controlPoint1: CGPoint(x: 5.74, y: 16.3), controlPoint2: CGPoint(x: 6.34, y: 16.6))
            shape2.addLine(to: CGPoint(x: 7.34, y: 19.5))
            shape2.addCurve(to: CGPoint(x: 7.84, y: 19.9), controlPoint1: CGPoint(x: 7.34, y: 19.7), controlPoint2: CGPoint(x: 7.54, y: 19.9))
            shape2.addLine(to: CGPoint(x: 11.84, y: 19.9))
            shape2.addCurve(to: CGPoint(x: 12.34, y: 19.5), controlPoint1: CGPoint(x: 12.04, y: 19.9), controlPoint2: CGPoint(x: 12.34, y: 19.7))
            shape2.addLine(to: CGPoint(x: 12.74, y: 16.9))
            shape2.addCurve(to: CGPoint(x: 14.44, y: 15.9), controlPoint1: CGPoint(x: 13.34, y: 16.6), controlPoint2: CGPoint(x: 13.94, y: 16.3))
            shape2.addLine(to: CGPoint(x: 16.94, y: 16.9))
            shape2.addCurve(to: CGPoint(x: 17.54, y: 16.7), controlPoint1: CGPoint(x: 17.14, y: 17), controlPoint2: CGPoint(x: 17.44, y: 16.9))
            shape2.addLine(to: CGPoint(x: 19.54, y: 13.2))
            shape2.addCurve(to: CGPoint(x: 19.44, y: 12.6), controlPoint1: CGPoint(x: 19.64, y: 13), controlPoint2: CGPoint(x: 19.64, y: 12.7))
            shape2.addLine(to: CGPoint(x: 17.14, y: 11))
            shape2.addLine(to: CGPoint(x: 17.14, y: 11))
            shape2.close()
            shape2.move(to: CGPoint(x: 9.74, y: 13.5))
            shape2.addCurve(to: CGPoint(x: 6.24, y: 10), controlPoint1: CGPoint(x: 7.84, y: 13.5), controlPoint2: CGPoint(x: 6.24, y: 11.9))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 6.5), controlPoint1: CGPoint(x: 6.24, y: 8.1), controlPoint2: CGPoint(x: 7.84, y: 6.5))
            shape2.addCurve(to: CGPoint(x: 13.24, y: 10), controlPoint1: CGPoint(x: 11.64, y: 6.5), controlPoint2: CGPoint(x: 13.24, y: 8.1))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 13.5), controlPoint1: CGPoint(x: 13.24, y: 11.9), controlPoint2: CGPoint(x: 11.64, y: 13.5))
            shape2.addLine(to: CGPoint(x: 9.74, y: 13.5))
            shape2.close()
            shape2.move(to: CGPoint(x: 9.74, y: 13.5))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            shape2.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// event 2
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 149)
            
            /// Shape
            let shape3 = UIBezierPath()
            shape3.move(to: CGPoint(x: 14, y: 11))
            shape3.addLine(to: CGPoint(x: 9, y: 11))
            shape3.addLine(to: CGPoint(x: 9, y: 16))
            shape3.addLine(to: CGPoint(x: 14, y: 16))
            shape3.addLine(to: CGPoint(x: 14, y: 11))
            shape3.addLine(to: CGPoint(x: 14, y: 11))
            shape3.close()
            shape3.move(to: CGPoint(x: 13, y: 0))
            shape3.addLine(to: CGPoint(x: 13, y: 2))
            shape3.addLine(to: CGPoint(x: 5, y: 2))
            shape3.addLine(to: CGPoint(x: 5, y: 0))
            shape3.addLine(to: CGPoint(x: 3, y: 0))
            shape3.addLine(to: CGPoint(x: 3, y: 2))
            shape3.addLine(to: CGPoint(x: 2, y: 2))
            shape3.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.9, y: 2), controlPoint2: CGPoint(x: 0, y: 2.9))
            shape3.addLine(to: CGPoint(x: 0, y: 18))
            shape3.addCurve(to: CGPoint(x: 2, y: 20), controlPoint1: CGPoint(x: 0, y: 19.1), controlPoint2: CGPoint(x: 0.9, y: 20))
            shape3.addLine(to: CGPoint(x: 16, y: 20))
            shape3.addCurve(to: CGPoint(x: 18, y: 18), controlPoint1: CGPoint(x: 17.1, y: 20), controlPoint2: CGPoint(x: 18, y: 19.1))
            shape3.addLine(to: CGPoint(x: 18, y: 4))
            shape3.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 18, y: 2.9), controlPoint2: CGPoint(x: 17.1, y: 2))
            shape3.addLine(to: CGPoint(x: 15, y: 2))
            shape3.addLine(to: CGPoint(x: 15, y: 0))
            shape3.addLine(to: CGPoint(x: 13, y: 0))
            shape3.addLine(to: CGPoint(x: 13, y: 0))
            shape3.close()
            shape3.move(to: CGPoint(x: 16, y: 18))
            shape3.addLine(to: CGPoint(x: 2, y: 18))
            shape3.addLine(to: CGPoint(x: 2, y: 7))
            shape3.addLine(to: CGPoint(x: 16, y: 7))
            shape3.addLine(to: CGPoint(x: 16, y: 18))
            shape3.addLine(to: CGPoint(x: 16, y: 18))
            shape3.close()
            shape3.move(to: CGPoint(x: 16, y: 18))
            context.saveGState()
            shape3.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// notifications-on
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 90)
            
            /// Shape
            let shape4 = UIBezierPath()
            shape4.move(to: CGPoint(x: 5.6, y: 1.6))
            shape4.addLine(to: CGPoint(x: 4.2, y: 0.2))
            shape4.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.8, y: 2), controlPoint2: CGPoint(x: 0.2, y: 4.8))
            shape4.addLine(to: CGPoint(x: 2, y: 8))
            shape4.addCurve(to: CGPoint(x: 5.6, y: 1.6), controlPoint1: CGPoint(x: 2.2, y: 5.3), controlPoint2: CGPoint(x: 3.5, y: 3))
            shape4.addLine(to: CGPoint(x: 5.6, y: 1.6))
            shape4.close()
            shape4.move(to: CGPoint(x: 19, y: 8))
            shape4.addLine(to: CGPoint(x: 21, y: 8))
            shape4.addCurve(to: CGPoint(x: 16.9, y: 0.2), controlPoint1: CGPoint(x: 20.8, y: 4.8), controlPoint2: CGPoint(x: 19.3, y: 2))
            shape4.addLine(to: CGPoint(x: 15.5, y: 1.6))
            shape4.addCurve(to: CGPoint(x: 19, y: 8), controlPoint1: CGPoint(x: 17.5, y: 3), controlPoint2: CGPoint(x: 18.8, y: 5.3))
            shape4.addLine(to: CGPoint(x: 19, y: 8))
            shape4.close()
            shape4.move(to: CGPoint(x: 17, y: 8.5))
            shape4.addCurve(to: CGPoint(x: 12, y: 2.2), controlPoint1: CGPoint(x: 17, y: 5.4), controlPoint2: CGPoint(x: 14.9, y: 2.9))
            shape4.addLine(to: CGPoint(x: 12, y: 1.5))
            shape4.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.7), controlPoint2: CGPoint(x: 11.3, y: 0))
            shape4.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 9.7, y: 0), controlPoint2: CGPoint(x: 9, y: 0.7))
            shape4.addLine(to: CGPoint(x: 9, y: 2.2))
            shape4.addCurve(to: CGPoint(x: 4, y: 8.5), controlPoint1: CGPoint(x: 6.1, y: 2.9), controlPoint2: CGPoint(x: 4, y: 5.4))
            shape4.addLine(to: CGPoint(x: 4, y: 14))
            shape4.addLine(to: CGPoint(x: 2, y: 16))
            shape4.addLine(to: CGPoint(x: 2, y: 17))
            shape4.addLine(to: CGPoint(x: 19, y: 17))
            shape4.addLine(to: CGPoint(x: 19, y: 16))
            shape4.addLine(to: CGPoint(x: 17, y: 14))
            shape4.addLine(to: CGPoint(x: 17, y: 8.5))
            shape4.addLine(to: CGPoint(x: 17, y: 8.5))
            shape4.close()
            shape4.move(to: CGPoint(x: 10.5, y: 20))
            shape4.addLine(to: CGPoint(x: 10.9, y: 20))
            shape4.addCurve(to: CGPoint(x: 12.3, y: 18.8), controlPoint1: CGPoint(x: 11.6, y: 19.9), controlPoint2: CGPoint(x: 12.1, y: 19.4))
            shape4.addCurve(to: CGPoint(x: 12.5, y: 18), controlPoint1: CGPoint(x: 12.4, y: 18.6), controlPoint2: CGPoint(x: 12.5, y: 18.3))
            shape4.addLine(to: CGPoint(x: 8.5, y: 18))
            shape4.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 8.5, y: 19.1), controlPoint2: CGPoint(x: 9.4, y: 20))
            shape4.addLine(to: CGPoint(x: 10.5, y: 20))
            shape4.close()
            shape4.move(to: CGPoint(x: 10.5, y: 20))
            context.saveGState()
            shape4.usesEvenOddFillRule = true
            UIColor(hue: 0.59, saturation: 0.673, brightness: 0.886, alpha: 1).setFill()
            shape4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawOverridesKeyboardLightSuggestionBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 42), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 42), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 42)
        
        /// Bar
        let bar = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 42))
        context.saveGState()
        UIColor(hue: 0.589, saturation: 0.074, brightness: 0.792, alpha: 1).setFill()
        bar.fill()
        context.restoreGState()
        /// Separators
        let separators = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 42))
        context.saveGState()
        context.translateBy(x: 124, y: 0)
        UIColor(hue: 0.574, saturation: 0.041, brightness: 0.855, alpha: 1).setFill()
        separators.fill()
        context.restoreGState()
        /// Right
        let right2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 42))
        context.saveGState()
        context.translateBy(x: 250, y: 0)
        UIColor(hue: 0.574, saturation: 0.041, brightness: 0.855, alpha: 1).setFill()
        right2.fill()
        context.restoreGState()
        /// Iâm
        let im = NSMutableAttributedString(string: "Iâm")
        im.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: im.length))
        im.addAttribute(.kern, value: -0.45, range: NSRange(location: 0, length: im.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            im.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: im.length))
        }
        context.saveGState()
        im.draw(in: CGRect(x: 260, y: 8.5, width: 105, height: 24))
        context.restoreGState()
        /// the
        let the = NSMutableAttributedString(string: "the")
        the.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: the.length))
        the.addAttribute(.kern, value: -0.45, range: NSRange(location: 0, length: the.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            the.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: the.length))
        }
        context.saveGState()
        the.draw(in: CGRect(x: 135, y: 8.5, width: 105, height: 24))
        context.restoreGState()
        /// I
        let i = NSMutableAttributedString(string: "I")
        i.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: i.length))
        i.addAttribute(.kern, value: -0.45, range: NSRange(location: 0, length: i.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            i.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: i.length))
        }
        context.saveGState()
        i.draw(in: CGRect(x: 10, y: 8.5, width: 105, height: 24))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawKeyboardsKeyboardSuggestions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 258), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 258), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 258)
        
        /// Keyboard
        // Warning: New symbols are not supported.
        /// Suggestion Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawKeyboardsLightLowercase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// Base
        let base2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.6).setFill()
        base2.fill()
        context.saveGState()
        context.setBlendMode(.softLight)
        context.beginTransparencyLayer(in: base2.bounds, auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.3).setFill()
            base2.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// Bottom Row
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 170)
            
            /// Enter Key
            // Warning: New symbols are not supported.
            
            /// Space
            do {
                context.saveGState()
                context.translateBy(x: 131, y: 0)
                
                /// Key
                let key = UIBezierPath()
                key.move(to: CGPoint(x: 139, y: 0))
                key.addCurve(to: CGPoint(x: 144.5, y: 5.5), controlPoint1: CGPoint(x: 142.31, y: 0), controlPoint2: CGPoint(x: 144.5, y: 2.14))
                key.addLine(to: CGPoint(x: 144.5, y: 36.5))
                key.addCurve(to: CGPoint(x: 139, y: 42), controlPoint1: CGPoint(x: 144.5, y: 39.86), controlPoint2: CGPoint(x: 142.31, y: 42))
                key.addLine(to: CGPoint(x: 5.5, y: 42))
                key.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key.addLine(to: CGPoint(x: 0, y: 5.5))
                key.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key.addLine(to: CGPoint(x: 139, y: 0))
                key.close()
                key.move(to: CGPoint(x: 139, y: 0))
                context.saveGState()
                key.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key.cgPath)
                context.addRect(key.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -145.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 145.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key.fill()
                context.restoreGState()
                key.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key.fill()
                context.restoreGState()
                
                /// space
                let space = NSMutableAttributedString(string: "space")
                space.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: space.length))
                space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: 4))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
                }
                context.saveGState()
                space.draw(at: CGPoint(x: 51, y: 10.5))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Voice
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// Key
                let key2 = UIBezierPath()
                key2.move(to: CGPoint(x: 26, y: 0))
                key2.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key2.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key2.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key2.addLine(to: CGPoint(x: 5.5, y: 42))
                key2.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key2.addLine(to: CGPoint(x: 0, y: 5.5))
                key2.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key2.addLine(to: CGPoint(x: 26, y: 0))
                key2.close()
                key2.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                key2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key2.cgPath)
                context.addRect(key2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key2.fill()
                context.restoreGState()
                key2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key2.fill()
                context.restoreGState()
                
                /// Speech
                let speech = UIBezierPath()
                speech.move(to: CGPoint(x: 10, y: 19.25))
                speech.addCurve(to: CGPoint(x: 9.25, y: 20), controlPoint1: CGPoint(x: 10, y: 19.66), controlPoint2: CGPoint(x: 9.66, y: 20))
                speech.addLine(to: CGPoint(x: 2.75, y: 20))
                speech.addCurve(to: CGPoint(x: 2, y: 19.25), controlPoint1: CGPoint(x: 2.34, y: 20), controlPoint2: CGPoint(x: 2, y: 19.67))
                speech.addCurve(to: CGPoint(x: 2.75, y: 18.5), controlPoint1: CGPoint(x: 2, y: 18.84), controlPoint2: CGPoint(x: 2.34, y: 18.5))
                speech.addLine(to: CGPoint(x: 5.25, y: 18.5))
                speech.addLine(to: CGPoint(x: 5.25, y: 16.5))
                speech.addCurve(to: CGPoint(x: 0, y: 11.48), controlPoint1: CGPoint(x: 2.75, y: 16.5), controlPoint2: CGPoint(x: 0, y: 13.47))
                speech.addCurve(to: CGPoint(x: 0, y: 8.25), controlPoint1: CGPoint(x: 0, y: 9.99), controlPoint2: CGPoint(x: 0, y: 8.25))
                speech.addCurve(to: CGPoint(x: 0.75, y: 7.5), controlPoint1: CGPoint(x: 0, y: 7.84), controlPoint2: CGPoint(x: 0.33, y: 7.5))
                speech.addCurve(to: CGPoint(x: 1.5, y: 8.25), controlPoint1: CGPoint(x: 1.16, y: 7.5), controlPoint2: CGPoint(x: 1.5, y: 7.84))
                speech.addLine(to: CGPoint(x: 1.5, y: 11.48))
                speech.addCurve(to: CGPoint(x: 6, y: 14.98), controlPoint1: CGPoint(x: 1.5, y: 12.98), controlPoint2: CGPoint(x: 3.5, y: 14.98))
                speech.addCurve(to: CGPoint(x: 10.5, y: 11.48), controlPoint1: CGPoint(x: 8.5, y: 14.98), controlPoint2: CGPoint(x: 10.5, y: 12.98))
                speech.addLine(to: CGPoint(x: 10.5, y: 8.25))
                speech.addCurve(to: CGPoint(x: 11.25, y: 7.5), controlPoint1: CGPoint(x: 10.5, y: 7.83), controlPoint2: CGPoint(x: 10.83, y: 7.5))
                speech.addCurve(to: CGPoint(x: 12, y: 8.26), controlPoint1: CGPoint(x: 11.66, y: 7.5), controlPoint2: CGPoint(x: 12, y: 7.84))
                speech.addLine(to: CGPoint(x: 12, y: 11.48))
                speech.addCurve(to: CGPoint(x: 6.75, y: 16.5), controlPoint1: CGPoint(x: 12, y: 13.47), controlPoint2: CGPoint(x: 9.25, y: 16.5))
                speech.addLine(to: CGPoint(x: 6.75, y: 18.5))
                speech.addLine(to: CGPoint(x: 9.25, y: 18.5))
                speech.addCurve(to: CGPoint(x: 10, y: 19.25), controlPoint1: CGPoint(x: 9.66, y: 18.5), controlPoint2: CGPoint(x: 10, y: 18.83))
                speech.close()
                speech.move(to: CGPoint(x: 2.5, y: 3.5))
                speech.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 2.5, y: 1.57), controlPoint2: CGPoint(x: 4.07, y: 0))
                speech.addCurve(to: CGPoint(x: 9.5, y: 3.5), controlPoint1: CGPoint(x: 7.93, y: 0), controlPoint2: CGPoint(x: 9.5, y: 1.57))
                speech.addLine(to: CGPoint(x: 9.5, y: 10.5))
                speech.addCurve(to: CGPoint(x: 6, y: 14), controlPoint1: CGPoint(x: 9.5, y: 12.43), controlPoint2: CGPoint(x: 7.93, y: 14))
                speech.addCurve(to: CGPoint(x: 2.5, y: 10.5), controlPoint1: CGPoint(x: 4.07, y: 14), controlPoint2: CGPoint(x: 2.5, y: 12.43))
                speech.addLine(to: CGPoint(x: 2.5, y: 3.5))
                speech.close()
                speech.move(to: CGPoint(x: 4, y: 3.49))
                speech.addLine(to: CGPoint(x: 4, y: 10.51))
                speech.addCurve(to: CGPoint(x: 6, y: 12.5), controlPoint1: CGPoint(x: 4, y: 11.6), controlPoint2: CGPoint(x: 4.9, y: 12.5))
                speech.addCurve(to: CGPoint(x: 8, y: 10.51), controlPoint1: CGPoint(x: 7.11, y: 12.5), controlPoint2: CGPoint(x: 8, y: 11.61))
                speech.addLine(to: CGPoint(x: 8, y: 3.49))
                speech.addCurve(to: CGPoint(x: 6, y: 1.5), controlPoint1: CGPoint(x: 8, y: 2.4), controlPoint2: CGPoint(x: 7.1, y: 1.5))
                speech.addCurve(to: CGPoint(x: 4, y: 3.49), controlPoint1: CGPoint(x: 4.89, y: 1.5), controlPoint2: CGPoint(x: 4, y: 2.39))
                speech.close()
                speech.move(to: CGPoint(x: 4, y: 3.49))
                context.saveGState()
                context.translateBy(x: 10.5, y: 11.5)
                speech.usesEvenOddFillRule = true
                UIColor(white: 0.012, alpha: 1).setFill()
                speech.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Emoji
            do {
                context.saveGState()
                context.translateBy(x: 46, y: 0)
                
                /// Key
                let key3 = UIBezierPath()
                key3.move(to: CGPoint(x: 35.5, y: 0))
                key3.addCurve(to: CGPoint(x: 41, y: 5.5), controlPoint1: CGPoint(x: 38.81, y: 0), controlPoint2: CGPoint(x: 41, y: 2.14))
                key3.addLine(to: CGPoint(x: 41, y: 36.5))
                key3.addCurve(to: CGPoint(x: 35.5, y: 42), controlPoint1: CGPoint(x: 41, y: 39.86), controlPoint2: CGPoint(x: 38.81, y: 42))
                key3.addLine(to: CGPoint(x: 5.5, y: 42))
                key3.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key3.addLine(to: CGPoint(x: 0, y: 5.5))
                key3.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key3.addLine(to: CGPoint(x: 35.5, y: 0))
                key3.close()
                key3.move(to: CGPoint(x: 35.5, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                key3.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key3.cgPath)
                context.addRect(key3.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -42, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key3.fill()
                context.restoreGState()
                key3.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                key3.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    key3.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    key3.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Emoji
                let emoji = UIBezierPath()
                emoji.move(to: CGPoint(x: 9.75, y: 19.5))
                emoji.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
                emoji.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 18.5))
                emoji.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
                emoji.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
                emoji.close()
                emoji.move(to: CGPoint(x: 6.75, y: 8))
                emoji.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
                emoji.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
                emoji.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
                emoji.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
                emoji.close()
                emoji.move(to: CGPoint(x: 12.75, y: 8))
                emoji.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
                emoji.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
                emoji.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
                emoji.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
                emoji.close()
                emoji.move(to: CGPoint(x: 2.89, y: 11.16))
                emoji.addCurve(to: CGPoint(x: 3.85, y: 10.23), controlPoint1: CGPoint(x: 2.64, y: 10.38), controlPoint2: CGPoint(x: 3.07, y: 9.98))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 11.21), controlPoint1: CGPoint(x: 3.85, y: 10.23), controlPoint2: CGPoint(x: 6.09, y: 11.21))
                emoji.addCurve(to: CGPoint(x: 15.65, y: 10.23), controlPoint1: CGPoint(x: 13.41, y: 11.21), controlPoint2: CGPoint(x: 15.65, y: 10.23))
                emoji.addCurve(to: CGPoint(x: 16.61, y: 11.18), controlPoint1: CGPoint(x: 16.43, y: 9.97), controlPoint2: CGPoint(x: 16.88, y: 10.4))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 16.58), controlPoint1: CGPoint(x: 16.61, y: 11.18), controlPoint2: CGPoint(x: 15.6, y: 16.58))
                emoji.addCurve(to: CGPoint(x: 2.89, y: 11.16), controlPoint1: CGPoint(x: 3.9, y: 16.58), controlPoint2: CGPoint(x: 2.89, y: 11.16))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 12.19))
                emoji.addCurve(to: CGPoint(x: 4.85, y: 11.47), controlPoint1: CGPoint(x: 7.07, y: 12.19), controlPoint2: CGPoint(x: 4.85, y: 11.47))
                emoji.addCurve(to: CGPoint(x: 4.56, y: 11.96), controlPoint1: CGPoint(x: 4.33, y: 11.33), controlPoint2: CGPoint(x: 4.18, y: 11.57))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 13.65), controlPoint1: CGPoint(x: 4.56, y: 11.96), controlPoint2: CGPoint(x: 5.36, y: 13.65))
                emoji.addCurve(to: CGPoint(x: 14.95, y: 11.94), controlPoint1: CGPoint(x: 14.14, y: 13.65), controlPoint2: CGPoint(x: 14.95, y: 11.94))
                emoji.addCurve(to: CGPoint(x: 14.64, y: 11.48), controlPoint1: CGPoint(x: 15.31, y: 11.54), controlPoint2: CGPoint(x: 15.17, y: 11.34))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 12.19), controlPoint1: CGPoint(x: 14.64, y: 11.48), controlPoint2: CGPoint(x: 12.43, y: 12.19))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 12.19))
                context.saveGState()
                context.translateBy(x: 11, y: 11)
                emoji.usesEvenOddFillRule = true
                UIColor(white: 0.012, alpha: 1).setFill()
                emoji.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// 123
            do {
                context.saveGState()
                
                /// Key
                let key4 = UIBezierPath()
                key4.move(to: CGPoint(x: 35, y: 0))
                key4.addCurve(to: CGPoint(x: 40.5, y: 5.5), controlPoint1: CGPoint(x: 38.31, y: 0), controlPoint2: CGPoint(x: 40.5, y: 2.14))
                key4.addLine(to: CGPoint(x: 40.5, y: 36.5))
                key4.addCurve(to: CGPoint(x: 35, y: 42), controlPoint1: CGPoint(x: 40.5, y: 39.86), controlPoint2: CGPoint(x: 38.31, y: 42))
                key4.addLine(to: CGPoint(x: 5.5, y: 42))
                key4.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key4.addLine(to: CGPoint(x: 0, y: 5.5))
                key4.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key4.addLine(to: CGPoint(x: 35, y: 0))
                key4.close()
                key4.move(to: CGPoint(x: 35, y: 0))
                context.saveGState()
                key4.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key4.cgPath)
                context.addRect(key4.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -41.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 41.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key4.fill()
                context.restoreGState()
                key4.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                key4.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key4.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    key4.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key4.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    key4.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// 123
                let _123 = NSMutableAttributedString(string: "123")
                _123.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: _123.length))
                _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
                }
                context.saveGState()
                _123.draw(at: CGPoint(x: 4.5, y: 11.5))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Third Row
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 118)
            
            /// Delete
            do {
                context.saveGState()
                context.translateBy(x: 327, y: 0)
                
                /// Key
                let key5 = UIBezierPath()
                key5.move(to: CGPoint(x: 36.5, y: 0))
                key5.addCurve(to: CGPoint(x: 42, y: 5.5), controlPoint1: CGPoint(x: 39.81, y: 0), controlPoint2: CGPoint(x: 42, y: 2.14))
                key5.addLine(to: CGPoint(x: 42, y: 36.5))
                key5.addCurve(to: CGPoint(x: 36.5, y: 42), controlPoint1: CGPoint(x: 42, y: 39.86), controlPoint2: CGPoint(x: 39.81, y: 42))
                key5.addLine(to: CGPoint(x: 5.5, y: 42))
                key5.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key5.addLine(to: CGPoint(x: 0, y: 5.5))
                key5.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key5.addLine(to: CGPoint(x: 36.5, y: 0))
                key5.close()
                key5.move(to: CGPoint(x: 36.5, y: 0))
                context.saveGState()
                key5.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key5.cgPath)
                context.addRect(key5.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key5.fill()
                context.restoreGState()
                key5.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                key5.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key5.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    key5.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key5.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    key5.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Back
                let back = UIBezierPath()
                back.move(to: CGPoint(x: 0.44, y: 9.56))
                back.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
                back.addLine(to: CGPoint(x: 7.17, y: 0.71))
                back.addCurve(to: CGPoint(x: 8.88, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
                back.addLine(to: CGPoint(x: 19.38, y: 0))
                back.addCurve(to: CGPoint(x: 22.88, y: 3.5), controlPoint1: CGPoint(x: 21.31, y: 0), controlPoint2: CGPoint(x: 22.88, y: 1.57))
                back.addLine(to: CGPoint(x: 22.88, y: 13.5))
                back.addCurve(to: CGPoint(x: 19.38, y: 17), controlPoint1: CGPoint(x: 22.88, y: 15.43), controlPoint2: CGPoint(x: 21.3, y: 17))
                back.addLine(to: CGPoint(x: 8.88, y: 17))
                back.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.33, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
                back.addLine(to: CGPoint(x: 0.44, y: 9.56))
                back.close()
                back.move(to: CGPoint(x: 15.02, y: 8.48))
                back.addLine(to: CGPoint(x: 17.84, y: 5.65))
                back.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
                back.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
                back.addLine(to: CGPoint(x: 13.96, y: 7.42))
                back.addLine(to: CGPoint(x: 11.13, y: 4.59))
                back.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
                back.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
                back.addLine(to: CGPoint(x: 12.9, y: 8.48))
                back.addLine(to: CGPoint(x: 10.07, y: 11.3))
                back.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
                back.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
                back.addLine(to: CGPoint(x: 13.96, y: 9.54))
                back.addLine(to: CGPoint(x: 16.78, y: 12.36))
                back.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
                back.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
                back.addLine(to: CGPoint(x: 15.02, y: 8.48))
                back.close()
                back.move(to: CGPoint(x: 2.09, y: 9.21))
                back.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
                back.addLine(to: CGPoint(x: 8.02, y: 1.86))
                back.addCurve(to: CGPoint(x: 8.87, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
                back.addLine(to: CGPoint(x: 19.37, y: 1.5))
                back.addCurve(to: CGPoint(x: 21.38, y: 3.51), controlPoint1: CGPoint(x: 20.48, y: 1.5), controlPoint2: CGPoint(x: 21.38, y: 2.4))
                back.addLine(to: CGPoint(x: 21.38, y: 13.49))
                back.addCurve(to: CGPoint(x: 19.37, y: 15.5), controlPoint1: CGPoint(x: 21.38, y: 14.6), controlPoint2: CGPoint(x: 20.48, y: 15.5))
                back.addLine(to: CGPoint(x: 8.87, y: 15.5))
                back.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
                back.addLine(to: CGPoint(x: 2.09, y: 9.21))
                back.close()
                back.move(to: CGPoint(x: 2.09, y: 9.21))
                context.saveGState()
                context.translateBy(x: 9.62, y: 12.5)
                back.usesEvenOddFillRule = true
                UIColor(white: 0.012, alpha: 1).setFill()
                back.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// m
            do {
                context.saveGState()
                context.translateBy(x: 281, y: 0)
                
                /// Key
                let key6 = UIBezierPath()
                key6.move(to: CGPoint(x: 26, y: 0))
                key6.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key6.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key6.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key6.addLine(to: CGPoint(x: 5.5, y: 42))
                key6.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key6.addLine(to: CGPoint(x: 0, y: 5.5))
                key6.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key6.addLine(to: CGPoint(x: 26, y: 0))
                key6.close()
                key6.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                key6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key6.cgPath)
                context.addRect(key6.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key6.fill()
                context.restoreGState()
                key6.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key6.fill()
                context.restoreGState()
                
                /// m
                let m = NSMutableAttributedString(string: "m")
                m.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: m.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
                }
                context.saveGState()
                m.draw(at: CGPoint(x: 5.75, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// n
            do {
                context.saveGState()
                context.translateBy(x: 244, y: 0)
                
                /// Key
                let key7 = UIBezierPath()
                key7.move(to: CGPoint(x: 26, y: 0))
                key7.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key7.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key7.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key7.addLine(to: CGPoint(x: 5.5, y: 42))
                key7.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key7.addLine(to: CGPoint(x: 0, y: 5.5))
                key7.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key7.addLine(to: CGPoint(x: 26, y: 0))
                key7.close()
                key7.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                key7.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key7.cgPath)
                context.addRect(key7.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key7.fill()
                context.restoreGState()
                key7.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key7.fill()
                context.restoreGState()
                
                /// n
                let n = NSMutableAttributedString(string: "n")
                n.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: n.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    n.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: n.length))
                }
                context.saveGState()
                n.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// b
            do {
                context.saveGState()
                context.translateBy(x: 206, y: 0)
                
                /// Key
                let key8 = UIBezierPath()
                key8.move(to: CGPoint(x: 26, y: 0))
                key8.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key8.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key8.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key8.addLine(to: CGPoint(x: 5.5, y: 42))
                key8.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key8.addLine(to: CGPoint(x: 0, y: 5.5))
                key8.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key8.addLine(to: CGPoint(x: 26, y: 0))
                key8.close()
                key8.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                key8.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key8.cgPath)
                context.addRect(key8.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key8.fill()
                context.restoreGState()
                key8.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key8.fill()
                context.restoreGState()
                
                /// b
                let b = NSMutableAttributedString(string: "b")
                b.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: b.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    b.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: b.length))
                }
                context.saveGState()
                b.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// v
            do {
                context.saveGState()
                context.translateBy(x: 169, y: 0)
                
                /// Key
                let key9 = UIBezierPath()
                key9.move(to: CGPoint(x: 26, y: 0))
                key9.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key9.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key9.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key9.addLine(to: CGPoint(x: 5.5, y: 42))
                key9.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key9.addLine(to: CGPoint(x: 0, y: 5.5))
                key9.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key9.addLine(to: CGPoint(x: 26, y: 0))
                key9.close()
                key9.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                key9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key9.cgPath)
                context.addRect(key9.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key9.fill()
                context.restoreGState()
                key9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key9.fill()
                context.restoreGState()
                
                /// v
                let v = NSMutableAttributedString(string: "v")
                v.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: v.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    v.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: v.length))
                }
                context.saveGState()
                v.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// c
            do {
                context.saveGState()
                context.translateBy(x: 131, y: 0)
                
                /// Key
                let key10 = UIBezierPath()
                key10.move(to: CGPoint(x: 26, y: 0))
                key10.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key10.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key10.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key10.addLine(to: CGPoint(x: 5.5, y: 42))
                key10.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key10.addLine(to: CGPoint(x: 0, y: 5.5))
                key10.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key10.addLine(to: CGPoint(x: 26, y: 0))
                key10.close()
                key10.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                key10.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key10.cgPath)
                context.addRect(key10.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key10.fill()
                context.restoreGState()
                key10.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key10.fill()
                context.restoreGState()
                
                /// c
                let c = NSMutableAttributedString(string: "c")
                c.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: c.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    c.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: c.length))
                }
                context.saveGState()
                c.draw(at: CGPoint(x: 9.25, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// x
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// Key
                let key11 = UIBezierPath()
                key11.move(to: CGPoint(x: 26, y: 0))
                key11.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key11.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key11.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key11.addLine(to: CGPoint(x: 5.5, y: 42))
                key11.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key11.addLine(to: CGPoint(x: 0, y: 5.5))
                key11.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key11.addLine(to: CGPoint(x: 26, y: 0))
                key11.close()
                key11.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                key11.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key11.cgPath)
                context.addRect(key11.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key11.fill()
                context.restoreGState()
                key11.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key11.fill()
                context.restoreGState()
                
                /// x
                let x = NSMutableAttributedString(string: "x")
                x.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: x.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    x.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: x.length))
                }
                context.saveGState()
                x.draw(at: CGPoint(x: 9.75, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// z
            do {
                context.saveGState()
                context.translateBy(x: 56, y: 0)
                
                /// Key
                let key12 = UIBezierPath()
                key12.move(to: CGPoint(x: 26, y: 0))
                key12.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key12.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key12.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key12.addLine(to: CGPoint(x: 5.5, y: 42))
                key12.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key12.addLine(to: CGPoint(x: 0, y: 5.5))
                key12.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key12.addLine(to: CGPoint(x: 26, y: 0))
                key12.close()
                key12.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                key12.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key12.cgPath)
                context.addRect(key12.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key12.fill()
                context.restoreGState()
                key12.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key12.fill()
                context.restoreGState()
                
                /// z
                let z = NSMutableAttributedString(string: "z")
                z.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: z.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    z.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: z.length))
                }
                context.saveGState()
                z.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Shift
            do {
                context.saveGState()
                
                /// Key
                let key13 = UIBezierPath()
                key13.move(to: CGPoint(x: 36.5, y: 0))
                key13.addCurve(to: CGPoint(x: 42, y: 5.5), controlPoint1: CGPoint(x: 39.81, y: 0), controlPoint2: CGPoint(x: 42, y: 2.14))
                key13.addLine(to: CGPoint(x: 42, y: 36.5))
                key13.addCurve(to: CGPoint(x: 36.5, y: 42), controlPoint1: CGPoint(x: 42, y: 39.86), controlPoint2: CGPoint(x: 39.81, y: 42))
                key13.addLine(to: CGPoint(x: 5.5, y: 42))
                key13.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key13.addLine(to: CGPoint(x: 0, y: 5.5))
                key13.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key13.addLine(to: CGPoint(x: 36.5, y: 0))
                key13.close()
                key13.move(to: CGPoint(x: 36.5, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key13.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key13.cgPath)
                context.addRect(key13.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key13.fill()
                context.restoreGState()
                key13.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                key13.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key13.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    key13.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: key13.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    key13.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Shift
                let shift = UIBezierPath()
                shift.move(to: CGPoint(x: 10.49, y: 0.3))
                shift.addLine(to: CGPoint(x: 19.13, y: 9.72))
                shift.addCurve(to: CGPoint(x: 18.31, y: 11.57), controlPoint1: CGPoint(x: 20.07, y: 10.74), controlPoint2: CGPoint(x: 19.7, y: 11.57))
                shift.addLine(to: CGPoint(x: 14.82, y: 11.57))
                shift.addLine(to: CGPoint(x: 14.82, y: 16.07))
                shift.addCurve(to: CGPoint(x: 13.33, y: 17.57), controlPoint1: CGPoint(x: 14.82, y: 16.9), controlPoint2: CGPoint(x: 14.15, y: 17.57))
                shift.addLine(to: CGPoint(x: 6.32, y: 17.57))
                shift.addCurve(to: CGPoint(x: 4.82, y: 16.07), controlPoint1: CGPoint(x: 5.49, y: 17.57), controlPoint2: CGPoint(x: 4.82, y: 16.9))
                shift.addLine(to: CGPoint(x: 4.82, y: 11.57))
                shift.addLine(to: CGPoint(x: 1.33, y: 11.57))
                shift.addCurve(to: CGPoint(x: 0.52, y: 9.72), controlPoint1: CGPoint(x: -0.05, y: 11.57), controlPoint2: CGPoint(x: -0.42, y: 10.74))
                shift.addLine(to: CGPoint(x: 9.15, y: 0.3))
                shift.addCurve(to: CGPoint(x: 10.49, y: 0.3), controlPoint1: CGPoint(x: 9.52, y: -0.1), controlPoint2: CGPoint(x: 10.12, y: -0.1))
                shift.close()
                shift.move(to: CGPoint(x: 10.16, y: 2.43))
                shift.addCurve(to: CGPoint(x: 9.48, y: 2.43), controlPoint1: CGPoint(x: 9.98, y: 2.23), controlPoint2: CGPoint(x: 9.67, y: 2.24))
                shift.addLine(to: CGPoint(x: 2.32, y: 10.07))
                shift.addLine(to: CGPoint(x: 6.32, y: 10.07))
                shift.addLine(to: CGPoint(x: 6.32, y: 15.58))
                shift.addCurve(to: CGPoint(x: 6.83, y: 16.07), controlPoint1: CGPoint(x: 6.32, y: 15.85), controlPoint2: CGPoint(x: 6.56, y: 16.07))
                shift.addLine(to: CGPoint(x: 12.82, y: 16.07))
                shift.addCurve(to: CGPoint(x: 13.32, y: 15.58), controlPoint1: CGPoint(x: 13.1, y: 16.07), controlPoint2: CGPoint(x: 13.32, y: 15.84))
                shift.addLine(to: CGPoint(x: 13.32, y: 10.07))
                shift.addLine(to: CGPoint(x: 17.32, y: 10.07))
                shift.addLine(to: CGPoint(x: 10.16, y: 2.43))
                shift.close()
                shift.move(to: CGPoint(x: 10.16, y: 2.43))
                context.saveGState()
                context.translateBy(x: 11.18, y: 11.93)
                shift.usesEvenOddFillRule = true
                UIColor(white: 0.012, alpha: 1).setFill()
                shift.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Second Row
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 64)
            
            /// l
            do {
                context.saveGState()
                context.translateBy(x: 301, y: 0)
                
                /// Key
                let key14 = UIBezierPath()
                key14.move(to: CGPoint(x: 26, y: 0))
                key14.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key14.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key14.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key14.addLine(to: CGPoint(x: 5.5, y: 42))
                key14.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key14.addLine(to: CGPoint(x: 0, y: 5.5))
                key14.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key14.addLine(to: CGPoint(x: 26, y: 0))
                key14.close()
                key14.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key14.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key14.cgPath)
                context.addRect(key14.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key14.fill()
                context.restoreGState()
                key14.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key14.fill()
                context.restoreGState()
                
                /// l
                let l = NSMutableAttributedString(string: "l")
                l.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: l.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    l.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: l.length))
                }
                context.saveGState()
                l.draw(at: CGPoint(x: 13, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// k
            do {
                context.saveGState()
                context.translateBy(x: 263, y: 0)
                
                /// Key
                let key15 = UIBezierPath()
                key15.move(to: CGPoint(x: 26, y: 0))
                key15.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key15.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key15.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key15.addLine(to: CGPoint(x: 5.5, y: 42))
                key15.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key15.addLine(to: CGPoint(x: 0, y: 5.5))
                key15.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key15.addLine(to: CGPoint(x: 26, y: 0))
                key15.close()
                key15.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key15.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key15.cgPath)
                context.addRect(key15.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key15.fill()
                context.restoreGState()
                key15.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key15.fill()
                context.restoreGState()
                
                /// k
                let k = NSMutableAttributedString(string: "k")
                k.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: k.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    k.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: k.length))
                }
                context.saveGState()
                k.draw(at: CGPoint(x: 9.75, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// j
            do {
                context.saveGState()
                context.translateBy(x: 226, y: 0)
                
                /// Key
                let key16 = UIBezierPath()
                key16.move(to: CGPoint(x: 26, y: 0))
                key16.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key16.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key16.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key16.addLine(to: CGPoint(x: 5.5, y: 42))
                key16.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key16.addLine(to: CGPoint(x: 0, y: 5.5))
                key16.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key16.addLine(to: CGPoint(x: 26, y: 0))
                key16.close()
                key16.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key16.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key16.cgPath)
                context.addRect(key16.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key16.fill()
                context.restoreGState()
                key16.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key16.fill()
                context.restoreGState()
                
                /// j
                let j = NSMutableAttributedString(string: "j")
                j.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: j.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    j.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: j.length))
                }
                context.saveGState()
                j.draw(at: CGPoint(x: 13.25, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// h
            do {
                context.saveGState()
                context.translateBy(x: 188, y: 0)
                
                /// Key
                let key17 = UIBezierPath()
                key17.move(to: CGPoint(x: 26, y: 0))
                key17.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key17.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key17.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key17.addLine(to: CGPoint(x: 5.5, y: 42))
                key17.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key17.addLine(to: CGPoint(x: 0, y: 5.5))
                key17.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key17.addLine(to: CGPoint(x: 26, y: 0))
                key17.close()
                key17.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key17.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key17.cgPath)
                context.addRect(key17.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key17.fill()
                context.restoreGState()
                key17.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key17.fill()
                context.restoreGState()
                
                /// h
                let h = NSMutableAttributedString(string: "h")
                h.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: h.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    h.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: h.length))
                }
                context.saveGState()
                h.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// g
            do {
                context.saveGState()
                context.translateBy(x: 151, y: 0)
                
                /// Key
                let key18 = UIBezierPath()
                key18.move(to: CGPoint(x: 26, y: 0))
                key18.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key18.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key18.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key18.addLine(to: CGPoint(x: 5.5, y: 42))
                key18.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key18.addLine(to: CGPoint(x: 0, y: 5.5))
                key18.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key18.addLine(to: CGPoint(x: 26, y: 0))
                key18.close()
                key18.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key18.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key18.cgPath)
                context.addRect(key18.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key18.fill()
                context.restoreGState()
                key18.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key18.fill()
                context.restoreGState()
                
                /// g
                let g = NSMutableAttributedString(string: "g")
                g.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: g.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    g.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: g.length))
                }
                context.saveGState()
                g.draw(at: CGPoint(x: 8.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// f
            do {
                context.saveGState()
                context.translateBy(x: 113, y: 0)
                
                /// Key
                let key19 = UIBezierPath()
                key19.move(to: CGPoint(x: 26, y: 0))
                key19.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key19.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key19.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key19.addLine(to: CGPoint(x: 5.5, y: 42))
                key19.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key19.addLine(to: CGPoint(x: 0, y: 5.5))
                key19.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key19.addLine(to: CGPoint(x: 26, y: 0))
                key19.close()
                key19.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key19.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key19.cgPath)
                context.addRect(key19.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key19.fill()
                context.restoreGState()
                key19.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key19.fill()
                context.restoreGState()
                
                /// f
                let f = NSMutableAttributedString(string: "f")
                f.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: f.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
                }
                context.saveGState()
                f.draw(at: CGPoint(x: 11.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// d
            do {
                context.saveGState()
                context.translateBy(x: 75, y: 0)
                
                /// Key
                let key20 = UIBezierPath()
                key20.move(to: CGPoint(x: 26, y: 0))
                key20.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key20.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key20.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key20.addLine(to: CGPoint(x: 5.5, y: 42))
                key20.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key20.addLine(to: CGPoint(x: 0, y: 5.5))
                key20.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key20.addLine(to: CGPoint(x: 26, y: 0))
                key20.close()
                key20.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key20.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key20.cgPath)
                context.addRect(key20.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key20.fill()
                context.restoreGState()
                key20.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key20.fill()
                context.restoreGState()
                
                /// d
                let d = NSMutableAttributedString(string: "d")
                d.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: d.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    d.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: d.length))
                }
                context.saveGState()
                d.draw(at: CGPoint(x: 8.75, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// s
            do {
                context.saveGState()
                context.translateBy(x: 38, y: 0)
                
                /// Key
                let key21 = UIBezierPath()
                key21.move(to: CGPoint(x: 26, y: 0))
                key21.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key21.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key21.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key21.addLine(to: CGPoint(x: 5.5, y: 42))
                key21.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key21.addLine(to: CGPoint(x: 0, y: 5.5))
                key21.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key21.addLine(to: CGPoint(x: 26, y: 0))
                key21.close()
                key21.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key21.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key21.cgPath)
                context.addRect(key21.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key21.fill()
                context.restoreGState()
                key21.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key21.fill()
                context.restoreGState()
                
                /// s
                let s = NSMutableAttributedString(string: "s")
                s.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: s.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
                }
                context.saveGState()
                s.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// a
            do {
                context.saveGState()
                
                /// Key
                let key22 = UIBezierPath()
                key22.move(to: CGPoint(x: 26, y: 0))
                key22.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key22.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key22.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key22.addLine(to: CGPoint(x: 5.5, y: 42))
                key22.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key22.addLine(to: CGPoint(x: 0, y: 5.5))
                key22.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key22.addLine(to: CGPoint(x: 26, y: 0))
                key22.close()
                key22.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key22.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key22.cgPath)
                context.addRect(key22.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key22.fill()
                context.restoreGState()
                key22.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key22.fill()
                context.restoreGState()
                
                /// a
                let a = NSMutableAttributedString(string: "a")
                a.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: a.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    a.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: a.length))
                }
                context.saveGState()
                a.draw(at: CGPoint(x: 10, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Top Row
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 10)
            
            /// p
            do {
                context.saveGState()
                context.translateBy(x: 337, y: 0)
                
                /// Key
                let key23 = UIBezierPath()
                key23.move(to: CGPoint(x: 26, y: 0))
                key23.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key23.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key23.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key23.addLine(to: CGPoint(x: 5.5, y: 42))
                key23.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key23.addLine(to: CGPoint(x: 0, y: 5.5))
                key23.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key23.addLine(to: CGPoint(x: 26, y: 0))
                key23.close()
                key23.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key23.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key23.cgPath)
                context.addRect(key23.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key23.fill()
                context.restoreGState()
                key23.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key23.fill()
                context.restoreGState()
                
                /// p
                let p = NSMutableAttributedString(string: "p")
                p.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: p.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    p.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: p.length))
                }
                context.saveGState()
                p.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// o
            do {
                context.saveGState()
                context.translateBy(x: 300, y: 0)
                
                /// Key
                let key24 = UIBezierPath()
                key24.move(to: CGPoint(x: 26, y: 0))
                key24.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key24.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key24.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key24.addLine(to: CGPoint(x: 5.5, y: 42))
                key24.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key24.addLine(to: CGPoint(x: 0, y: 5.5))
                key24.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key24.addLine(to: CGPoint(x: 26, y: 0))
                key24.close()
                key24.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key24.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key24.cgPath)
                context.addRect(key24.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key24.fill()
                context.restoreGState()
                key24.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key24.fill()
                context.restoreGState()
                
                /// o
                let o = NSMutableAttributedString(string: "o")
                o.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: o.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    o.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: o.length))
                }
                context.saveGState()
                o.draw(at: CGPoint(x: 8.75, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// i
            do {
                context.saveGState()
                context.translateBy(x: 262, y: 0)
                
                /// Key
                let key25 = UIBezierPath()
                key25.move(to: CGPoint(x: 26, y: 0))
                key25.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key25.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key25.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key25.addLine(to: CGPoint(x: 5.5, y: 42))
                key25.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key25.addLine(to: CGPoint(x: 0, y: 5.5))
                key25.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key25.addLine(to: CGPoint(x: 26, y: 0))
                key25.close()
                key25.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key25.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key25.cgPath)
                context.addRect(key25.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key25.fill()
                context.restoreGState()
                key25.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key25.fill()
                context.restoreGState()
                
                /// i
                let i = NSMutableAttributedString(string: "i")
                i.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: i.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    i.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: i.length))
                }
                context.saveGState()
                i.draw(at: CGPoint(x: 13, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// u
            do {
                context.saveGState()
                context.translateBy(x: 225, y: 0)
                
                /// Key
                let key26 = UIBezierPath()
                key26.move(to: CGPoint(x: 26, y: 0))
                key26.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key26.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key26.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key26.addLine(to: CGPoint(x: 5.5, y: 42))
                key26.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key26.addLine(to: CGPoint(x: 0, y: 5.5))
                key26.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key26.addLine(to: CGPoint(x: 26, y: 0))
                key26.close()
                key26.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key26.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key26.cgPath)
                context.addRect(key26.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key26.fill()
                context.restoreGState()
                key26.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key26.fill()
                context.restoreGState()
                
                /// u
                let u = NSMutableAttributedString(string: "u")
                u.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: u.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    u.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: u.length))
                }
                context.saveGState()
                u.draw(at: CGPoint(x: 8.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// y
            do {
                context.saveGState()
                context.translateBy(x: 187, y: 0)
                
                /// Key
                let key27 = UIBezierPath()
                key27.move(to: CGPoint(x: 26, y: 0))
                key27.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key27.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key27.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key27.addLine(to: CGPoint(x: 5.5, y: 42))
                key27.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key27.addLine(to: CGPoint(x: 0, y: 5.5))
                key27.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key27.addLine(to: CGPoint(x: 26, y: 0))
                key27.close()
                key27.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key27.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key27.cgPath)
                context.addRect(key27.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key27.fill()
                context.restoreGState()
                key27.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key27.fill()
                context.restoreGState()
                
                /// y
                let y = NSMutableAttributedString(string: "y")
                y.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: y.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    y.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: y.length))
                }
                context.saveGState()
                y.draw(at: CGPoint(x: 9.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// t
            do {
                context.saveGState()
                context.translateBy(x: 150, y: 0)
                
                /// Key
                let key28 = UIBezierPath()
                key28.move(to: CGPoint(x: 26, y: 0))
                key28.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key28.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key28.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key28.addLine(to: CGPoint(x: 5.5, y: 42))
                key28.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key28.addLine(to: CGPoint(x: 0, y: 5.5))
                key28.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key28.addLine(to: CGPoint(x: 26, y: 0))
                key28.close()
                key28.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key28.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key28.cgPath)
                context.addRect(key28.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key28.fill()
                context.restoreGState()
                key28.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key28.fill()
                context.restoreGState()
                
                /// t
                let t = NSMutableAttributedString(string: "t")
                t.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: t.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
                }
                context.saveGState()
                t.draw(at: CGPoint(x: 11.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// r
            do {
                context.saveGState()
                context.translateBy(x: 112, y: 0)
                
                /// Key
                let key29 = UIBezierPath()
                key29.move(to: CGPoint(x: 26, y: 0))
                key29.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key29.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key29.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key29.addLine(to: CGPoint(x: 5.5, y: 42))
                key29.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key29.addLine(to: CGPoint(x: 0, y: 5.5))
                key29.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key29.addLine(to: CGPoint(x: 26, y: 0))
                key29.close()
                key29.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key29.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key29.cgPath)
                context.addRect(key29.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key29.fill()
                context.restoreGState()
                key29.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key29.fill()
                context.restoreGState()
                
                /// r
                let r = NSMutableAttributedString(string: "r")
                r.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: r.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    r.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: r.length))
                }
                context.saveGState()
                r.draw(at: CGPoint(x: 12.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// e
            do {
                context.saveGState()
                context.translateBy(x: 75, y: 0)
                
                /// Key
                let key30 = UIBezierPath()
                key30.move(to: CGPoint(x: 26, y: 0))
                key30.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key30.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key30.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key30.addLine(to: CGPoint(x: 5.5, y: 42))
                key30.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key30.addLine(to: CGPoint(x: 0, y: 5.5))
                key30.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key30.addLine(to: CGPoint(x: 26, y: 0))
                key30.close()
                key30.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                key30.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key30.cgPath)
                context.addRect(key30.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key30.fill()
                context.restoreGState()
                key30.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key30.fill()
                context.restoreGState()
                
                /// e
                let e = NSMutableAttributedString(string: "e")
                e.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: e.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    e.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: e.length))
                }
                context.saveGState()
                e.draw(at: CGPoint(x: 9, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// w
            do {
                context.saveGState()
                context.translateBy(x: 37, y: 0)
                
                /// Key
                let key31 = UIBezierPath()
                key31.move(to: CGPoint(x: 26, y: 0))
                key31.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key31.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key31.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key31.addLine(to: CGPoint(x: 5.5, y: 42))
                key31.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key31.addLine(to: CGPoint(x: 0, y: 5.5))
                key31.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key31.addLine(to: CGPoint(x: 26, y: 0))
                key31.close()
                key31.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                context.translateBy(x: 0.5, y: -0)
                key31.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key31.cgPath)
                context.addRect(key31.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key31.fill()
                context.restoreGState()
                key31.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key31.fill()
                context.restoreGState()
                
                /// w
                let w = NSMutableAttributedString(string: "w")
                w.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: w.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
                }
                context.saveGState()
                w.draw(at: CGPoint(x: 6.5, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// q
            do {
                context.saveGState()
                
                /// Key
                let key32 = UIBezierPath()
                key32.move(to: CGPoint(x: 26, y: 0))
                key32.addCurve(to: CGPoint(x: 31.5, y: 5.5), controlPoint1: CGPoint(x: 29.31, y: 0), controlPoint2: CGPoint(x: 31.5, y: 2.14))
                key32.addLine(to: CGPoint(x: 31.5, y: 36.5))
                key32.addCurve(to: CGPoint(x: 26, y: 42), controlPoint1: CGPoint(x: 31.5, y: 39.86), controlPoint2: CGPoint(x: 29.31, y: 42))
                key32.addLine(to: CGPoint(x: 5.5, y: 42))
                key32.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
                key32.addLine(to: CGPoint(x: 0, y: 5.5))
                key32.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
                key32.addLine(to: CGPoint(x: 26, y: 0))
                key32.close()
                key32.move(to: CGPoint(x: 26, y: 0))
                context.saveGState()
                key32.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key32.cgPath)
                context.addRect(key32.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.5, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.5, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                key32.fill()
                context.restoreGState()
                key32.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key32.fill()
                context.restoreGState()
                
                /// q
                let q = NSMutableAttributedString(string: "q")
                q.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 25)!, range: NSRange(location: 0, length: q.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    q.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: q.length))
                }
                context.saveGState()
                q.draw(at: CGPoint(x: 8, y: 3.75))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawOverridesKeyboardKeyLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 89, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 89, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 89, y: resizedFrame.height / 44)
        
        /// Key
        let key = UIBezierPath()
        key.move(to: CGPoint(x: 82, y: 0))
        key.addCurve(to: CGPoint(x: 87.5, y: 5.5), controlPoint1: CGPoint(x: 85.31, y: 0), controlPoint2: CGPoint(x: 87.5, y: 2.14))
        key.addLine(to: CGPoint(x: 87.5, y: 36.5))
        key.addCurve(to: CGPoint(x: 82, y: 42), controlPoint1: CGPoint(x: 87.5, y: 39.86), controlPoint2: CGPoint(x: 85.31, y: 42))
        key.addLine(to: CGPoint(x: 5.5, y: 42))
        key.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.19, y: 42), controlPoint2: CGPoint(x: 0, y: 39.86))
        key.addLine(to: CGPoint(x: 0, y: 5.5))
        key.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.14), controlPoint2: CGPoint(x: 2.19, y: 0))
        key.addLine(to: CGPoint(x: 82, y: 0))
        key.close()
        key.move(to: CGPoint(x: 82, y: 0))
        context.saveGState()
        context.translateBy(x: 0.5, y: 0)
        key.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(key.cgPath)
        context.addRect(key.bounds.insetBy(dx: 0, dy: -1))
        context.clip(using: .evenOdd)
        context.translateBy(x: -88.5, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 88.5, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
        }
        UIColor.black.setFill()
        key.fill()
        context.restoreGState()
        key.usesEvenOddFillRule = true
        UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
        key.fill()
        context.saveGState()
        context.setBlendMode(.softLight)
        context.beginTransparencyLayer(in: key.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0, alpha: 0.5).setFill()
            key.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.setBlendMode(.softLight)
        context.beginTransparencyLayer(in: key.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 1, alpha: 0.1).setFill()
            key.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// return
        let return2 = NSMutableAttributedString(string: "return")
        return2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: return2.length))
        return2.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: return2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            return2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: return2.length))
        }
        context.saveGState()
        return2.draw(at: CGPoint(x: 21.5, y: 10.5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 299, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 299, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 299, y: resizedFrame.height / 667)
        
        /// Menu
        do {
            context.saveGState()
            
            /// Container
            let container = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 299, height: 667))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(container.cgPath)
            context.addRect(container.bounds.insetBy(dx: -8, dy: -8))
            context.clip(using: .evenOdd)
            context.translateBy(x: -308, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 308, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.43).cgColor)
            }
            UIColor.black.setFill()
            container.fill()
            context.restoreGState()
            UIColor.white.setFill()
            container.fill()
            context.restoreGState()
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 88)
                
                /// Line
                let line = UIBezierPath()
                line.move(to: CGPoint(x: 0.45, y: 1.84))
                line.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 39.99)
                line.lineCapStyle = .square
                line.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line.stroke()
                context.restoreGState()
                
                /// Messageboard
                let messageboard2 = NSMutableAttributedString(string: "Messageboard")
                messageboard2.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: messageboard2.length))
                context.saveGState()
                messageboard2.draw(in: CGRect(x: 84.6, y: 0, width: 102.4, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 36)
                
                /// Line
                let line2 = UIBezierPath()
                line2.move(to: CGPoint(x: 0.45, y: 1.84))
                line2.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 31.99)
                line2.lineCapStyle = .square
                line2.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line2.stroke()
                context.restoreGState()
                
                /// Thomas de Lange
                let thomasDeLange = NSMutableAttributedString(string: "Thomas de Lange")
                thomasDeLange.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: thomasDeLange.length))
                context.saveGState()
                thomasDeLange.draw(in: CGRect(x: 84.6, y: 0, width: 124.02, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Hamburger Menu
            // Warning: Image layers are not supported.
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 152)
                
                /// Line
                let line3 = UIBezierPath()
                line3.move(to: CGPoint(x: 0.45, y: 1.84))
                line3.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 37.22)
                line3.lineCapStyle = .square
                line3.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line3.stroke()
                context.restoreGState()
                
                /// Agenda
                let agenda2 = NSMutableAttributedString(string: "Agenda")
                agenda2.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: agenda2.length))
                context.saveGState()
                agenda2.draw(in: CGRect(x: 84.6, y: 0, width: 52.98, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 217)
                
                /// Line
                let line4 = UIBezierPath()
                line4.move(to: CGPoint(x: 0.45, y: 1.84))
                line4.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 38.99)
                line4.lineCapStyle = .square
                line4.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line4.stroke()
                context.restoreGState()
                
                /// Instellingen
                let instellingen = NSMutableAttributedString(string: "Instellingen")
                instellingen.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: instellingen.length))
                context.saveGState()
                instellingen.draw(in: CGRect(x: 86.01, y: 0, width: 71.83, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Section
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 289)
                
                /// Line
                let line5 = UIBezierPath()
                line5.move(to: CGPoint(x: 0.45, y: 1.84))
                line5.addLine(to: CGPoint(x: 298.55, y: 1.84))
                context.saveGState()
                context.translateBy(x: 0, y: 36.99)
                line5.lineCapStyle = .square
                line5.lineWidth = 1
                UIColor(white: 0.592, alpha: 0.17).setStroke()
                line5.stroke()
                context.restoreGState()
                
                /// Loguit
                let loguit = NSMutableAttributedString(string: "Loguit")
                loguit.addAttribute(.font, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: loguit.length))
                context.saveGState()
                loguit.draw(in: CGRect(x: 86.53, y: 0, width: 59.61, height: 18))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 20.3, y: 8.72))
        combinedShape.addCurve(to: CGPoint(x: 20.83, y: 9), controlPoint1: CGPoint(x: 20.42, y: 8.89), controlPoint2: CGPoint(x: 20.62, y: 9))
        combinedShape.addLine(to: CGPoint(x: 21, y: 9))
        combinedShape.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 22.66, y: 9), controlPoint2: CGPoint(x: 24, y: 10.34))
        combinedShape.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 24, y: 13.66), controlPoint2: CGPoint(x: 22.66, y: 15))
        combinedShape.addLine(to: CGPoint(x: 20.91, y: 15))
        combinedShape.addCurve(to: CGPoint(x: 20.32, y: 15.39), controlPoint1: CGPoint(x: 20.65, y: 15), controlPoint2: CGPoint(x: 20.42, y: 15.16))
        combinedShape.addCurve(to: CGPoint(x: 20.44, y: 16.11), controlPoint1: CGPoint(x: 20.21, y: 15.65), controlPoint2: CGPoint(x: 20.26, y: 15.93))
        combinedShape.addLine(to: CGPoint(x: 20.5, y: 16.17))
        combinedShape.addCurve(to: CGPoint(x: 21.38, y: 18.29), controlPoint1: CGPoint(x: 21.06, y: 16.74), controlPoint2: CGPoint(x: 21.38, y: 17.5))
        combinedShape.addCurve(to: CGPoint(x: 20.5, y: 20.42), controlPoint1: CGPoint(x: 21.38, y: 19.09), controlPoint2: CGPoint(x: 21.06, y: 19.85))
        combinedShape.addCurve(to: CGPoint(x: 18.38, y: 21.3), controlPoint1: CGPoint(x: 19.93, y: 20.98), controlPoint2: CGPoint(x: 19.17, y: 21.3))
        combinedShape.addCurve(to: CGPoint(x: 16.25, y: 20.42), controlPoint1: CGPoint(x: 17.58, y: 21.3), controlPoint2: CGPoint(x: 16.82, y: 20.98))
        combinedShape.addLine(to: CGPoint(x: 16.2, y: 20.36))
        combinedShape.addCurve(to: CGPoint(x: 15.47, y: 20.24), controlPoint1: CGPoint(x: 16.01, y: 20.18), controlPoint2: CGPoint(x: 15.73, y: 20.13))
        combinedShape.addCurve(to: CGPoint(x: 15.08, y: 20.83), controlPoint1: CGPoint(x: 15.24, y: 20.34), controlPoint2: CGPoint(x: 15.08, y: 20.57))
        combinedShape.addLine(to: CGPoint(x: 15.08, y: 21))
        combinedShape.addCurve(to: CGPoint(x: 12.08, y: 24), controlPoint1: CGPoint(x: 15.08, y: 22.66), controlPoint2: CGPoint(x: 13.74, y: 24))
        combinedShape.addCurve(to: CGPoint(x: 9.08, y: 21), controlPoint1: CGPoint(x: 10.42, y: 24), controlPoint2: CGPoint(x: 9.08, y: 22.66))
        combinedShape.addCurve(to: CGPoint(x: 8.6, y: 20.31), controlPoint1: CGPoint(x: 9.07, y: 20.67), controlPoint2: CGPoint(x: 8.91, y: 20.43))
        combinedShape.addCurve(to: CGPoint(x: 7.89, y: 20.44), controlPoint1: CGPoint(x: 8.35, y: 20.21), controlPoint2: CGPoint(x: 8.07, y: 20.26))
        combinedShape.addLine(to: CGPoint(x: 7.83, y: 20.5))
        combinedShape.addCurve(to: CGPoint(x: 5.71, y: 21.38), controlPoint1: CGPoint(x: 7.26, y: 21.06), controlPoint2: CGPoint(x: 6.5, y: 21.38))
        combinedShape.addCurve(to: CGPoint(x: 3.58, y: 20.5), controlPoint1: CGPoint(x: 4.91, y: 21.38), controlPoint2: CGPoint(x: 4.15, y: 21.06))
        combinedShape.addCurve(to: CGPoint(x: 2.7, y: 18.38), controlPoint1: CGPoint(x: 3.02, y: 19.93), controlPoint2: CGPoint(x: 2.7, y: 19.17))
        combinedShape.addCurve(to: CGPoint(x: 3.58, y: 16.25), controlPoint1: CGPoint(x: 2.7, y: 17.58), controlPoint2: CGPoint(x: 3.02, y: 16.82))
        combinedShape.addLine(to: CGPoint(x: 3.64, y: 16.2))
        combinedShape.addCurve(to: CGPoint(x: 3.76, y: 15.47), controlPoint1: CGPoint(x: 3.82, y: 16.01), controlPoint2: CGPoint(x: 3.87, y: 15.73))
        combinedShape.addCurve(to: CGPoint(x: 3.17, y: 15.08), controlPoint1: CGPoint(x: 3.66, y: 15.24), controlPoint2: CGPoint(x: 3.43, y: 15.08))
        combinedShape.addLine(to: CGPoint(x: 3, y: 15.08))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 12.08), controlPoint1: CGPoint(x: 1.34, y: 15.08), controlPoint2: CGPoint(x: 0, y: 13.74))
        combinedShape.addCurve(to: CGPoint(x: 3, y: 9.08), controlPoint1: CGPoint(x: 0, y: 10.42), controlPoint2: CGPoint(x: 1.34, y: 9.08))
        combinedShape.addCurve(to: CGPoint(x: 3.69, y: 8.6), controlPoint1: CGPoint(x: 3.33, y: 9.07), controlPoint2: CGPoint(x: 3.57, y: 8.91))
        combinedShape.addCurve(to: CGPoint(x: 3.56, y: 7.89), controlPoint1: CGPoint(x: 3.79, y: 8.35), controlPoint2: CGPoint(x: 3.74, y: 8.07))
        combinedShape.addLine(to: CGPoint(x: 3.5, y: 7.83))
        combinedShape.addCurve(to: CGPoint(x: 2.62, y: 5.71), controlPoint1: CGPoint(x: 2.94, y: 7.26), controlPoint2: CGPoint(x: 2.62, y: 6.5))
        combinedShape.addCurve(to: CGPoint(x: 3.5, y: 3.58), controlPoint1: CGPoint(x: 2.62, y: 4.91), controlPoint2: CGPoint(x: 2.94, y: 4.15))
        combinedShape.addCurve(to: CGPoint(x: 5.63, y: 2.7), controlPoint1: CGPoint(x: 4.07, y: 3.02), controlPoint2: CGPoint(x: 4.83, y: 2.7))
        combinedShape.addCurve(to: CGPoint(x: 7.75, y: 3.58), controlPoint1: CGPoint(x: 6.42, y: 2.7), controlPoint2: CGPoint(x: 7.18, y: 3.02))
        combinedShape.addLine(to: CGPoint(x: 7.8, y: 3.64))
        combinedShape.addCurve(to: CGPoint(x: 8.52, y: 3.77), controlPoint1: CGPoint(x: 7.99, y: 3.82), controlPoint2: CGPoint(x: 8.27, y: 3.87))
        combinedShape.addCurve(to: CGPoint(x: 8.72, y: 3.7), controlPoint1: CGPoint(x: 8.58, y: 3.74), controlPoint2: CGPoint(x: 8.65, y: 3.72))
        combinedShape.addCurve(to: CGPoint(x: 9, y: 3.17), controlPoint1: CGPoint(x: 8.89, y: 3.58), controlPoint2: CGPoint(x: 9, y: 3.38))
        combinedShape.addLine(to: CGPoint(x: 9, y: 3))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 9, y: 1.34), controlPoint2: CGPoint(x: 10.34, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 15, y: 3), controlPoint1: CGPoint(x: 13.66, y: 0), controlPoint2: CGPoint(x: 15, y: 1.34))
        combinedShape.addLine(to: CGPoint(x: 15, y: 3.09))
        combinedShape.addCurve(to: CGPoint(x: 15.4, y: 3.69), controlPoint1: CGPoint(x: 15, y: 3.35), controlPoint2: CGPoint(x: 15.16, y: 3.58))
        combinedShape.addCurve(to: CGPoint(x: 16.11, y: 3.56), controlPoint1: CGPoint(x: 15.65, y: 3.79), controlPoint2: CGPoint(x: 15.93, y: 3.74))
        combinedShape.addLine(to: CGPoint(x: 16.17, y: 3.5))
        combinedShape.addCurve(to: CGPoint(x: 18.29, y: 2.62), controlPoint1: CGPoint(x: 16.74, y: 2.94), controlPoint2: CGPoint(x: 17.5, y: 2.62))
        combinedShape.addCurve(to: CGPoint(x: 20.42, y: 3.5), controlPoint1: CGPoint(x: 19.09, y: 2.62), controlPoint2: CGPoint(x: 19.85, y: 2.94))
        combinedShape.addCurve(to: CGPoint(x: 21.3, y: 5.63), controlPoint1: CGPoint(x: 20.98, y: 4.07), controlPoint2: CGPoint(x: 21.3, y: 4.83))
        combinedShape.addCurve(to: CGPoint(x: 20.42, y: 7.75), controlPoint1: CGPoint(x: 21.3, y: 6.42), controlPoint2: CGPoint(x: 20.98, y: 7.18))
        combinedShape.addLine(to: CGPoint(x: 20.36, y: 7.8))
        combinedShape.addCurve(to: CGPoint(x: 20.23, y: 8.52), controlPoint1: CGPoint(x: 20.18, y: 7.99), controlPoint2: CGPoint(x: 20.13, y: 8.27))
        combinedShape.addCurve(to: CGPoint(x: 20.3, y: 8.72), controlPoint1: CGPoint(x: 20.26, y: 8.58), controlPoint2: CGPoint(x: 20.28, y: 8.65))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9.13, y: 5.67))
        combinedShape.addCurve(to: CGPoint(x: 6.39, y: 5.06), controlPoint1: CGPoint(x: 8.18, y: 6), controlPoint2: CGPoint(x: 7.12, y: 5.77))
        combinedShape.addLine(to: CGPoint(x: 6.33, y: 5))
        combinedShape.addCurve(to: CGPoint(x: 5.63, y: 4.7), controlPoint1: CGPoint(x: 6.14, y: 4.81), controlPoint2: CGPoint(x: 5.89, y: 4.7))
        combinedShape.addCurve(to: CGPoint(x: 4.92, y: 5), controlPoint1: CGPoint(x: 5.36, y: 4.7), controlPoint2: CGPoint(x: 5.11, y: 4.81))
        combinedShape.addCurve(to: CGPoint(x: 4.62, y: 5.71), controlPoint1: CGPoint(x: 4.73, y: 5.19), controlPoint2: CGPoint(x: 4.62, y: 5.44))
        combinedShape.addCurve(to: CGPoint(x: 4.92, y: 6.41), controlPoint1: CGPoint(x: 4.62, y: 5.97), controlPoint2: CGPoint(x: 4.73, y: 6.22))
        combinedShape.addLine(to: CGPoint(x: 4.98, y: 6.48))
        combinedShape.addCurve(to: CGPoint(x: 5.54, y: 9.35), controlPoint1: CGPoint(x: 5.74, y: 7.26), controlPoint2: CGPoint(x: 5.95, y: 8.41))
        combinedShape.addCurve(to: CGPoint(x: 3.09, y: 11.08), controlPoint1: CGPoint(x: 5.16, y: 10.37), controlPoint2: CGPoint(x: 4.2, y: 11.05))
        combinedShape.addLine(to: CGPoint(x: 3, y: 11.08))
        combinedShape.addCurve(to: CGPoint(x: 2, y: 12.08), controlPoint1: CGPoint(x: 2.45, y: 11.08), controlPoint2: CGPoint(x: 2, y: 11.53))
        combinedShape.addCurve(to: CGPoint(x: 3, y: 13.08), controlPoint1: CGPoint(x: 2, y: 12.63), controlPoint2: CGPoint(x: 2.45, y: 13.08))
        combinedShape.addLine(to: CGPoint(x: 3.17, y: 13.08))
        combinedShape.addCurve(to: CGPoint(x: 5.59, y: 14.68), controlPoint1: CGPoint(x: 4.23, y: 13.08), controlPoint2: CGPoint(x: 5.18, y: 13.72))
        combinedShape.addCurve(to: CGPoint(x: 5.06, y: 17.61), controlPoint1: CGPoint(x: 6.03, y: 15.67), controlPoint2: CGPoint(x: 5.82, y: 16.82))
        combinedShape.addLine(to: CGPoint(x: 5, y: 17.67))
        combinedShape.addCurve(to: CGPoint(x: 4.7, y: 18.38), controlPoint1: CGPoint(x: 4.81, y: 17.86), controlPoint2: CGPoint(x: 4.7, y: 18.11))
        combinedShape.addCurve(to: CGPoint(x: 5, y: 19.08), controlPoint1: CGPoint(x: 4.7, y: 18.64), controlPoint2: CGPoint(x: 4.81, y: 18.89))
        combinedShape.addCurve(to: CGPoint(x: 5.71, y: 19.38), controlPoint1: CGPoint(x: 5.19, y: 19.27), controlPoint2: CGPoint(x: 5.44, y: 19.38))
        combinedShape.addCurve(to: CGPoint(x: 6.41, y: 19.08), controlPoint1: CGPoint(x: 5.97, y: 19.38), controlPoint2: CGPoint(x: 6.22, y: 19.27))
        combinedShape.addLine(to: CGPoint(x: 6.48, y: 19.02))
        combinedShape.addCurve(to: CGPoint(x: 9.35, y: 18.46), controlPoint1: CGPoint(x: 7.26, y: 18.26), controlPoint2: CGPoint(x: 8.41, y: 18.05))
        combinedShape.addCurve(to: CGPoint(x: 11.08, y: 20.91), controlPoint1: CGPoint(x: 10.37, y: 18.84), controlPoint2: CGPoint(x: 11.05, y: 19.8))
        combinedShape.addLine(to: CGPoint(x: 11.08, y: 21))
        combinedShape.addCurve(to: CGPoint(x: 12.08, y: 22), controlPoint1: CGPoint(x: 11.08, y: 21.55), controlPoint2: CGPoint(x: 11.53, y: 22))
        combinedShape.addCurve(to: CGPoint(x: 13.08, y: 21), controlPoint1: CGPoint(x: 12.63, y: 22), controlPoint2: CGPoint(x: 13.08, y: 21.55))
        combinedShape.addLine(to: CGPoint(x: 13.08, y: 20.83))
        combinedShape.addCurve(to: CGPoint(x: 14.68, y: 18.41), controlPoint1: CGPoint(x: 13.08, y: 19.77), controlPoint2: CGPoint(x: 13.72, y: 18.82))
        combinedShape.addCurve(to: CGPoint(x: 17.61, y: 18.94), controlPoint1: CGPoint(x: 15.67, y: 17.97), controlPoint2: CGPoint(x: 16.82, y: 18.18))
        combinedShape.addLine(to: CGPoint(x: 17.67, y: 19))
        combinedShape.addCurve(to: CGPoint(x: 18.38, y: 19.3), controlPoint1: CGPoint(x: 17.86, y: 19.19), controlPoint2: CGPoint(x: 18.11, y: 19.3))
        combinedShape.addCurve(to: CGPoint(x: 19.08, y: 19), controlPoint1: CGPoint(x: 18.64, y: 19.3), controlPoint2: CGPoint(x: 18.89, y: 19.19))
        combinedShape.addCurve(to: CGPoint(x: 19.38, y: 18.29), controlPoint1: CGPoint(x: 19.27, y: 18.81), controlPoint2: CGPoint(x: 19.38, y: 18.56))
        combinedShape.addCurve(to: CGPoint(x: 19.08, y: 17.59), controlPoint1: CGPoint(x: 19.38, y: 18.03), controlPoint2: CGPoint(x: 19.27, y: 17.78))
        combinedShape.addLine(to: CGPoint(x: 19.02, y: 17.52))
        combinedShape.addCurve(to: CGPoint(x: 18.49, y: 14.6), controlPoint1: CGPoint(x: 18.26, y: 16.74), controlPoint2: CGPoint(x: 18.05, y: 15.59))
        combinedShape.addCurve(to: CGPoint(x: 20.91, y: 13), controlPoint1: CGPoint(x: 18.9, y: 13.64), controlPoint2: CGPoint(x: 19.85, y: 13))
        combinedShape.addLine(to: CGPoint(x: 21, y: 13))
        combinedShape.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 21.55, y: 13), controlPoint2: CGPoint(x: 22, y: 12.55))
        combinedShape.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 22, y: 11.45), controlPoint2: CGPoint(x: 21.55, y: 11))
        combinedShape.addLine(to: CGPoint(x: 20.83, y: 11))
        combinedShape.addCurve(to: CGPoint(x: 18.4, y: 9.39), controlPoint1: CGPoint(x: 19.77, y: 11), controlPoint2: CGPoint(x: 18.82, y: 10.36))
        combinedShape.addCurve(to: CGPoint(x: 18.33, y: 9.13), controlPoint1: CGPoint(x: 18.36, y: 9.31), controlPoint2: CGPoint(x: 18.34, y: 9.22))
        combinedShape.addCurve(to: CGPoint(x: 18.94, y: 6.39), controlPoint1: CGPoint(x: 18, y: 8.18), controlPoint2: CGPoint(x: 18.23, y: 7.12))
        combinedShape.addLine(to: CGPoint(x: 19, y: 6.33))
        combinedShape.addCurve(to: CGPoint(x: 19.3, y: 5.63), controlPoint1: CGPoint(x: 19.19, y: 6.14), controlPoint2: CGPoint(x: 19.3, y: 5.89))
        combinedShape.addCurve(to: CGPoint(x: 19, y: 4.92), controlPoint1: CGPoint(x: 19.3, y: 5.36), controlPoint2: CGPoint(x: 19.19, y: 5.11))
        combinedShape.addCurve(to: CGPoint(x: 18.29, y: 4.62), controlPoint1: CGPoint(x: 18.81, y: 4.73), controlPoint2: CGPoint(x: 18.56, y: 4.62))
        combinedShape.addCurve(to: CGPoint(x: 17.59, y: 4.92), controlPoint1: CGPoint(x: 18.03, y: 4.62), controlPoint2: CGPoint(x: 17.78, y: 4.73))
        combinedShape.addLine(to: CGPoint(x: 17.52, y: 4.98))
        combinedShape.addCurve(to: CGPoint(x: 14.61, y: 5.52), controlPoint1: CGPoint(x: 16.74, y: 5.74), controlPoint2: CGPoint(x: 15.59, y: 5.95))
        combinedShape.addCurve(to: CGPoint(x: 13, y: 3.09), controlPoint1: CGPoint(x: 13.64, y: 5.1), controlPoint2: CGPoint(x: 13, y: 4.15))
        combinedShape.addLine(to: CGPoint(x: 13, y: 3))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 13, y: 2.45), controlPoint2: CGPoint(x: 12.55, y: 2))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 3), controlPoint1: CGPoint(x: 11.45, y: 2), controlPoint2: CGPoint(x: 11, y: 2.45))
        combinedShape.addLine(to: CGPoint(x: 11, y: 3.17))
        combinedShape.addCurve(to: CGPoint(x: 9.39, y: 5.6), controlPoint1: CGPoint(x: 11, y: 4.23), controlPoint2: CGPoint(x: 10.36, y: 5.18))
        combinedShape.addCurve(to: CGPoint(x: 9.13, y: 5.67), controlPoint1: CGPoint(x: 9.31, y: 5.64), controlPoint2: CGPoint(x: 9.22, y: 5.66))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 12, y: 16))
        combinedShape.addCurve(to: CGPoint(x: 8, y: 12), controlPoint1: CGPoint(x: 9.79, y: 16), controlPoint2: CGPoint(x: 8, y: 14.21))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 8, y: 9.79), controlPoint2: CGPoint(x: 9.79, y: 8))
        combinedShape.addCurve(to: CGPoint(x: 16, y: 12), controlPoint1: CGPoint(x: 14.21, y: 8), controlPoint2: CGPoint(x: 16, y: 9.79))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 16, y: 14.21), controlPoint2: CGPoint(x: 14.21, y: 16))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 12, y: 14))
        combinedShape.addCurve(to: CGPoint(x: 14, y: 12), controlPoint1: CGPoint(x: 13.1, y: 14), controlPoint2: CGPoint(x: 14, y: 13.1))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 14, y: 10.9), controlPoint2: CGPoint(x: 13.1, y: 10))
        combinedShape.addCurve(to: CGPoint(x: 10, y: 12), controlPoint1: CGPoint(x: 10.9, y: 10), controlPoint2: CGPoint(x: 10, y: 10.9))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 14), controlPoint1: CGPoint(x: 10, y: 13.1), controlPoint2: CGPoint(x: 10.9, y: 14))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 12, y: 14))
        context.saveGState()
        UIColor.black.setFill()
        combinedShape.fill()
        context.restoreGState()
        
        /// Combined Shape (Outline Mask)
        context.saveGState()
        combinedShape.addClip()
        
        /// COLOR/ black
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Combined Shape (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawCOLORBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 32, height: 32))
        context.saveGState()
        UIColor.black.setFill()
        rectangle.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawLogout(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 16.59, y: 12))
        combinedShape.addLine(to: CGPoint(x: 7, y: 12))
        combinedShape.addCurve(to: CGPoint(x: 6, y: 11), controlPoint1: CGPoint(x: 6.45, y: 12), controlPoint2: CGPoint(x: 6, y: 11.55))
        combinedShape.addCurve(to: CGPoint(x: 7, y: 10), controlPoint1: CGPoint(x: 6, y: 10.45), controlPoint2: CGPoint(x: 6.45, y: 10))
        combinedShape.addLine(to: CGPoint(x: 16.59, y: 10))
        combinedShape.addLine(to: CGPoint(x: 14.29, y: 7.71))
        combinedShape.addCurve(to: CGPoint(x: 14.29, y: 6.29), controlPoint1: CGPoint(x: 13.9, y: 7.32), controlPoint2: CGPoint(x: 13.9, y: 6.68))
        combinedShape.addCurve(to: CGPoint(x: 15.71, y: 6.29), controlPoint1: CGPoint(x: 14.68, y: 5.9), controlPoint2: CGPoint(x: 15.32, y: 5.9))
        combinedShape.addLine(to: CGPoint(x: 19.71, y: 10.29))
        combinedShape.addCurve(to: CGPoint(x: 19.71, y: 11.71), controlPoint1: CGPoint(x: 20.1, y: 10.68), controlPoint2: CGPoint(x: 20.1, y: 11.32))
        combinedShape.addLine(to: CGPoint(x: 15.71, y: 15.71))
        combinedShape.addCurve(to: CGPoint(x: 14.29, y: 15.71), controlPoint1: CGPoint(x: 15.32, y: 16.1), controlPoint2: CGPoint(x: 14.68, y: 16.1))
        combinedShape.addCurve(to: CGPoint(x: 14.29, y: 14.29), controlPoint1: CGPoint(x: 13.9, y: 15.32), controlPoint2: CGPoint(x: 13.9, y: 14.68))
        combinedShape.addLine(to: CGPoint(x: 16.59, y: 12))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 8, y: 20))
        combinedShape.addCurve(to: CGPoint(x: 9, y: 21), controlPoint1: CGPoint(x: 8.55, y: 20), controlPoint2: CGPoint(x: 9, y: 20.45))
        combinedShape.addCurve(to: CGPoint(x: 8, y: 22), controlPoint1: CGPoint(x: 9, y: 21.55), controlPoint2: CGPoint(x: 8.55, y: 22))
        combinedShape.addLine(to: CGPoint(x: 3, y: 22))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 1.34, y: 22), controlPoint2: CGPoint(x: 0, y: 20.66))
        combinedShape.addLine(to: CGPoint(x: 0, y: 3))
        combinedShape.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 1.34, y: 0))
        combinedShape.addLine(to: CGPoint(x: 8, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 8.55, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
        combinedShape.addCurve(to: CGPoint(x: 8, y: 2), controlPoint1: CGPoint(x: 9, y: 1.55), controlPoint2: CGPoint(x: 8.55, y: 2))
        combinedShape.addLine(to: CGPoint(x: 3, y: 2))
        combinedShape.addCurve(to: CGPoint(x: 2, y: 3), controlPoint1: CGPoint(x: 2.45, y: 2), controlPoint2: CGPoint(x: 2, y: 2.45))
        combinedShape.addLine(to: CGPoint(x: 2, y: 19))
        combinedShape.addCurve(to: CGPoint(x: 3, y: 20), controlPoint1: CGPoint(x: 2, y: 19.55), controlPoint2: CGPoint(x: 2.45, y: 20))
        combinedShape.addLine(to: CGPoint(x: 8, y: 20))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 8, y: 20))
        context.saveGState()
        context.translateBy(x: 2, y: 1)
        UIColor.black.setFill()
        combinedShape.fill()
        context.restoreGState()
        
        /// Combined Shape (Outline Mask)
        context.saveGState()
        combinedShape.apply(CGAffineTransform(translationX: 2, y: 1))
        combinedShape.addClip()
        
        /// COLOR/ black
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Combined Shape (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawCalendarMonth(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 638, height: 531), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 638, height: 531), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 638, y: resizedFrame.height / 531)
        
        /// calendar month
        do {
            context.saveGState()
            
            /// dates
            do {
                context.saveGState()
                context.translateBy(x: 8, y: 485)
                
                /// notification
                let notification = UIBezierPath()
                notification.move(to: CGPoint(x: 4, y: 0))
                notification.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification.addLine(to: CGPoint(x: 0, y: 4))
                notification.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification.addLine(to: CGPoint(x: 4, y: 8))
                notification.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification.addLine(to: CGPoint(x: 8, y: 4))
                notification.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification.addLine(to: CGPoint(x: 4, y: 0))
                notification.close()
                notification.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 16, y: 37)
                notification.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification.fill()
                context.restoreGState()
                
                /// 29
                let _29 = NSMutableAttributedString(string: "29")
                _29.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _29.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _29.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _29.length))
                }
                context.saveGState()
                _29.draw(in: CGRect(x: 97.38, y: 0.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 28
                let _28 = NSMutableAttributedString(string: "28")
                _28.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _28.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _28.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _28.length))
                }
                context.saveGState()
                _28.draw(in: CGRect(x: 0.46, y: 0.47, width: 40, height: 38))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// dates
            do {
                context.saveGState()
                context.translateBy(x: 8, y: 380)
                
                /// notification
                let notification3 = UIBezierPath()
                notification3.move(to: CGPoint(x: 4, y: 0))
                notification3.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification3.addLine(to: CGPoint(x: 0, y: 4))
                notification3.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification3.addLine(to: CGPoint(x: 4, y: 8))
                notification3.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification3.addLine(to: CGPoint(x: 8, y: 4))
                notification3.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification3.addLine(to: CGPoint(x: 4, y: 0))
                notification3.close()
                notification3.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 502, y: 37)
                notification3.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification3.fill()
                context.restoreGState()
                
                /// notification 2
                let notification2 = UIBezierPath()
                notification2.move(to: CGPoint(x: 4, y: 0))
                notification2.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification2.addLine(to: CGPoint(x: 0, y: 4))
                notification2.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification2.addLine(to: CGPoint(x: 4, y: 8))
                notification2.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification2.addLine(to: CGPoint(x: 8, y: 4))
                notification2.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification2.addLine(to: CGPoint(x: 4, y: 0))
                notification2.close()
                notification2.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 405, y: 37)
                notification2.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification2.fill()
                context.restoreGState()
                
                /// notification
                let notification4 = UIBezierPath()
                notification4.move(to: CGPoint(x: 4, y: 0))
                notification4.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification4.addLine(to: CGPoint(x: 0, y: 4))
                notification4.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification4.addLine(to: CGPoint(x: 4, y: 8))
                notification4.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification4.addLine(to: CGPoint(x: 8, y: 4))
                notification4.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification4.addLine(to: CGPoint(x: 4, y: 0))
                notification4.close()
                notification4.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 113, y: 37)
                notification4.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification4.fill()
                context.restoreGState()
                
                /// 27
                let _27 = NSMutableAttributedString(string: "27")
                _27.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _27.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _27.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _27.length))
                }
                context.saveGState()
                _27.draw(in: CGRect(x: 581.63, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 26
                let _26 = NSMutableAttributedString(string: "26")
                _26.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _26.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _26.length))
                }
                context.saveGState()
                _26.draw(in: CGRect(x: 484.79, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 25
                let _25 = NSMutableAttributedString(string: "25")
                _25.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _25.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _25.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25.length))
                }
                context.saveGState()
                _25.draw(in: CGRect(x: 387.96, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 24
                let _24 = NSMutableAttributedString(string: "24")
                _24.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _24.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _24.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _24.length))
                }
                context.saveGState()
                _24.draw(in: CGRect(x: 291.13, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 23
                let _23 = NSMutableAttributedString(string: "23")
                _23.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _23.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
                }
                context.saveGState()
                _23.draw(in: CGRect(x: 194.21, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 22
                let _22 = NSMutableAttributedString(string: "22")
                _22.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _22.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _22.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _22.length))
                }
                context.saveGState()
                _22.draw(in: CGRect(x: 97.38, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 21
                let _21 = NSMutableAttributedString(string: "21")
                _21.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _21.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _21.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _21.length))
                }
                context.saveGState()
                _21.draw(in: CGRect(x: 0.46, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// dates
            do {
                context.saveGState()
                context.translateBy(x: 8, y: 275)
                
                /// notification
                let notification5 = UIBezierPath()
                notification5.move(to: CGPoint(x: 4, y: 0))
                notification5.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification5.addLine(to: CGPoint(x: 0, y: 4))
                notification5.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification5.addLine(to: CGPoint(x: 4, y: 8))
                notification5.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification5.addLine(to: CGPoint(x: 8, y: 4))
                notification5.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification5.addLine(to: CGPoint(x: 4, y: 0))
                notification5.close()
                notification5.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 598, y: 37)
                notification5.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification5.fill()
                context.restoreGState()
                
                /// notification
                let notification6 = UIBezierPath()
                notification6.move(to: CGPoint(x: 4, y: 0))
                notification6.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification6.addLine(to: CGPoint(x: 0, y: 4))
                notification6.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification6.addLine(to: CGPoint(x: 4, y: 8))
                notification6.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification6.addLine(to: CGPoint(x: 8, y: 4))
                notification6.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification6.addLine(to: CGPoint(x: 4, y: 0))
                notification6.close()
                notification6.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 405, y: 37)
                notification6.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification6.fill()
                context.restoreGState()
                
                /// notification
                let notification7 = UIBezierPath()
                notification7.move(to: CGPoint(x: 4, y: 0))
                notification7.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification7.addLine(to: CGPoint(x: 0, y: 4))
                notification7.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification7.addLine(to: CGPoint(x: 4, y: 8))
                notification7.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification7.addLine(to: CGPoint(x: 8, y: 4))
                notification7.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification7.addLine(to: CGPoint(x: 4, y: 0))
                notification7.close()
                notification7.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 211, y: 37)
                notification7.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification7.fill()
                context.restoreGState()
                
                /// 20
                let _20 = NSMutableAttributedString(string: "20")
                _20.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _20.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
                }
                context.saveGState()
                _20.draw(in: CGRect(x: 581.63, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 19
                let _19 = NSMutableAttributedString(string: "19")
                _19.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _19.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _19.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _19.length))
                }
                context.saveGState()
                _19.draw(in: CGRect(x: 484.79, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 18
                let _18 = NSMutableAttributedString(string: "18")
                _18.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _18.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _18.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _18.length))
                }
                context.saveGState()
                _18.draw(in: CGRect(x: 387.96, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 17
                let _17 = NSMutableAttributedString(string: "17")
                _17.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _17.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _17.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _17.length))
                }
                context.saveGState()
                _17.draw(in: CGRect(x: 291.13, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 16
                let _16 = NSMutableAttributedString(string: "16")
                _16.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _16.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _16.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _16.length))
                }
                context.saveGState()
                _16.draw(in: CGRect(x: 194.21, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 15
                let _15 = NSMutableAttributedString(string: "15")
                _15.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _15.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _15.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15.length))
                }
                context.saveGState()
                _15.draw(in: CGRect(x: 97.38, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                /// 14
                let _14 = NSMutableAttributedString(string: "14")
                _14.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 28)!, range: NSRange(location: 0, length: _14.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 28
                    paragraphStyle.minimumLineHeight = 28
                    _14.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _14.length))
                }
                context.saveGState()
                _14.draw(in: CGRect(x: 0.46, y: 0.47, width: 40, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// dates
            do {
                context.saveGState()
                context.translateBy(x: 8, y: 151)
                
                /// notification
                let notification8 = UIBezierPath()
                notification8.move(to: CGPoint(x: 4, y: 0))
                notification8.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification8.addLine(to: CGPoint(x: 0, y: 4))
                notification8.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification8.addLine(to: CGPoint(x: 4, y: 8))
                notification8.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification8.addLine(to: CGPoint(x: 8, y: 4))
                notification8.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification8.addLine(to: CGPoint(x: 4, y: 0))
                notification8.close()
                notification8.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 502, y: 56)
                notification8.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification8.fill()
                context.restoreGState()
                
                /// notification
                let notification9 = UIBezierPath()
                notification9.move(to: CGPoint(x: 4, y: 0))
                notification9.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification9.addLine(to: CGPoint(x: 0, y: 4))
                notification9.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification9.addLine(to: CGPoint(x: 4, y: 8))
                notification9.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification9.addLine(to: CGPoint(x: 8, y: 4))
                notification9.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification9.addLine(to: CGPoint(x: 4, y: 0))
                notification9.close()
                notification9.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 405, y: 56)
                notification9.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification9.fill()
                context.restoreGState()
                
                /// notification
                let notification10 = UIBezierPath()
                notification10.move(to: CGPoint(x: 4, y: 0))
                notification10.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification10.addLine(to: CGPoint(x: 0, y: 4))
                notification10.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification10.addLine(to: CGPoint(x: 4, y: 8))
                notification10.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification10.addLine(to: CGPoint(x: 8, y: 4))
                notification10.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification10.addLine(to: CGPoint(x: 4, y: 0))
                notification10.close()
                notification10.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 14, y: 56)
                notification10.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification10.fill()
                context.restoreGState()
                
                /// 13
                let _13 = NSMutableAttributedString(string: "13")
                _13.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                }
                context.saveGState()
                _13.draw(in: CGRect(x: 581.63, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 12
                let _12 = NSMutableAttributedString(string: "12")
                _12.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                }
                context.saveGState()
                _12.draw(in: CGRect(x: 484.79, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 11
                let _11 = NSMutableAttributedString(string: "11")
                _11.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                }
                context.saveGState()
                _11.draw(in: CGRect(x: 387.96, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 10
                let _10 = NSMutableAttributedString(string: "10")
                _10.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                }
                context.saveGState()
                _10.draw(in: CGRect(x: 291.13, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 9
                let _9 = NSMutableAttributedString(string: "9")
                _9.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _9.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
                }
                context.saveGState()
                _9.draw(in: CGRect(x: 194.21, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 8
                let _8 = NSMutableAttributedString(string: "8")
                _8.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                context.saveGState()
                _8.draw(in: CGRect(x: 97.38, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 7
                let _7 = NSMutableAttributedString(string: "7")
                _7.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                context.saveGState()
                _7.draw(in: CGRect(x: 0.46, y: 19.47, width: 40, height: 38))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// dates
            do {
                context.saveGState()
                context.translateBy(x: 86, y: 42)
                
                /// notification
                let notification11 = UIBezierPath()
                notification11.move(to: CGPoint(x: 4, y: 0))
                notification11.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification11.addLine(to: CGPoint(x: 0, y: 4))
                notification11.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification11.addLine(to: CGPoint(x: 4, y: 8))
                notification11.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification11.addLine(to: CGPoint(x: 8, y: 4))
                notification11.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification11.addLine(to: CGPoint(x: 4, y: 0))
                notification11.close()
                notification11.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 424, y: 60)
                notification11.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification11.fill()
                context.restoreGState()
                
                /// selected
                let selected2 = UIBezierPath()
                selected2.move(to: CGPoint(x: 40, y: 0))
                selected2.addCurve(to: CGPoint(x: 0, y: 40), controlPoint1: CGPoint(x: 17.91, y: 0), controlPoint2: CGPoint(x: 0, y: 17.9))
                selected2.addLine(to: CGPoint(x: 0, y: 40))
                selected2.addCurve(to: CGPoint(x: 40, y: 80), controlPoint1: CGPoint(x: 0, y: 62.09), controlPoint2: CGPoint(x: 17.9, y: 80))
                selected2.addLine(to: CGPoint(x: 40, y: 80))
                selected2.addCurve(to: CGPoint(x: 80, y: 40), controlPoint1: CGPoint(x: 62.09, y: 80), controlPoint2: CGPoint(x: 80, y: 62.1))
                selected2.addLine(to: CGPoint(x: 80, y: 40))
                selected2.addCurve(to: CGPoint(x: 40, y: 0), controlPoint1: CGPoint(x: 80, y: 17.91), controlPoint2: CGPoint(x: 62.1, y: 0))
                selected2.addLine(to: CGPoint(x: 40, y: 0))
                selected2.close()
                selected2.move(to: CGPoint(x: 40, y: 0))
                context.saveGState()
                context.setAlpha(0.05)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    selected2.usesEvenOddFillRule = true
                    UIColor(hue: 0.667, saturation: 0.237, brightness: 0.149, alpha: 1).setFill()
                    selected2.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// notification
                let notification12 = UIBezierPath()
                notification12.move(to: CGPoint(x: 4, y: 0))
                notification12.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification12.addLine(to: CGPoint(x: 0, y: 4))
                notification12.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification12.addLine(to: CGPoint(x: 4, y: 8))
                notification12.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification12.addLine(to: CGPoint(x: 8, y: 4))
                notification12.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification12.addLine(to: CGPoint(x: 4, y: 0))
                notification12.close()
                notification12.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 327, y: 60)
                notification12.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification12.fill()
                context.restoreGState()
                
                /// notification
                let notification13 = UIBezierPath()
                notification13.move(to: CGPoint(x: 4, y: 0))
                notification13.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.8))
                notification13.addLine(to: CGPoint(x: 0, y: 4))
                notification13.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.8, y: 8))
                notification13.addLine(to: CGPoint(x: 4, y: 8))
                notification13.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.2))
                notification13.addLine(to: CGPoint(x: 8, y: 4))
                notification13.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.2, y: 0))
                notification13.addLine(to: CGPoint(x: 4, y: 0))
                notification13.close()
                notification13.move(to: CGPoint(x: 4, y: 0))
                context.saveGState()
                context.translateBy(x: 132, y: 60)
                notification13.usesEvenOddFillRule = true
                UIColor(hue: 0.608, saturation: 0.749, brightness: 1, alpha: 1).setFill()
                notification13.fill()
                context.restoreGState()
                
                /// 6
                let _6 = NSMutableAttributedString(string: "6")
                _6.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                context.saveGState()
                _6.draw(in: CGRect(x: 503.63, y: 23.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 5
                let _5 = NSMutableAttributedString(string: "5")
                _5.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                }
                context.saveGState()
                _5.draw(in: CGRect(x: 406.79, y: 23.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 4
                let _4 = NSMutableAttributedString(string: "4")
                _4.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _4.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
                }
                context.saveGState()
                _4.draw(in: CGRect(x: 309.96, y: 23.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 3
                let _3 = NSMutableAttributedString(string: "3")
                _3.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _3.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
                }
                context.saveGState()
                _3.draw(in: CGRect(x: 213.13, y: 23.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 2
                let _2 = NSMutableAttributedString(string: "2")
                _2.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
                }
                context.saveGState()
                _2.draw(in: CGRect(x: 116.21, y: 23.47, width: 40, height: 38))
                context.restoreGState()
                
                /// 1
                let _1 = NSMutableAttributedString(string: "1")
                _1.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: _1.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
                }
                context.saveGState()
                _1.draw(in: CGRect(x: 19.38, y: 23.47, width: 40, height: 38))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// days
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 0.42, y: 0.52)
                
                /// S
                let s = NSMutableAttributedString(string: "S")
                s.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: s.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
                }
                context.saveGState()
                s.draw(in: CGRect(x: 0.29, y: 0, width: 60, height: 38))
                context.restoreGState()
                
                /// M
                let m = NSMutableAttributedString(string: "M")
                m.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: m.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
                }
                context.saveGState()
                m.draw(in: CGRect(x: 96.58, y: 0, width: 60, height: 38))
                context.restoreGState()
                
                /// T
                let t = NSMutableAttributedString(string: "T")
                t.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: t.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
                }
                context.saveGState()
                t.draw(in: CGRect(x: 192.58, y: 0, width: 60, height: 38))
                context.restoreGState()
                
                /// W
                let w = NSMutableAttributedString(string: "W")
                w.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: w.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
                }
                context.saveGState()
                w.draw(in: CGRect(x: 288.58, y: 0, width: 60, height: 38))
                context.restoreGState()
                
                /// T
                let t2 = NSMutableAttributedString(string: "T")
                t2.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: t2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    t2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t2.length))
                }
                context.saveGState()
                t2.draw(in: CGRect(x: 384.58, y: 0, width: 60, height: 38))
                context.restoreGState()
                
                /// F
                let f = NSMutableAttributedString(string: "F")
                f.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: f.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
                }
                context.saveGState()
                f.draw(in: CGRect(x: 480.58, y: 0, width: 60, height: 38))
                context.restoreGState()
                
                /// S
                let s2 = NSMutableAttributedString(string: "S")
                s2.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: s2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    s2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s2.length))
                }
                context.saveGState()
                s2.draw(in: CGRect(x: 576.79, y: 0, width: 60, height: 38))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusWhite2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor.white.setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        /// Signal
        do {
            context.saveGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 8.64, y: 6.94))
            wiFi.addLine(to: CGPoint(x: 6.52, y: 9))
            wiFi.addLine(to: CGPoint(x: 4.36, y: 6.91))
            wiFi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
            wiFi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 10.82, y: 4.82))
            wiFi.addLine(to: CGPoint(x: 9.73, y: 5.88))
            wiFi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
            wiFi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
            wiFi.addLine(to: CGPoint(x: 2.18, y: 4.79))
            wiFi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
            wiFi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 13, y: 2.71))
            wiFi.addLine(to: CGPoint(x: 11.91, y: 3.76))
            wiFi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
            wiFi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
            wiFi.addLine(to: CGPoint(x: 0, y: 2.68))
            wiFi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
            wiFi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 13, y: 2.71))
            context.saveGState()
            context.translateBy(x: 87.5, y: 5.5)
            wiFi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wiFi.fill()
            context.restoreGState()
            
            /// Carrier
            let carrier = NSMutableAttributedString(string: "Sketch")
            carrier.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: carrier.length))
            context.saveGState()
            carrier.draw(at: CGPoint(x: 44, y: 3.5))
            context.restoreGState()
            
            /// Mobile Signal
            let mobileSignal = UIBezierPath()
            mobileSignal.move(to: CGPoint(x: 2.75, y: 5.5))
            mobileSignal.addCurve(to: CGPoint(x: 0, y: 2.75), controlPoint1: CGPoint(x: 1.23, y: 5.5), controlPoint2: CGPoint(x: 0, y: 4.27))
            mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.23, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 5.5, y: 2.75), controlPoint1: CGPoint(x: 4.27, y: 0), controlPoint2: CGPoint(x: 5.5, y: 1.23))
            mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 4.27), controlPoint2: CGPoint(x: 4.27, y: 5.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 9.75, y: 5.5))
            mobileSignal.addCurve(to: CGPoint(x: 7, y: 2.75), controlPoint1: CGPoint(x: 8.23, y: 5.5), controlPoint2: CGPoint(x: 7, y: 4.27))
            mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 7, y: 1.23), controlPoint2: CGPoint(x: 8.23, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 12.5, y: 2.75), controlPoint1: CGPoint(x: 11.27, y: 0), controlPoint2: CGPoint(x: 12.5, y: 1.23))
            mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 5.5), controlPoint1: CGPoint(x: 12.5, y: 4.27), controlPoint2: CGPoint(x: 11.27, y: 5.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 16.75, y: 5.5))
            mobileSignal.addCurve(to: CGPoint(x: 14, y: 2.75), controlPoint1: CGPoint(x: 15.23, y: 5.5), controlPoint2: CGPoint(x: 14, y: 4.27))
            mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 0), controlPoint1: CGPoint(x: 14, y: 1.23), controlPoint2: CGPoint(x: 15.23, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 19.5, y: 2.75), controlPoint1: CGPoint(x: 18.27, y: 0), controlPoint2: CGPoint(x: 19.5, y: 1.23))
            mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 5.5), controlPoint1: CGPoint(x: 19.5, y: 4.27), controlPoint2: CGPoint(x: 18.27, y: 5.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 23.75, y: 5.5))
            mobileSignal.addCurve(to: CGPoint(x: 21, y: 2.75), controlPoint1: CGPoint(x: 22.23, y: 5.5), controlPoint2: CGPoint(x: 21, y: 4.27))
            mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 0), controlPoint1: CGPoint(x: 21, y: 1.23), controlPoint2: CGPoint(x: 22.23, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 26.5, y: 2.75), controlPoint1: CGPoint(x: 25.27, y: 0), controlPoint2: CGPoint(x: 26.5, y: 1.23))
            mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 5.5), controlPoint1: CGPoint(x: 26.5, y: 4.27), controlPoint2: CGPoint(x: 25.27, y: 5.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
            mobileSignal.addCurve(to: CGPoint(x: 28, y: 2.75), controlPoint1: CGPoint(x: 29.23, y: 5.5), controlPoint2: CGPoint(x: 28, y: 4.27))
            mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 0), controlPoint1: CGPoint(x: 28, y: 1.23), controlPoint2: CGPoint(x: 29.23, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 33.5, y: 2.75), controlPoint1: CGPoint(x: 32.27, y: 0), controlPoint2: CGPoint(x: 33.5, y: 1.23))
            mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 5.5), controlPoint1: CGPoint(x: 33.5, y: 4.27), controlPoint2: CGPoint(x: 32.27, y: 5.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
            context.saveGState()
            context.translateBy(x: 6.5, y: 7.5)
            mobileSignal.usesEvenOddFillRule = true
            UIColor.white.setFill()
            mobileSignal.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        UIColor(hue: 0.583, saturation: 0.024, brightness: 0.988, alpha: 1).setFill()
        rectangle2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawButtonsPrimary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 275, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 275, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 275, y: resizedFrame.height / 50)
        
        /// CTA
        do {
            context.saveGState()
            
            /// Rectangle 11
            let rectangle11 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 275, height: 50), cornerRadius: 6)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle11.cgPath)
            context.addRect(rectangle11.bounds.insetBy(dx: -7, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -283, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 283, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.453, saturation: 0.772, brightness: 0.755, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            rectangle11.fill()
            context.restoreGState()
            UIColor(hue: 0.453, saturation: 0.772, brightness: 0.755, alpha: 1).setFill()
            rectangle11.fill()
            context.restoreGState()
            
            /// title
            let title = NSMutableAttributedString(string: "Login")
            title.addAttribute(.font, value: UIFont(name: "SourceSansPro-Semibold", size: 18)!, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(in: CGRect(x: 0, y: 0, width: 275, height: 55))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor.white.setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        /// Signal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawOverridesStatusBarSignalWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 139, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 139, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 139, y: resizedFrame.height / 20)
        
        /// Wi-Fi
        let wiFi = UIBezierPath()
        wiFi.move(to: CGPoint(x: 8.64, y: 6.94))
        wiFi.addLine(to: CGPoint(x: 6.52, y: 9))
        wiFi.addLine(to: CGPoint(x: 4.36, y: 6.91))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
        wiFi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 10.82, y: 4.82))
        wiFi.addLine(to: CGPoint(x: 9.73, y: 5.88))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
        wiFi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
        wiFi.addLine(to: CGPoint(x: 2.18, y: 4.79))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
        wiFi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 13, y: 2.71))
        wiFi.addLine(to: CGPoint(x: 11.91, y: 3.76))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
        wiFi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
        wiFi.addLine(to: CGPoint(x: 0, y: 2.68))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
        wiFi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 13, y: 2.71))
        context.saveGState()
        context.translateBy(x: 87.5, y: 5.5)
        wiFi.usesEvenOddFillRule = true
        UIColor.white.setFill()
        wiFi.fill()
        context.restoreGState()
        /// Carrier
        let carrier = NSMutableAttributedString(string: "Avea")
        carrier.addAttribute(.font, value: UIFont(name: ".SFNSText", size: 12)!, range: NSRange(location: 0, length: carrier.length))
        context.saveGState()
        carrier.draw(at: CGPoint(x: 44, y: 2.5))
        context.restoreGState()
        /// Mobile Signal
        let mobileSignal = UIBezierPath()
        mobileSignal.move(to: CGPoint(x: 2.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 0, y: 2.75), controlPoint1: CGPoint(x: 1.23, y: 5.5), controlPoint2: CGPoint(x: 0, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 5.5, y: 2.75), controlPoint1: CGPoint(x: 4.27, y: 0), controlPoint2: CGPoint(x: 5.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 4.27), controlPoint2: CGPoint(x: 4.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 9.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 7, y: 2.75), controlPoint1: CGPoint(x: 8.23, y: 5.5), controlPoint2: CGPoint(x: 7, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 7, y: 1.23), controlPoint2: CGPoint(x: 8.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 12.5, y: 2.75), controlPoint1: CGPoint(x: 11.27, y: 0), controlPoint2: CGPoint(x: 12.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 5.5), controlPoint1: CGPoint(x: 12.5, y: 4.27), controlPoint2: CGPoint(x: 11.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 16.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 14, y: 2.75), controlPoint1: CGPoint(x: 15.23, y: 5.5), controlPoint2: CGPoint(x: 14, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 0), controlPoint1: CGPoint(x: 14, y: 1.23), controlPoint2: CGPoint(x: 15.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 19.5, y: 2.75), controlPoint1: CGPoint(x: 18.27, y: 0), controlPoint2: CGPoint(x: 19.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 5.5), controlPoint1: CGPoint(x: 19.5, y: 4.27), controlPoint2: CGPoint(x: 18.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 23.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 21, y: 2.75), controlPoint1: CGPoint(x: 22.23, y: 5.5), controlPoint2: CGPoint(x: 21, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 0), controlPoint1: CGPoint(x: 21, y: 1.23), controlPoint2: CGPoint(x: 22.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 26.5, y: 2.75), controlPoint1: CGPoint(x: 25.27, y: 0), controlPoint2: CGPoint(x: 26.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 5.5), controlPoint1: CGPoint(x: 26.5, y: 4.27), controlPoint2: CGPoint(x: 25.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 28, y: 2.75), controlPoint1: CGPoint(x: 29.23, y: 5.5), controlPoint2: CGPoint(x: 28, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 0), controlPoint1: CGPoint(x: 28, y: 1.23), controlPoint2: CGPoint(x: 29.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 33.5, y: 2.75), controlPoint1: CGPoint(x: 32.27, y: 0), controlPoint2: CGPoint(x: 33.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 5.5), controlPoint1: CGPoint(x: 33.5, y: 4.27), controlPoint2: CGPoint(x: 32.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        context.saveGState()
        context.translateBy(x: 6.5, y: 7.5)
        mobileSignal.usesEvenOddFillRule = true
        UIColor.white.setFill()
        mobileSignal.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawArrowL(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// forward arrow
        let forwardArrow = UIBezierPath()
        forwardArrow.move(to: CGPoint(x: 2.05, y: 11.25))
        forwardArrow.addLine(to: CGPoint(x: 11.87, y: 11.03))
        forwardArrow.addCurve(to: CGPoint(x: 13, y: 12.12), controlPoint1: CGPoint(x: 12.49, y: 11.01), controlPoint2: CGPoint(x: 13, y: 11.5))
        forwardArrow.addLine(to: CGPoint(x: 13, y: 11.88))
        forwardArrow.addCurve(to: CGPoint(x: 11.87, y: 13.03), controlPoint1: CGPoint(x: 13, y: 12.5), controlPoint2: CGPoint(x: 12.5, y: 13.01))
        forwardArrow.addLine(to: CGPoint(x: 1.42, y: 13.27))
        forwardArrow.addCurve(to: CGPoint(x: 0.61, y: 12.94), controlPoint1: CGPoint(x: 1.1, y: 13.27), controlPoint2: CGPoint(x: 0.81, y: 13.15))
        forwardArrow.addCurve(to: CGPoint(x: 0.05, y: 12.04), controlPoint1: CGPoint(x: 0.28, y: 12.77), controlPoint2: CGPoint(x: 0.05, y: 12.43))
        forwardArrow.addLine(to: CGPoint(x: 0, y: 1.02))
        forwardArrow.addCurve(to: CGPoint(x: 1.02, y: 0), controlPoint1: CGPoint(x: -0, y: 0.46), controlPoint2: CGPoint(x: 0.46, y: 0))
        forwardArrow.addLine(to: CGPoint(x: 0.97, y: 0))
        forwardArrow.addCurve(to: CGPoint(x: 2, y: 1.02), controlPoint1: CGPoint(x: 1.54, y: 0), controlPoint2: CGPoint(x: 2, y: 0.46))
        forwardArrow.addLine(to: CGPoint(x: 2.05, y: 11.25))
        forwardArrow.close()
        forwardArrow.move(to: CGPoint(x: 2.05, y: 11.25))
        context.saveGState()
        context.translateBy(x: 9.29, y: 9.29)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -6.5, y: -6.63)
        forwardArrow.usesEvenOddFillRule = true
        UIColor(hue: 0.607, saturation: 0.129, brightness: 0.487, alpha: 1).setFill()
        forwardArrow.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawDividerblue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 326, height: 1), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 326, height: 1), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 326, y: resizedFrame.height / 1)
        
        /// Divider black
        let dividerBlack = UIBezierPath()
        dividerBlack.move(to: CGPoint(x: 0, y: 0.5))
        dividerBlack.addLine(to: CGPoint(x: 326, y: 0.5))
        context.saveGState()
        context.translateBy(x: 163, y: 0.5)
        context.scaleBy(x: -1, y: -1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -163, y: -0.5)
        dividerBlack.lineCapStyle = .square
        dividerBlack.lineWidth = 1
        UIColor(hue: 0.629, saturation: 0.706, brightness: 1, alpha: 1).setStroke()
        dividerBlack.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextFieldactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 52)
        
        /// cursor
        // Warning: New symbols are not supported.
        /// Divider/black
        // Warning: New symbols are not supported.
        /// Input title Copy
        let inputTitleCopy = NSMutableAttributedString(string: "Label")
        inputTitleCopy.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 12)!, range: NSRange(location: 0, length: inputTitleCopy.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            inputTitleCopy.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: inputTitleCopy.length))
        }
        context.saveGState()
        inputTitleCopy.draw(at: CGPoint(x: 0, y: -7))
        context.restoreGState()
        /// oliver@
        let oliver = NSMutableAttributedString(string: "oliver@")
        oliver.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 16)!, range: NSRange(location: 0, length: oliver.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            oliver.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: oliver.length))
        }
        context.saveGState()
        oliver.draw(in: CGRect(x: 2, y: 20, width: 312, height: 27))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawIconView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 13), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 13), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 13)
        
        /// View
        let view = UIBezierPath()
        view.move(to: CGPoint(x: 9.18, y: 0))
        view.addCurve(to: CGPoint(x: 14.75, y: 1.74), controlPoint1: CGPoint(x: 11.24, y: 0), controlPoint2: CGPoint(x: 13.09, y: 0.58))
        view.addCurve(to: CGPoint(x: 18.32, y: 6.25), controlPoint1: CGPoint(x: 16.4, y: 2.9), controlPoint2: CGPoint(x: 17.59, y: 4.4))
        view.addCurve(to: CGPoint(x: 14.75, y: 10.76), controlPoint1: CGPoint(x: 17.59, y: 8.1), controlPoint2: CGPoint(x: 16.4, y: 9.6))
        view.addCurve(to: CGPoint(x: 9.18, y: 12.5), controlPoint1: CGPoint(x: 13.09, y: 11.92), controlPoint2: CGPoint(x: 11.24, y: 12.5))
        view.addCurve(to: CGPoint(x: 3.59, y: 10.76), controlPoint1: CGPoint(x: 7.12, y: 12.5), controlPoint2: CGPoint(x: 5.26, y: 11.92))
        view.addCurve(to: CGPoint(x: 0, y: 6.25), controlPoint1: CGPoint(x: 1.93, y: 9.6), controlPoint2: CGPoint(x: 0.73, y: 8.1))
        view.addCurve(to: CGPoint(x: 3.59, y: 1.74), controlPoint1: CGPoint(x: 0.73, y: 4.4), controlPoint2: CGPoint(x: 1.93, y: 2.9))
        view.addCurve(to: CGPoint(x: 9.18, y: 0), controlPoint1: CGPoint(x: 5.26, y: 0.58), controlPoint2: CGPoint(x: 7.12, y: 0))
        view.close()
        view.move(to: CGPoint(x: 9.18, y: 10.43))
        view.addCurve(to: CGPoint(x: 12.11, y: 9.2), controlPoint1: CGPoint(x: 10.33, y: 10.43), controlPoint2: CGPoint(x: 11.3, y: 10.02))
        view.addCurve(to: CGPoint(x: 13.32, y: 6.25), controlPoint1: CGPoint(x: 12.92, y: 8.38), controlPoint2: CGPoint(x: 13.32, y: 7.4))
        view.addCurve(to: CGPoint(x: 12.11, y: 3.3), controlPoint1: CGPoint(x: 13.32, y: 5.1), controlPoint2: CGPoint(x: 12.92, y: 4.12))
        view.addCurve(to: CGPoint(x: 9.18, y: 2.07), controlPoint1: CGPoint(x: 11.3, y: 2.48), controlPoint2: CGPoint(x: 10.33, y: 2.07))
        view.addCurve(to: CGPoint(x: 6.23, y: 3.3), controlPoint1: CGPoint(x: 8.03, y: 2.07), controlPoint2: CGPoint(x: 7.05, y: 2.48))
        view.addCurve(to: CGPoint(x: 5, y: 6.25), controlPoint1: CGPoint(x: 5.41, y: 4.12), controlPoint2: CGPoint(x: 5, y: 5.1))
        view.addCurve(to: CGPoint(x: 6.23, y: 9.2), controlPoint1: CGPoint(x: 5, y: 7.4), controlPoint2: CGPoint(x: 5.41, y: 8.38))
        view.addCurve(to: CGPoint(x: 9.18, y: 10.43), controlPoint1: CGPoint(x: 7.05, y: 10.02), controlPoint2: CGPoint(x: 8.03, y: 10.43))
        view.close()
        view.move(to: CGPoint(x: 9.16, y: 3.75))
        view.addCurve(to: CGPoint(x: 10.94, y: 4.47), controlPoint1: CGPoint(x: 9.85, y: 3.75), controlPoint2: CGPoint(x: 10.44, y: 3.99))
        view.addCurve(to: CGPoint(x: 11.68, y: 6.25), controlPoint1: CGPoint(x: 11.43, y: 4.95), controlPoint2: CGPoint(x: 11.68, y: 5.55))
        view.addCurve(to: CGPoint(x: 10.94, y: 8.03), controlPoint1: CGPoint(x: 11.68, y: 6.95), controlPoint2: CGPoint(x: 11.43, y: 7.55))
        view.addCurve(to: CGPoint(x: 9.16, y: 8.75), controlPoint1: CGPoint(x: 10.44, y: 8.51), controlPoint2: CGPoint(x: 9.85, y: 8.75))
        view.addCurve(to: CGPoint(x: 7.4, y: 8.03), controlPoint1: CGPoint(x: 8.47, y: 8.75), controlPoint2: CGPoint(x: 7.88, y: 8.51))
        view.addCurve(to: CGPoint(x: 6.68, y: 6.25), controlPoint1: CGPoint(x: 6.92, y: 7.55), controlPoint2: CGPoint(x: 6.68, y: 6.95))
        view.addCurve(to: CGPoint(x: 7.4, y: 4.47), controlPoint1: CGPoint(x: 6.68, y: 5.55), controlPoint2: CGPoint(x: 6.92, y: 4.95))
        view.addCurve(to: CGPoint(x: 9.16, y: 3.75), controlPoint1: CGPoint(x: 7.88, y: 3.99), controlPoint2: CGPoint(x: 8.47, y: 3.75))
        view.close()
        view.move(to: CGPoint(x: 9.16, y: 3.75))
        context.saveGState()
        context.translateBy(x: 0, y: 0.25)
        view.usesEvenOddFillRule = true
        UIColor(hue: 0.607, saturation: 0.066, brightness: 0.831, alpha: 1).setFill()
        view.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawCursor(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1, y: resizedFrame.height / 24)
        
        /// Line
        let line = UIBezierPath()
        line.move(to: CGPoint(x: 0.5, y: 0))
        line.addLine(to: CGPoint(x: 0.5, y: 24))
        context.saveGState()
        line.lineJoinStyle = .round
        line.lineWidth = 1
        UIColor(white: 0.2, alpha: 1).setStroke()
        line.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawButtoninactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 52)
        
        /// Button - 220x44
        let button220x44 = UIBezierPath()
        button220x44.move(to: CGPoint(x: 4, y: 0))
        button220x44.addLine(to: CGPoint(x: 323, y: 0))
        button220x44.addCurve(to: CGPoint(x: 327, y: 4), controlPoint1: CGPoint(x: 325.21, y: 0), controlPoint2: CGPoint(x: 327, y: 1.79))
        button220x44.addLine(to: CGPoint(x: 327, y: 48))
        button220x44.addCurve(to: CGPoint(x: 323, y: 52), controlPoint1: CGPoint(x: 327, y: 50.21), controlPoint2: CGPoint(x: 325.21, y: 52))
        button220x44.addLine(to: CGPoint(x: 4, y: 52))
        button220x44.addCurve(to: CGPoint(x: 0, y: 48), controlPoint1: CGPoint(x: 1.79, y: 52), controlPoint2: CGPoint(x: 0, y: 50.21))
        button220x44.addLine(to: CGPoint(x: 0, y: 4))
        button220x44.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        button220x44.close()
        button220x44.move(to: CGPoint(x: 4, y: 0))
        context.saveGState()
        button220x44.usesEvenOddFillRule = true
        UIColor(hue: 0.607, saturation: 0.066, brightness: 0.831, alpha: 1).setFill()
        button220x44.fill()
        context.restoreGState()
        /// Text
        let text = NSMutableAttributedString(string: "Get Started")
        text.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 16)!, range: NSRange(location: 0, length: text.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            text.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
        }
        context.saveGState()
        text.draw(in: CGRect(x: 21, y: 17, width: 285, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextFielddefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 52)
        
        /// Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 16)!, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 0, y: 20, width: 312, height: 27))
        context.restoreGState()
        /// Divider
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawDividerGrey(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 326, height: 1), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 326, height: 1), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 326, y: resizedFrame.height / 1)
        
        /// Divider 30%
        let divider30 = UIBezierPath()
        divider30.move(to: CGPoint(x: 0, y: 0.5))
        divider30.addLine(to: CGPoint(x: 326, y: 0.5))
        context.saveGState()
        context.translateBy(x: 163, y: 0.5)
        context.scaleBy(x: -1, y: -1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -163, y: -0.5)
        divider30.lineCapStyle = .square
        divider30.lineWidth = 1
        UIColor(hue: 0.607, saturation: 0.066, brightness: 0.831, alpha: 1).setStroke()
        divider30.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawButtonblack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 52)
        
        /// Button - 220x44
        let button220x44 = UIBezierPath()
        button220x44.move(to: CGPoint(x: 4, y: 0))
        button220x44.addLine(to: CGPoint(x: 323, y: 0))
        button220x44.addCurve(to: CGPoint(x: 327, y: 4), controlPoint1: CGPoint(x: 325.21, y: 0), controlPoint2: CGPoint(x: 327, y: 1.79))
        button220x44.addLine(to: CGPoint(x: 327, y: 48))
        button220x44.addCurve(to: CGPoint(x: 323, y: 52), controlPoint1: CGPoint(x: 327, y: 50.21), controlPoint2: CGPoint(x: 325.21, y: 52))
        button220x44.addLine(to: CGPoint(x: 4, y: 52))
        button220x44.addCurve(to: CGPoint(x: 0, y: 48), controlPoint1: CGPoint(x: 1.79, y: 52), controlPoint2: CGPoint(x: 0, y: 50.21))
        button220x44.addLine(to: CGPoint(x: 0, y: 4))
        button220x44.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        button220x44.close()
        button220x44.move(to: CGPoint(x: 4, y: 0))
        context.saveGState()
        button220x44.usesEvenOddFillRule = true
        UIColor(white: 0.2, alpha: 1).setFill()
        button220x44.fill()
        context.restoreGState()
        /// Text
        let text = NSMutableAttributedString(string: "Get Started")
        text.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 16)!, range: NSRange(location: 0, length: text.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            text.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
        }
        context.saveGState()
        text.draw(in: CGRect(x: 21, y: 17, width: 285, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawButtonblue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 327, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 327, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 327, y: resizedFrame.height / 52)
        
        /// Button - 220x44
        let button220x44 = UIBezierPath()
        button220x44.move(to: CGPoint(x: 4, y: 0))
        button220x44.addLine(to: CGPoint(x: 323, y: 0))
        button220x44.addCurve(to: CGPoint(x: 327, y: 4), controlPoint1: CGPoint(x: 325.21, y: 0), controlPoint2: CGPoint(x: 327, y: 1.79))
        button220x44.addLine(to: CGPoint(x: 327, y: 48))
        button220x44.addCurve(to: CGPoint(x: 323, y: 52), controlPoint1: CGPoint(x: 327, y: 50.21), controlPoint2: CGPoint(x: 325.21, y: 52))
        button220x44.addLine(to: CGPoint(x: 4, y: 52))
        button220x44.addCurve(to: CGPoint(x: 0, y: 48), controlPoint1: CGPoint(x: 1.79, y: 52), controlPoint2: CGPoint(x: 0, y: 50.21))
        button220x44.addLine(to: CGPoint(x: 0, y: 4))
        button220x44.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        button220x44.close()
        button220x44.move(to: CGPoint(x: 4, y: 0))
        context.saveGState()
        button220x44.usesEvenOddFillRule = true
        UIColor(hue: 0.629, saturation: 0.706, brightness: 1, alpha: 1).setFill()
        button220x44.fill()
        context.restoreGState()
        /// Text
        let text = NSMutableAttributedString(string: "Get Started")
        text.addAttribute(.font, value: UIFont(name: "Avenir-Book", size: 16)!, range: NSRange(location: 0, length: text.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            text.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
        }
        context.saveGState()
        text.draw(in: CGRect(x: 21, y: 17, width: 285, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawStatusBarDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Status Bar - Dark
        do {
            context.saveGState()
            
            /// Container
            let container = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 20))
            context.saveGState()
            context.setAlpha(0)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.white.setFill()
                container.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(at: CGPoint(x: 311, y: 2.5))
            context.restoreGState()
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 0.5, y: 7.51))
            battery.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.33), controlPoint2: CGPoint(x: 1.17, y: 9))
            battery.addLine(to: CGPoint(x: 20.5, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.51), controlPoint1: CGPoint(x: 21.33, y: 9), controlPoint2: CGPoint(x: 22, y: 8.33))
            battery.addLine(to: CGPoint(x: 22, y: 1.99))
            battery.addCurve(to: CGPoint(x: 20.5, y: 0.5), controlPoint1: CGPoint(x: 22, y: 1.17), controlPoint2: CGPoint(x: 21.33, y: 0.5))
            battery.addLine(to: CGPoint(x: 2, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.99), controlPoint1: CGPoint(x: 1.17, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 1.17))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.51))
            battery.close()
            battery.move(to: CGPoint(x: 2, y: 0))
            battery.addLine(to: CGPoint(x: 20.5, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.99), controlPoint1: CGPoint(x: 21.61, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.89))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.51))
            battery.addCurve(to: CGPoint(x: 20.5, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.61), controlPoint2: CGPoint(x: 21.6, y: 9.5))
            battery.addLine(to: CGPoint(x: 2, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.51), controlPoint1: CGPoint(x: 0.89, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.61))
            battery.addLine(to: CGPoint(x: 0, y: 1.99))
            battery.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.89), controlPoint2: CGPoint(x: 0.9, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 1, y: 2))
            battery.addLine(to: CGPoint(x: 1, y: 7.5))
            battery.addCurve(to: CGPoint(x: 2, y: 8.5), controlPoint1: CGPoint(x: 1, y: 8.05), controlPoint2: CGPoint(x: 1.45, y: 8.5))
            battery.addLine(to: CGPoint(x: 20.5, y: 8.5))
            battery.addCurve(to: CGPoint(x: 21.5, y: 7.5), controlPoint1: CGPoint(x: 21.05, y: 8.5), controlPoint2: CGPoint(x: 21.5, y: 8.05))
            battery.addLine(to: CGPoint(x: 21.5, y: 2))
            battery.addCurve(to: CGPoint(x: 20.5, y: 1), controlPoint1: CGPoint(x: 21.5, y: 1.45), controlPoint2: CGPoint(x: 21.05, y: 1))
            battery.addLine(to: CGPoint(x: 2, y: 1))
            battery.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 1.45, y: 1), controlPoint2: CGPoint(x: 1, y: 1.45))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.16, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.34))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.17), controlPoint2: CGPoint(x: 24.17, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            context.saveGState()
            context.translateBy(x: 345, y: 5.5)
            UIColor.black.setFill()
            battery.fill()
            context.restoreGState()
            
            /// Bluetooth
            let bluetooth = UIBezierPath()
            bluetooth.move(to: CGPoint(x: 7.96, y: 4.14))
            bluetooth.addLine(to: CGPoint(x: 3.76, y: 0))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 0))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 5.7))
            bluetooth.addLine(to: CGPoint(x: 0.81, y: 2.72))
            bluetooth.addLine(to: CGPoint(x: 0, y: 3.58))
            bluetooth.addLine(to: CGPoint(x: 3.43, y: 7))
            bluetooth.addLine(to: CGPoint(x: 0, y: 10.42))
            bluetooth.addLine(to: CGPoint(x: 0.81, y: 11.28))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 8.3))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 14))
            bluetooth.addLine(to: CGPoint(x: 3.84, y: 14))
            bluetooth.addLine(to: CGPoint(x: 8, y: 9.85))
            bluetooth.addLine(to: CGPoint(x: 5.15, y: 7))
            bluetooth.addLine(to: CGPoint(x: 7.96, y: 4.14))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 5.7))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 2.59))
            bluetooth.addLine(to: CGPoint(x: 6.27, y: 4.15))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 5.7))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 8.3))
            bluetooth.addLine(to: CGPoint(x: 6.29, y: 9.85))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 11.41))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 8.3))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 8.3))
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 297, y: 3)
                bluetooth.usesEvenOddFillRule = true
                UIColor.black.setFill()
                bluetooth.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Wifi
            let wifi = UIBezierPath()
            wifi.move(to: CGPoint(x: 5.92, y: 5.97))
            wifi.addCurve(to: CGPoint(x: 7.96, y: 6.75), controlPoint1: CGPoint(x: 6.7, y: 5.97), controlPoint2: CGPoint(x: 7.41, y: 6.29))
            wifi.addLine(to: CGPoint(x: 5.92, y: 9))
            wifi.addLine(to: CGPoint(x: 3.87, y: 6.75))
            wifi.addCurve(to: CGPoint(x: 5.92, y: 5.97), controlPoint1: CGPoint(x: 4.42, y: 6.29), controlPoint2: CGPoint(x: 5.14, y: 5.97))
            wifi.close()
            wifi.move(to: CGPoint(x: 6, y: 1.51))
            wifi.addCurve(to: CGPoint(x: 0.94, y: 3.39), controlPoint1: CGPoint(x: 4.06, y: 1.51), controlPoint2: CGPoint(x: 2.29, y: 2.22))
            wifi.addLine(to: CGPoint(x: 0, y: 2.35))
            wifi.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 1.6, y: 0.97), controlPoint2: CGPoint(x: 3.7, y: 0))
            wifi.addCurve(to: CGPoint(x: 12, y: 2.36), controlPoint1: CGPoint(x: 8.3, y: 0), controlPoint2: CGPoint(x: 10.39, y: 0.97))
            wifi.addLine(to: CGPoint(x: 11.06, y: 3.39))
            wifi.addCurve(to: CGPoint(x: 6, y: 1.51), controlPoint1: CGPoint(x: 9.7, y: 2.22), controlPoint2: CGPoint(x: 7.94, y: 1.51))
            wifi.close()
            wifi.move(to: CGPoint(x: 5.97, y: 4.5))
            wifi.addCurve(to: CGPoint(x: 2.93, y: 5.61), controlPoint1: CGPoint(x: 4.81, y: 4.5), controlPoint2: CGPoint(x: 3.75, y: 4.92))
            wifi.addLine(to: CGPoint(x: 1.93, y: 4.51))
            wifi.addCurve(to: CGPoint(x: 5.97, y: 2.99), controlPoint1: CGPoint(x: 3.02, y: 3.59), controlPoint2: CGPoint(x: 4.43, y: 2.99))
            wifi.addCurve(to: CGPoint(x: 10.01, y: 4.52), controlPoint1: CGPoint(x: 7.52, y: 2.99), controlPoint2: CGPoint(x: 8.93, y: 3.59))
            wifi.addLine(to: CGPoint(x: 9.01, y: 5.61))
            wifi.addCurve(to: CGPoint(x: 5.97, y: 4.5), controlPoint1: CGPoint(x: 8.19, y: 4.92), controlPoint2: CGPoint(x: 7.13, y: 4.5))
            wifi.close()
            wifi.move(to: CGPoint(x: 5.97, y: 4.5))
            context.saveGState()
            context.translateBy(x: 89, y: 5.5)
            wifi.usesEvenOddFillRule = true
            UIColor.black.setFill()
            wifi.fill()
            context.restoreGState()
            
            /// Carrier
            let carrier = NSMutableAttributedString(string: "Carrier")
            carrier.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: carrier.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                carrier.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: carrier.length))
            }
            context.saveGState()
            carrier.draw(at: CGPoint(x: 44, y: 2.5))
            context.restoreGState()
            
            /// Time
            let time = NSMutableAttributedString(string: "1:20 PM")
            time.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            context.saveGState()
            time.draw(at: CGPoint(x: 163.5, y: 3))
            context.restoreGState()
            
            /// Signal
            let signal = UIBezierPath()
            signal.move(to: CGPoint(x: 33, y: 2.75))
            signal.addCurve(to: CGPoint(x: 30.75, y: 0.5), controlPoint1: CGPoint(x: 33, y: 1.51), controlPoint2: CGPoint(x: 31.99, y: 0.5))
            signal.addCurve(to: CGPoint(x: 28.5, y: 2.75), controlPoint1: CGPoint(x: 29.51, y: 0.5), controlPoint2: CGPoint(x: 28.5, y: 1.51))
            signal.addCurve(to: CGPoint(x: 30.75, y: 5), controlPoint1: CGPoint(x: 28.5, y: 3.99), controlPoint2: CGPoint(x: 29.51, y: 5))
            signal.addCurve(to: CGPoint(x: 33, y: 2.75), controlPoint1: CGPoint(x: 31.99, y: 5), controlPoint2: CGPoint(x: 33, y: 3.99))
            signal.close()
            signal.move(to: CGPoint(x: 28, y: 2.75))
            signal.addCurve(to: CGPoint(x: 30.75, y: 0), controlPoint1: CGPoint(x: 28, y: 1.23), controlPoint2: CGPoint(x: 29.23, y: 0))
            signal.addCurve(to: CGPoint(x: 33.5, y: 2.75), controlPoint1: CGPoint(x: 32.27, y: 0), controlPoint2: CGPoint(x: 33.5, y: 1.23))
            signal.addCurve(to: CGPoint(x: 30.75, y: 5.5), controlPoint1: CGPoint(x: 33.5, y: 4.27), controlPoint2: CGPoint(x: 32.27, y: 5.5))
            signal.addCurve(to: CGPoint(x: 28, y: 2.75), controlPoint1: CGPoint(x: 29.23, y: 5.5), controlPoint2: CGPoint(x: 28, y: 4.27))
            signal.close()
            signal.move(to: CGPoint(x: 23.75, y: 5.5))
            signal.addCurve(to: CGPoint(x: 21, y: 2.75), controlPoint1: CGPoint(x: 22.23, y: 5.5), controlPoint2: CGPoint(x: 21, y: 4.27))
            signal.addCurve(to: CGPoint(x: 23.75, y: 0), controlPoint1: CGPoint(x: 21, y: 1.23), controlPoint2: CGPoint(x: 22.23, y: 0))
            signal.addCurve(to: CGPoint(x: 26.5, y: 2.75), controlPoint1: CGPoint(x: 25.27, y: 0), controlPoint2: CGPoint(x: 26.5, y: 1.23))
            signal.addCurve(to: CGPoint(x: 23.75, y: 5.5), controlPoint1: CGPoint(x: 26.5, y: 4.27), controlPoint2: CGPoint(x: 25.27, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 16.75, y: 5.5))
            signal.addCurve(to: CGPoint(x: 14, y: 2.75), controlPoint1: CGPoint(x: 15.23, y: 5.5), controlPoint2: CGPoint(x: 14, y: 4.27))
            signal.addCurve(to: CGPoint(x: 16.75, y: 0), controlPoint1: CGPoint(x: 14, y: 1.23), controlPoint2: CGPoint(x: 15.23, y: 0))
            signal.addCurve(to: CGPoint(x: 19.5, y: 2.75), controlPoint1: CGPoint(x: 18.27, y: 0), controlPoint2: CGPoint(x: 19.5, y: 1.23))
            signal.addCurve(to: CGPoint(x: 16.75, y: 5.5), controlPoint1: CGPoint(x: 19.5, y: 4.27), controlPoint2: CGPoint(x: 18.27, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 9.75, y: 5.5))
            signal.addCurve(to: CGPoint(x: 7, y: 2.75), controlPoint1: CGPoint(x: 8.23, y: 5.5), controlPoint2: CGPoint(x: 7, y: 4.27))
            signal.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 7, y: 1.23), controlPoint2: CGPoint(x: 8.23, y: 0))
            signal.addCurve(to: CGPoint(x: 12.5, y: 2.75), controlPoint1: CGPoint(x: 11.27, y: 0), controlPoint2: CGPoint(x: 12.5, y: 1.23))
            signal.addCurve(to: CGPoint(x: 9.75, y: 5.5), controlPoint1: CGPoint(x: 12.5, y: 4.27), controlPoint2: CGPoint(x: 11.27, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 2.75, y: 5.5))
            signal.addCurve(to: CGPoint(x: 0, y: 2.75), controlPoint1: CGPoint(x: 1.23, y: 5.5), controlPoint2: CGPoint(x: 0, y: 4.27))
            signal.addCurve(to: CGPoint(x: 2.75, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.23, y: 0))
            signal.addCurve(to: CGPoint(x: 5.5, y: 2.75), controlPoint1: CGPoint(x: 4.27, y: 0), controlPoint2: CGPoint(x: 5.5, y: 1.23))
            signal.addCurve(to: CGPoint(x: 2.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 4.27), controlPoint2: CGPoint(x: 4.27, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 2.75, y: 5.5))
            context.saveGState()
            context.translateBy(x: 6.5, y: 7.5)
            UIColor.black.setFill()
            signal.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfLandingPage() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawLandingPage()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLogin() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawLogin()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMessageboard() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawMessageboard()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMessageboardMenu() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawMessageboardMenu()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMessageboardKeyboard() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawMessageboardKeyboard()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAgenda() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawAgenda()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAgendaMenu() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawAgendaMenu()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAccountSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawAccountSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAccountSettingsMenu() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawAccountSettingsMenu()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRekening() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawRekening()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRekeningMenu() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawRekeningMenu()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfOverridesKeyboardLightSuggestionBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 42), false, 0)
        StyleKit.drawOverridesKeyboardLightSuggestionBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsKeyboardSuggestions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 258), false, 0)
        StyleKit.drawKeyboardsKeyboardSuggestions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsLightLowercase() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        StyleKit.drawKeyboardsLightLowercase()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesKeyboardKeyLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 89, height: 44), false, 0)
        StyleKit.drawOverridesKeyboardKeyLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMenu() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 299, height: 667), false, 0)
        StyleKit.drawMenu()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.drawSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCOLORBlack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.drawCOLORBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLogout() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.drawLogout()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalendarMonth() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 638, height: 531), false, 0)
        StyleKit.drawCalendarMonth()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusWhite2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusWhite2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawBg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonsPrimary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 275, height: 50), false, 0)
        StyleKit.drawButtonsPrimary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesStatusBarSignalWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 139, height: 20), false, 0)
        StyleKit.drawOverridesStatusBarSignalWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfArrowL() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.drawArrowL()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfDividerblue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 326, height: 1), false, 0)
        StyleKit.drawDividerblue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextFieldactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 327, height: 52), false, 0)
        StyleKit.drawTextFieldactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIconView() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 13), false, 0)
        StyleKit.drawIconView()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCursor() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1, height: 24), false, 0)
        StyleKit.drawCursor()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtoninactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 327, height: 52), false, 0)
        StyleKit.drawButtoninactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextFielddefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 327, height: 52), false, 0)
        StyleKit.drawTextFielddefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfDividerGrey() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 326, height: 1), false, 0)
        StyleKit.drawDividerGrey()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonblack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 327, height: 52), false, 0)
        StyleKit.drawButtonblack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonblue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 327, height: 52), false, 0)
        StyleKit.drawButtonblue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfStatusBarDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawStatusBarDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
